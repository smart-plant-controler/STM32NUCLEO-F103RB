
final1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e60  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08006f70  08006f70  00007f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007468  08007468  000091d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007468  08007468  00008468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007470  08007470  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007470  08007470  00008470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007474  08007474  00008474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007478  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001d8  08007650  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08007650  00009470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009692  00000000  00000000  00009201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cce  00000000  00000000  00012893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00014568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006dc  00000000  00000000  00014e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018568  00000000  00000000  0001554c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acc7  00000000  00000000  0002dab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000892b4  00000000  00000000  0003877b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1a2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000358c  00000000  00000000  000c1a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c5000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f58 	.word	0x08006f58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08006f58 	.word	0x08006f58

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <now_ms>:
#define PC_RX_BUF_SIZE 64
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
static inline uint32_t now_ms(void){ return HAL_GetTick(); }
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	f000 ff44 	bl	800192c <HAL_GetTick>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <uart_send_str>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* ==== 구현부 ==== */
/* ESP32(USART1) + PC(USART2) 동시 송신 */
static void uart_send_str(const char *s){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    uint16_t len = (uint16_t)strlen(s);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fb55 	bl	8000164 <strlen>
 8000aba:	4603      	mov	r3, r0
 8000abc:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit(&huart1, (uint8_t*)s, len, 10);
 8000abe:	89fa      	ldrh	r2, [r7, #14]
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <uart_send_str+0x34>)
 8000ac6:	f002 fd27 	bl	8003518 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)s, len, 10);
 8000aca:	89fa      	ldrh	r2, [r7, #14]
 8000acc:	230a      	movs	r3, #10
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <uart_send_str+0x38>)
 8000ad2:	f002 fd21 	bl	8003518 <HAL_UART_Transmit>
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000224 	.word	0x20000224
 8000ae4:	2000026c 	.word	0x2000026c

08000ae8 <pc_log>:
/* PC 터미널(USART2) 전용 로그 */
static void pc_log(const char *s){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)s, (uint16_t)strlen(s), 10);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fb37 	bl	8000164 <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	230a      	movs	r3, #10
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <pc_log+0x24>)
 8000b00:	f002 fd0a 	bl	8003518 <HAL_UART_Transmit>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000026c 	.word	0x2000026c

08000b10 <pump_set>:

static void pump_set(bool on){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
#if RELAY_ACTIVE_HIGH
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2120      	movs	r1, #32
 8000b20:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <pump_set+0x20>)
 8000b22:	f001 fee4 	bl	80028ee <HAL_GPIO_WritePin>
#else
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, on ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <pump_get>:

static bool pump_get(void){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
#if RELAY_ACTIVE_HIGH
  return (HAL_GPIO_ReadPin(RELAY_GPIO_Port, RELAY_Pin) == GPIO_PIN_SET);
 8000b38:	2120      	movs	r1, #32
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <pump_get+0x1c>)
 8000b3c:	f001 fec0 	bl	80028c0 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	bf0c      	ite	eq
 8000b46:	2301      	moveq	r3, #1
 8000b48:	2300      	movne	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
#else
  return (HAL_GPIO_ReadPin(RELAY_GPIO_Port, RELAY_Pin) == GPIO_PIN_RESET);
#endif
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40010c00 	.word	0x40010c00

08000b54 <tank_empty_raw>:

/* Pull-up: LOW면 EMPTY(물 부족) */
static bool tank_empty_raw(void){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET);
 8000b58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <tank_empty_raw+0x20>)
 8000b5e:	f001 feaf 	bl	80028c0 <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	bf0c      	ite	eq
 8000b68:	2301      	moveq	r3, #1
 8000b6a:	2300      	movne	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010c00 	.word	0x40010c00

08000b78 <adc_read_average>:

/* ADC 다중 샘플 평균 */
static uint16_t adc_read_average(uint8_t samples){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  uint32_t acc = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  for(uint8_t i=0;i<samples;i++){
 8000b86:	2300      	movs	r3, #0
 8000b88:	72fb      	strb	r3, [r7, #11]
 8000b8a:	e016      	b.n	8000bba <adc_read_average+0x42>
    HAL_ADC_Start(&hadc1);
 8000b8c:	4811      	ldr	r0, [pc, #68]	@ (8000bd4 <adc_read_average+0x5c>)
 8000b8e:	f000 ffd3 	bl	8001b38 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8000b92:	210a      	movs	r1, #10
 8000b94:	480f      	ldr	r0, [pc, #60]	@ (8000bd4 <adc_read_average+0x5c>)
 8000b96:	f001 f8a9 	bl	8001cec <HAL_ADC_PollForConversion>
    acc += HAL_ADC_GetValue(&hadc1);
 8000b9a:	480e      	ldr	r0, [pc, #56]	@ (8000bd4 <adc_read_average+0x5c>)
 8000b9c:	f001 f9ac 	bl	8001ef8 <HAL_ADC_GetValue>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Stop(&hadc1);
 8000ba8:	480a      	ldr	r0, [pc, #40]	@ (8000bd4 <adc_read_average+0x5c>)
 8000baa:	f001 f873 	bl	8001c94 <HAL_ADC_Stop>
    HAL_Delay(2);
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f000 fec6 	bl	8001940 <HAL_Delay>
  for(uint8_t i=0;i<samples;i++){
 8000bb4:	7afb      	ldrb	r3, [r7, #11]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	72fb      	strb	r3, [r7, #11]
 8000bba:	7afa      	ldrb	r2, [r7, #11]
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d3e4      	bcc.n	8000b8c <adc_read_average+0x14>
  }
  return (uint16_t)(acc / samples);
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	b29b      	uxth	r3, r3
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200001f4 	.word	0x200001f4

08000bd8 <humidity_percent_from_adc>:

/* ADC → % (선형 맵핑, 튜닝된 값 사용) */
static uint8_t humidity_percent_from_adc(uint16_t adc){
 8000bd8:	b480      	push	{r7}
 8000bda:	b087      	sub	sp, #28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
  int32_t wet = g_adc_wet_ref, dry = g_adc_dry_ref;
 8000be2:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <humidity_percent_from_adc+0x5c>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <humidity_percent_from_adc+0x60>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  if(dry == wet) return 0;
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d101      	bne.n	8000bfa <humidity_percent_from_adc+0x22>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e017      	b.n	8000c2a <humidity_percent_from_adc+0x52>
  int32_t pct = ((int32_t)dry - (int32_t)adc) * 100 / ((int32_t)dry - (int32_t)wet);
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	2264      	movs	r2, #100	@ 0x64
 8000c02:	fb03 f202 	mul.w	r2, r3, r2
 8000c06:	68f9      	ldr	r1, [r7, #12]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	1acb      	subs	r3, r1, r3
 8000c0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c10:	617b      	str	r3, [r7, #20]
  if(pct < 0) pct = 0; if(pct > 100) pct = 100;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da01      	bge.n	8000c1c <humidity_percent_from_adc+0x44>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	2b64      	cmp	r3, #100	@ 0x64
 8000c20:	dd01      	ble.n	8000c26 <humidity_percent_from_adc+0x4e>
 8000c22:	2364      	movs	r3, #100	@ 0x64
 8000c24:	617b      	str	r3, [r7, #20]
  return (uint8_t)pct;
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	b2db      	uxtb	r3, r3
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	371c      	adds	r7, #28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000002 	.word	0x20000002

08000c3c <send_H>:

/* 메시지 송신 */
static void send_H(uint8_t pct){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if(pct > 99) pct = 99; // 두 자리 고정
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b63      	cmp	r3, #99	@ 0x63
 8000c4a:	d901      	bls.n	8000c50 <send_H+0x14>
 8000c4c:	2363      	movs	r3, #99	@ 0x63
 8000c4e:	71fb      	strb	r3, [r7, #7]
  char buf[16];
  snprintf(buf, sizeof(buf), "H:%02u\r\n", pct);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f107 0008 	add.w	r0, r7, #8
 8000c56:	4a06      	ldr	r2, [pc, #24]	@ (8000c70 <send_H+0x34>)
 8000c58:	2110      	movs	r1, #16
 8000c5a:	f004 f81b 	bl	8004c94 <sniprintf>
  uart_send_str(buf);
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff22 	bl	8000aac <uart_send_str>
}
 8000c68:	bf00      	nop
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	08006f70 	.word	0x08006f70

08000c74 <send_F_empty>:
static void send_F_empty(void){ uart_send_str("F:0\r\n"); } // 물 부족
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <send_F_empty+0x10>)
 8000c7a:	f7ff ff17 	bl	8000aac <uart_send_str>
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	08006f7c 	.word	0x08006f7c

08000c88 <send_F_full>:
static void send_F_full(void) { uart_send_str("F:1\r\n"); } // 물 충분 복구
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <send_F_full+0x10>)
 8000c8e:	f7ff ff0d 	bl	8000aac <uart_send_str>
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	08006f84 	.word	0x08006f84

08000c9c <send_W_ok>:
static void send_W_ok(void)   { uart_send_str("W:OK\r\n"); }
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <send_W_ok+0x10>)
 8000ca2:	f7ff ff03 	bl	8000aac <uart_send_str>
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	08006f8c 	.word	0x08006f8c

08000cb0 <HAL_GPIO_EXTI_Callback>:

/* EXTI 콜백: PB12 Rising/Falling */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_12){
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000cc0:	d10e      	bne.n	8000ce0 <HAL_GPIO_EXTI_Callback+0x30>
    g_db_target_empty = tank_empty_raw() ? 1 : 0;
 8000cc2:	f7ff ff47 	bl	8000b54 <tank_empty_raw>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <HAL_GPIO_EXTI_Callback+0x38>)
 8000ccc:	701a      	strb	r2, [r3, #0]
    g_db_due_ms = now_ms() + DEBOUNCE_MS;
 8000cce:	f7ff fee5 	bl	8000a9c <now_ms>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	331e      	adds	r3, #30
 8000cd6:	4a05      	ldr	r2, [pc, #20]	@ (8000cec <HAL_GPIO_EXTI_Callback+0x3c>)
 8000cd8:	6013      	str	r3, [r2, #0]
    g_db_pending = 1;
 8000cda:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200002b5 	.word	0x200002b5
 8000cec:	200002b8 	.word	0x200002b8
 8000cf0:	200002b4 	.word	0x200002b4

08000cf4 <HAL_UART_RxCpltCallback>:

/* PC UART 수신 완료 콜백 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1b      	ldr	r2, [pc, #108]	@ (8000d70 <HAL_UART_RxCpltCallback+0x7c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d130      	bne.n	8000d68 <HAL_UART_RxCpltCallback+0x74>
        if (g_pc_rx_idx < PC_RX_BUF_SIZE - 1) {
 8000d06:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <HAL_UART_RxCpltCallback+0x80>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8000d0c:	d824      	bhi.n	8000d58 <HAL_UART_RxCpltCallback+0x64>
            if (g_pc_rx_char == '\n' || g_pc_rx_char == '\r') {
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <HAL_UART_RxCpltCallback+0x84>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b0a      	cmp	r3, #10
 8000d14:	d003      	beq.n	8000d1e <HAL_UART_RxCpltCallback+0x2a>
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <HAL_UART_RxCpltCallback+0x84>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b0d      	cmp	r3, #13
 8000d1c:	d110      	bne.n	8000d40 <HAL_UART_RxCpltCallback+0x4c>
                if (g_pc_rx_idx > 0) { // 내용이 있을 때만 처리
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_UART_RxCpltCallback+0x80>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d008      	beq.n	8000d38 <HAL_UART_RxCpltCallback+0x44>
                    g_pc_rx_buf[g_pc_rx_idx] = '\0';
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <HAL_UART_RxCpltCallback+0x80>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <HAL_UART_RxCpltCallback+0x88>)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	5499      	strb	r1, [r3, r2]
                    g_pc_cmd_received = true;
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <HAL_UART_RxCpltCallback+0x8c>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
                }
                g_pc_rx_idx = 0; // 인덱스 리셋
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <HAL_UART_RxCpltCallback+0x80>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	801a      	strh	r2, [r3, #0]
 8000d3e:	e00e      	b.n	8000d5e <HAL_UART_RxCpltCallback+0x6a>
            } else {
                g_pc_rx_buf[g_pc_rx_idx++] = g_pc_rx_char;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <HAL_UART_RxCpltCallback+0x80>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	b291      	uxth	r1, r2
 8000d48:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <HAL_UART_RxCpltCallback+0x80>)
 8000d4a:	8011      	strh	r1, [r2, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_UART_RxCpltCallback+0x84>)
 8000d50:	7819      	ldrb	r1, [r3, #0]
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <HAL_UART_RxCpltCallback+0x88>)
 8000d54:	5499      	strb	r1, [r3, r2]
 8000d56:	e002      	b.n	8000d5e <HAL_UART_RxCpltCallback+0x6a>
            }
        } else { // 버퍼 오버플로우 방지
            g_pc_rx_idx = 0;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_UART_RxCpltCallback+0x80>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	801a      	strh	r2, [r3, #0]
        }
        // 다음 1바이트 수신 대기
        HAL_UART_Receive_IT(&huart2, &g_pc_rx_char, 1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4905      	ldr	r1, [pc, #20]	@ (8000d78 <HAL_UART_RxCpltCallback+0x84>)
 8000d62:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <HAL_UART_RxCpltCallback+0x90>)
 8000d64:	f002 fc63 	bl	800362e <HAL_UART_Receive_IT>
    }
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40004400 	.word	0x40004400
 8000d74:	20000312 	.word	0x20000312
 8000d78:	20000310 	.word	0x20000310
 8000d7c:	200002d0 	.word	0x200002d0
 8000d80:	20000314 	.word	0x20000314
 8000d84:	2000026c 	.word	0x2000026c

08000d88 <process_pc_command>:

/* PC 명령어 처리 함수 */
void process_pc_command(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	@ 0x50
 8000d8c:	af02      	add	r7, sp, #8
    char buf[64];
    char* cmd = (char*)g_pc_rx_buf;
 8000d8e:	4b44      	ldr	r3, [pc, #272]	@ (8000ea0 <process_pc_command+0x118>)
 8000d90:	647b      	str	r3, [r7, #68]	@ 0x44

    if (strncmp(cmd, "SET_WET=", 8) == 0) {
 8000d92:	2208      	movs	r2, #8
 8000d94:	4943      	ldr	r1, [pc, #268]	@ (8000ea4 <process_pc_command+0x11c>)
 8000d96:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000d98:	f003 fffd 	bl	8004d96 <strncmp>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d124      	bne.n	8000dec <process_pc_command+0x64>
        uint16_t val = (uint16_t)atoi(cmd + 8);
 8000da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000da4:	3308      	adds	r3, #8
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 f9d0 	bl	800414c <atoi>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (val > 0 && val < 4096) {
 8000db2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d014      	beq.n	8000de4 <process_pc_command+0x5c>
 8000dba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000dc2:	d20f      	bcs.n	8000de4 <process_pc_command+0x5c>
            g_adc_wet_ref = val;
 8000dc4:	4a38      	ldr	r2, [pc, #224]	@ (8000ea8 <process_pc_command+0x120>)
 8000dc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000dca:	8013      	strh	r3, [r2, #0]
            snprintf(buf, sizeof(buf), "OK: WET reference set to %u\r\n", g_adc_wet_ref);
 8000dcc:	4b36      	ldr	r3, [pc, #216]	@ (8000ea8 <process_pc_command+0x120>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	4a36      	ldr	r2, [pc, #216]	@ (8000eac <process_pc_command+0x124>)
 8000dd4:	2140      	movs	r1, #64	@ 0x40
 8000dd6:	f003 ff5d 	bl	8004c94 <sniprintf>
            pc_log(buf);
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fe83 	bl	8000ae8 <pc_log>
 8000de2:	e056      	b.n	8000e92 <process_pc_command+0x10a>
        } else {
            pc_log("ERR: Value out of range (1-4095)\r\n");
 8000de4:	4832      	ldr	r0, [pc, #200]	@ (8000eb0 <process_pc_command+0x128>)
 8000de6:	f7ff fe7f 	bl	8000ae8 <pc_log>
 8000dea:	e052      	b.n	8000e92 <process_pc_command+0x10a>
        }
    } else if (strncmp(cmd, "SET_DRY=", 8) == 0) {
 8000dec:	2208      	movs	r2, #8
 8000dee:	4931      	ldr	r1, [pc, #196]	@ (8000eb4 <process_pc_command+0x12c>)
 8000df0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000df2:	f003 ffd0 	bl	8004d96 <strncmp>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d124      	bne.n	8000e46 <process_pc_command+0xbe>
        uint16_t val = (uint16_t)atoi(cmd + 8);
 8000dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dfe:	3308      	adds	r3, #8
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 f9a3 	bl	800414c <atoi>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        if (val > 0 && val < 4096) {
 8000e0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d014      	beq.n	8000e3e <process_pc_command+0xb6>
 8000e14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e1c:	d20f      	bcs.n	8000e3e <process_pc_command+0xb6>
            g_adc_dry_ref = val;
 8000e1e:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <process_pc_command+0x130>)
 8000e20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e24:	8013      	strh	r3, [r2, #0]
            snprintf(buf, sizeof(buf), "OK: DRY reference set to %u\r\n", g_adc_dry_ref);
 8000e26:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <process_pc_command+0x130>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	4638      	mov	r0, r7
 8000e2c:	4a23      	ldr	r2, [pc, #140]	@ (8000ebc <process_pc_command+0x134>)
 8000e2e:	2140      	movs	r1, #64	@ 0x40
 8000e30:	f003 ff30 	bl	8004c94 <sniprintf>
            pc_log(buf);
 8000e34:	463b      	mov	r3, r7
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fe56 	bl	8000ae8 <pc_log>
 8000e3c:	e029      	b.n	8000e92 <process_pc_command+0x10a>
        } else {
            pc_log("ERR: Value out of range (1-4095)\r\n");
 8000e3e:	481c      	ldr	r0, [pc, #112]	@ (8000eb0 <process_pc_command+0x128>)
 8000e40:	f7ff fe52 	bl	8000ae8 <pc_log>
 8000e44:	e025      	b.n	8000e92 <process_pc_command+0x10a>
        }
    } else if (strcmp(cmd, "GET_ADC") == 0) {
 8000e46:	491e      	ldr	r1, [pc, #120]	@ (8000ec0 <process_pc_command+0x138>)
 8000e48:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000e4a:	f7ff f981 	bl	8000150 <strcmp>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d11b      	bne.n	8000e8c <process_pc_command+0x104>
        snprintf(buf, sizeof(buf), "Current RAW ADC: %u\r\n", g_last_adc_raw);
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <process_pc_command+0x13c>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	4638      	mov	r0, r7
 8000e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <process_pc_command+0x140>)
 8000e5c:	2140      	movs	r1, #64	@ 0x40
 8000e5e:	f003 ff19 	bl	8004c94 <sniprintf>
        pc_log(buf);
 8000e62:	463b      	mov	r3, r7
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fe3f 	bl	8000ae8 <pc_log>
        snprintf(buf, sizeof(buf), "Calibrated Refs: WET=%u, DRY=%u\r\n", g_adc_wet_ref, g_adc_dry_ref);
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <process_pc_command+0x120>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <process_pc_command+0x130>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	4638      	mov	r0, r7
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	4a14      	ldr	r2, [pc, #80]	@ (8000ecc <process_pc_command+0x144>)
 8000e7c:	2140      	movs	r1, #64	@ 0x40
 8000e7e:	f003 ff09 	bl	8004c94 <sniprintf>
        pc_log(buf);
 8000e82:	463b      	mov	r3, r7
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe2f 	bl	8000ae8 <pc_log>
 8000e8a:	e002      	b.n	8000e92 <process_pc_command+0x10a>
    } else {
        pc_log("ERR: Unknown command\r\n");
 8000e8c:	4810      	ldr	r0, [pc, #64]	@ (8000ed0 <process_pc_command+0x148>)
 8000e8e:	f7ff fe2b 	bl	8000ae8 <pc_log>
    }
    g_pc_cmd_received = false; // 플래그 클리어
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <process_pc_command+0x14c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	3748      	adds	r7, #72	@ 0x48
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200002d0 	.word	0x200002d0
 8000ea4:	08006f94 	.word	0x08006f94
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	08006fa0 	.word	0x08006fa0
 8000eb0:	08006fc0 	.word	0x08006fc0
 8000eb4:	08006fe4 	.word	0x08006fe4
 8000eb8:	20000002 	.word	0x20000002
 8000ebc:	08006ff0 	.word	0x08006ff0
 8000ec0:	08007010 	.word	0x08007010
 8000ec4:	200002cc 	.word	0x200002cc
 8000ec8:	08007018 	.word	0x08007018
 8000ecc:	08007030 	.word	0x08007030
 8000ed0:	08007054 	.word	0x08007054
 8000ed4:	20000314 	.word	0x20000314

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f000 fccd 	bl	800187c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f915 	bl	8001110 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 fa01 	bl	80012ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eea:	f000 f9d5 	bl	8001298 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000eee:	f000 f96b 	bl	80011c8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ef2:	f000 f9a7 	bl	8001244 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* 부트 메시지(ESP32 + PC 동시) */
  uart_send_str("BOOT: ready\r\n");
 8000ef6:	4876      	ldr	r0, [pc, #472]	@ (80010d0 <main+0x1f8>)
 8000ef8:	f7ff fdd8 	bl	8000aac <uart_send_str>
  pc_log("Commands: GET_ADC, SET_WET=xxxx, SET_DRY=xxxx\r\n");
 8000efc:	4875      	ldr	r0, [pc, #468]	@ (80010d4 <main+0x1fc>)
 8000efe:	f7ff fdf3 	bl	8000ae8 <pc_log>

  /* 초기 상태 */
  pump_set(false);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fe04 	bl	8000b10 <pump_set>
  g_tank_empty = tank_empty_raw();   // 부팅 시점 상태만 확정(알림 X)
 8000f08:	f7ff fe24 	bl	8000b54 <tank_empty_raw>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b71      	ldr	r3, [pc, #452]	@ (80010d8 <main+0x200>)
 8000f12:	701a      	strb	r2, [r3, #0]
  lastHumTx = lastCtrl = now_ms();
 8000f14:	f7ff fdc2 	bl	8000a9c <now_ms>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a70      	ldr	r2, [pc, #448]	@ (80010dc <main+0x204>)
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80010dc <main+0x204>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a6f      	ldr	r2, [pc, #444]	@ (80010e0 <main+0x208>)
 8000f24:	6013      	str	r3, [r2, #0]

  /* PC UART 수신 인터럽트 시작 */
  HAL_UART_Receive_IT(&huart2, &g_pc_rx_char, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	496e      	ldr	r1, [pc, #440]	@ (80010e4 <main+0x20c>)
 8000f2a:	486f      	ldr	r0, [pc, #444]	@ (80010e8 <main+0x210>)
 8000f2c:	f002 fb7f 	bl	800362e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t t = now_ms();
 8000f30:	f7ff fdb4 	bl	8000a9c <now_ms>
 8000f34:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* 0) PC 명령어 처리 */
    if(g_pc_cmd_received){
 8000f36:	4b6d      	ldr	r3, [pc, #436]	@ (80010ec <main+0x214>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <main+0x6c>
        process_pc_command();
 8000f40:	f7ff ff22 	bl	8000d88 <process_pc_command>
    }

    /* 1) EXTI 디바운싱 확정 */
    if (g_db_pending && ((int32_t)(t - g_db_due_ms) >= 0)) {
 8000f44:	4b6a      	ldr	r3, [pc, #424]	@ (80010f0 <main+0x218>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d03a      	beq.n	8000fc4 <main+0xec>
 8000f4e:	4b69      	ldr	r3, [pc, #420]	@ (80010f4 <main+0x21c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db34      	blt.n	8000fc4 <main+0xec>
      bool nowEmpty = tank_empty_raw();
 8000f5a:	f7ff fdfb 	bl	8000b54 <tank_empty_raw>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      if ((uint8_t)nowEmpty == g_db_target_empty) {
 8000f64:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000f68:	4b63      	ldr	r3, [pc, #396]	@ (80010f8 <main+0x220>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d125      	bne.n	8000fbe <main+0xe6>
        bool prev = g_tank_empty;
 8000f72:	4b59      	ldr	r3, [pc, #356]	@ (80010d8 <main+0x200>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        g_tank_empty = nowEmpty;
 8000f7a:	4a57      	ldr	r2, [pc, #348]	@ (80010d8 <main+0x200>)
 8000f7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f80:	7013      	strb	r3, [r2, #0]

        if (!prev && g_tank_empty){
 8000f82:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000f86:	f083 0301 	eor.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d009      	beq.n	8000fa4 <main+0xcc>
 8000f90:	4b51      	ldr	r3, [pc, #324]	@ (80010d8 <main+0x200>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <main+0xcc>
          /* 충분 -> 부족 변화 확정 */
          send_F_empty();
 8000f98:	f7ff fe6c 	bl	8000c74 <send_F_empty>
          pump_set(false); // 안전: 부족이면 즉시 OFF
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fdb7 	bl	8000b10 <pump_set>
 8000fa2:	e00c      	b.n	8000fbe <main+0xe6>
        } else if (prev && !g_tank_empty){
 8000fa4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d008      	beq.n	8000fbe <main+0xe6>
 8000fac:	4b4a      	ldr	r3, [pc, #296]	@ (80010d8 <main+0x200>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <main+0xe6>
          /* 부족 -> 충분 변화 확정 */
          send_F_full();
 8000fba:	f7ff fe65 	bl	8000c88 <send_F_full>
          // *** 중요: 여기서 펌프를 켜지 않음! ***
          // 펌프는 아래 제어 로직에서 습도 조건까지 만족해야 켜짐
        }
      }
      g_db_pending = 0;
 8000fbe:	4b4c      	ldr	r3, [pc, #304]	@ (80010f0 <main+0x218>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
    }

    /* 2) 주기 제어/리포트 */
    if ((t - lastCtrl) >= CONTROL_PERIOD_MS) {
 8000fc4:	4b45      	ldr	r3, [pc, #276]	@ (80010dc <main+0x204>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b63      	cmp	r3, #99	@ 0x63
 8000fce:	d963      	bls.n	8001098 <main+0x1c0>
      lastCtrl = t;
 8000fd0:	4a42      	ldr	r2, [pc, #264]	@ (80010dc <main+0x204>)
 8000fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fd4:	6013      	str	r3, [r2, #0]

      g_last_adc_raw = adc_read_average(16);
 8000fd6:	2010      	movs	r0, #16
 8000fd8:	f7ff fdce 	bl	8000b78 <adc_read_average>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b46      	ldr	r3, [pc, #280]	@ (80010fc <main+0x224>)
 8000fe2:	801a      	strh	r2, [r3, #0]
      uint8_t  humid_pct = humidity_percent_from_adc(g_last_adc_raw);
 8000fe4:	4b45      	ldr	r3, [pc, #276]	@ (80010fc <main+0x224>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fdf5 	bl	8000bd8 <humidity_percent_from_adc>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

      if ((t - lastHumTx) >= HUMID_REPORT_PERIOD_MS) {
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <main+0x208>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001000:	d307      	bcc.n	8001012 <main+0x13a>
        lastHumTx = t;
 8001002:	4a37      	ldr	r2, [pc, #220]	@ (80010e0 <main+0x208>)
 8001004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001006:	6013      	str	r3, [r2, #0]
        send_H(humid_pct);
 8001008:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe15 	bl	8000c3c <send_H>
      }

      bool pump_on = pump_get();
 8001012:	f7ff fd8f 	bl	8000b34 <pump_get>
 8001016:	4603      	mov	r3, r0
 8001018:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

      if (!pump_on) {
 800101c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d013      	beq.n	8001052 <main+0x17a>
        // OFF -> ON 조건: 물 충분하고(AND) 습도 낮음
        if (!g_tank_empty && (humid_pct <= HUMIDITY_LOW_TH)) {
 800102a:	4b2b      	ldr	r3, [pc, #172]	@ (80010d8 <main+0x200>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f083 0301 	eor.w	r3, r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d02f      	beq.n	8001098 <main+0x1c0>
 8001038:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800103c:	2b23      	cmp	r3, #35	@ 0x23
 800103e:	d82b      	bhi.n	8001098 <main+0x1c0>
          pump_set(true);
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff fd65 	bl	8000b10 <pump_set>
          pump_on_ms = t;
 8001046:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <main+0x228>)
 8001048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104a:	6013      	str	r3, [r2, #0]
          send_W_ok(); // 급수 시작 시점에만 전송
 800104c:	f7ff fe26 	bl	8000c9c <send_W_ok>
 8001050:	e022      	b.n	8001098 <main+0x1c0>
        }
      } else {
        // ON 상태 종료 조건: 시간초과 또는 습도회복 또는 물부족
        bool time_exceeded     = ((t - pump_on_ms) >= PUMP_MAX_ON_MS);
 8001052:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <main+0x228>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800105e:	4293      	cmp	r3, r2
 8001060:	bf8c      	ite	hi
 8001062:	2301      	movhi	r3, #1
 8001064:	2300      	movls	r3, #0
 8001066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        bool humidity_recovery = (humid_pct >= HUMIDITY_HIGH_TH);
 800106a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800106e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001070:	bf8c      	ite	hi
 8001072:	2301      	movhi	r3, #1
 8001074:	2300      	movls	r3, #0
 8001076:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        if (time_exceeded || humidity_recovery || g_tank_empty) {
 800107a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800107e:	2b00      	cmp	r3, #0
 8001080:	d107      	bne.n	8001092 <main+0x1ba>
 8001082:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <main+0x1ba>
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <main+0x200>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <main+0x1c0>
          pump_set(false);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff fd3c 	bl	8000b10 <pump_set>
      }
    }

    /* 3) 하트비트(PC 전용) + LD2 토글 */
    static uint32_t lastBeat = 0;
    if ((t - lastBeat) >= 1000) {
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <main+0x22c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010a4:	f4ff af44 	bcc.w	8000f30 <main+0x58>
        lastBeat = t;
 80010a8:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <main+0x22c>)
 80010aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ac:	6013      	str	r3, [r2, #0]
        char beatMsg[32];
        snprintf(beatMsg, sizeof(beatMsg), "BEAT (ADC:%u)\r\n", g_last_adc_raw);
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <main+0x224>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	1d38      	adds	r0, r7, #4
 80010b4:	4a14      	ldr	r2, [pc, #80]	@ (8001108 <main+0x230>)
 80010b6:	2120      	movs	r1, #32
 80010b8:	f003 fdec 	bl	8004c94 <sniprintf>
        pc_log(beatMsg); // PC 터미널에서 ADC 값과 함께 즉시 확인
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fd12 	bl	8000ae8 <pc_log>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // 보드 LED 1초마다 토글
 80010c4:	2120      	movs	r1, #32
 80010c6:	4811      	ldr	r0, [pc, #68]	@ (800110c <main+0x234>)
 80010c8:	f001 fc29 	bl	800291e <HAL_GPIO_TogglePin>
  {
 80010cc:	e730      	b.n	8000f30 <main+0x58>
 80010ce:	bf00      	nop
 80010d0:	0800706c 	.word	0x0800706c
 80010d4:	0800707c 	.word	0x0800707c
 80010d8:	200002bc 	.word	0x200002bc
 80010dc:	200002c4 	.word	0x200002c4
 80010e0:	200002c0 	.word	0x200002c0
 80010e4:	20000310 	.word	0x20000310
 80010e8:	2000026c 	.word	0x2000026c
 80010ec:	20000314 	.word	0x20000314
 80010f0:	200002b4 	.word	0x200002b4
 80010f4:	200002b8 	.word	0x200002b8
 80010f8:	200002b5 	.word	0x200002b5
 80010fc:	200002cc 	.word	0x200002cc
 8001100:	200002c8 	.word	0x200002c8
 8001104:	20000318 	.word	0x20000318
 8001108:	080070ac 	.word	0x080070ac
 800110c:	40010800 	.word	0x40010800

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	@ 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111a:	2228      	movs	r2, #40	@ 0x28
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fe31 	bl	8004d86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001140:	2301      	movs	r3, #1
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001144:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114e:	2301      	movs	r3, #1
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800115a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800115c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001160:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fc0a 	bl	8002980 <HAL_RCC_OscConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001172:	f000 f94d 	bl	8001410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001176:	230f      	movs	r3, #15
 8001178:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001186:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2102      	movs	r1, #2
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fe76 	bl	8002e84 <HAL_RCC_ClockConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800119e:	f000 f937 	bl	8001410 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011a2:	2302      	movs	r3, #2
 80011a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fff6 	bl	80031a0 <HAL_RCCEx_PeriphCLKConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011ba:	f000 f929 	bl	8001410 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	@ 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_ADC1_Init+0x74>)
 80011da:	4a19      	ldr	r2, [pc, #100]	@ (8001240 <MX_ADC1_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <MX_ADC1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <MX_ADC1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_ADC1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_ADC1_Init+0x74>)
 80011f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f8:	4b10      	ldr	r3, [pc, #64]	@ (800123c <MX_ADC1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_ADC1_Init+0x74>)
 8001200:	2201      	movs	r2, #1
 8001202:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <MX_ADC1_Init+0x74>)
 8001206:	f000 fbbf 	bl	8001988 <HAL_ADC_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001210:	f000 f8fe 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001218:	2301      	movs	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800121c:	2306      	movs	r3, #6
 800121e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_ADC1_Init+0x74>)
 8001226:	f000 fe73 	bl	8001f10 <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001230:	f000 f8ee 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001f4 	.word	0x200001f4
 8001240:	40012400 	.word	0x40012400

08001244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <MX_USART1_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800127c:	f002 f8fc 	bl	8003478 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 f8c3 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000224 	.word	0x20000224
 8001294:	40013800 	.word	0x40013800

08001298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 800129e:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <MX_USART2_UART_Init+0x50>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012d0:	f002 f8d2 	bl	8003478 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012da:	f000 f899 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000026c 	.word	0x2000026c
 80012e8:	40004400 	.word	0x40004400

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001300:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a3c      	ldr	r2, [pc, #240]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b3a      	ldr	r3, [pc, #232]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001318:	4b37      	ldr	r3, [pc, #220]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a36      	ldr	r2, [pc, #216]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b34      	ldr	r3, [pc, #208]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b31      	ldr	r3, [pc, #196]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a30      	ldr	r2, [pc, #192]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a2a      	ldr	r2, [pc, #168]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2120      	movs	r1, #32
 8001364:	4825      	ldr	r0, [pc, #148]	@ (80013fc <MX_GPIO_Init+0x110>)
 8001366:	f001 fac2 	bl	80028ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2120      	movs	r1, #32
 800136e:	4824      	ldr	r0, [pc, #144]	@ (8001400 <MX_GPIO_Init+0x114>)
 8001370:	f001 fabd 	bl	80028ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001374:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137a:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <MX_GPIO_Init+0x118>)
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	481f      	ldr	r0, [pc, #124]	@ (8001408 <MX_GPIO_Init+0x11c>)
 800138a:	f001 f915 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800138e:	2320      	movs	r3, #32
 8001390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2302      	movs	r3, #2
 800139c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	4815      	ldr	r0, [pc, #84]	@ (80013fc <MX_GPIO_Init+0x110>)
 80013a6:	f001 f907 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <MX_GPIO_Init+0x120>)
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	4810      	ldr	r0, [pc, #64]	@ (8001400 <MX_GPIO_Init+0x114>)
 80013c0:	f001 f8fa 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 80013c4:	2320      	movs	r3, #32
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	4809      	ldr	r0, [pc, #36]	@ (8001400 <MX_GPIO_Init+0x114>)
 80013dc:	f001 f8ec 	bl	80025b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2028      	movs	r0, #40	@ 0x28
 80013e6:	f000 fffe 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ea:	2028      	movs	r0, #40	@ 0x28
 80013ec:	f001 f817 	bl	800241e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010800 	.word	0x40010800
 8001400:	40010c00 	.word	0x40010c00
 8001404:	10110000 	.word	0x10110000
 8001408:	40011000 	.word	0x40011000
 800140c:	10310000 	.word	0x10310000

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1) { }
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <Error_Handler+0x8>

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_MspInit+0x5c>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <HAL_MspInit+0x5c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_MspInit+0x5c>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_MspInit+0x5c>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_MspInit+0x5c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_MspInit+0x5c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_MspInit+0x60>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_MspInit+0x60>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000

08001480 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <HAL_ADC_MspInit+0x6c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d121      	bne.n	80014e4 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <HAL_ADC_MspInit+0x70>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <HAL_ADC_MspInit+0x70>)
 80014a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_ADC_MspInit+0x70>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_ADC_MspInit+0x70>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <HAL_ADC_MspInit+0x70>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_ADC_MspInit+0x70>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014d0:	2301      	movs	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2303      	movs	r3, #3
 80014d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <HAL_ADC_MspInit+0x74>)
 80014e0:	f001 f86a 	bl	80025b8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40012400 	.word	0x40012400
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010800 	.word	0x40010800

080014f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a39      	ldr	r2, [pc, #228]	@ (80015f8 <HAL_UART_MspInit+0x100>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d13a      	bne.n	800158e <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001518:	4b38      	ldr	r3, [pc, #224]	@ (80015fc <HAL_UART_MspInit+0x104>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a37      	ldr	r2, [pc, #220]	@ (80015fc <HAL_UART_MspInit+0x104>)
 800151e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b35      	ldr	r3, [pc, #212]	@ (80015fc <HAL_UART_MspInit+0x104>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b32      	ldr	r3, [pc, #200]	@ (80015fc <HAL_UART_MspInit+0x104>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a31      	ldr	r2, [pc, #196]	@ (80015fc <HAL_UART_MspInit+0x104>)
 8001536:	f043 0304 	orr.w	r3, r3, #4
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b2f      	ldr	r3, [pc, #188]	@ (80015fc <HAL_UART_MspInit+0x104>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	4619      	mov	r1, r3
 800155c:	4828      	ldr	r0, [pc, #160]	@ (8001600 <HAL_UART_MspInit+0x108>)
 800155e:	f001 f82b 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0318 	add.w	r3, r7, #24
 8001574:	4619      	mov	r1, r3
 8001576:	4822      	ldr	r0, [pc, #136]	@ (8001600 <HAL_UART_MspInit+0x108>)
 8001578:	f001 f81e 	bl	80025b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2025      	movs	r0, #37	@ 0x25
 8001582:	f000 ff30 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001586:	2025      	movs	r0, #37	@ 0x25
 8001588:	f000 ff49 	bl	800241e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800158c:	e030      	b.n	80015f0 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a1c      	ldr	r2, [pc, #112]	@ (8001604 <HAL_UART_MspInit+0x10c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d12b      	bne.n	80015f0 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <HAL_UART_MspInit+0x104>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	4a17      	ldr	r2, [pc, #92]	@ (80015fc <HAL_UART_MspInit+0x104>)
 800159e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a2:	61d3      	str	r3, [r2, #28]
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_UART_MspInit+0x104>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_UART_MspInit+0x104>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a11      	ldr	r2, [pc, #68]	@ (80015fc <HAL_UART_MspInit+0x104>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <HAL_UART_MspInit+0x104>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015c8:	230c      	movs	r3, #12
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2302      	movs	r3, #2
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	4619      	mov	r1, r3
 80015da:	4809      	ldr	r0, [pc, #36]	@ (8001600 <HAL_UART_MspInit+0x108>)
 80015dc:	f000 ffec 	bl	80025b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2026      	movs	r0, #38	@ 0x26
 80015e6:	f000 fefe 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ea:	2026      	movs	r0, #38	@ 0x26
 80015ec:	f000 ff17 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	@ 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40013800 	.word	0x40013800
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010800 	.word	0x40010800
 8001604:	40004400 	.word	0x40004400

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <NMI_Handler+0x4>

08001610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <UsageFault_Handler+0x4>

08001630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f000 f956 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <USART1_IRQHandler+0x10>)
 8001666:	f002 f807 	bl	8003678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000224 	.word	0x20000224

08001674 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <USART2_IRQHandler+0x10>)
 800167a:	f001 fffd 	bl	8003678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000026c 	.word	0x2000026c

08001688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800168c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001690:	f001 f95e 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001694:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001698:	f001 f95a 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <_kill>:

int _kill(int pid, int sig)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016b8:	f003 fbca 	bl	8004e50 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	2216      	movs	r2, #22
 80016c0:	601a      	str	r2, [r3, #0]
  return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_exit>:

void _exit (int status)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d6:	f04f 31ff 	mov.w	r1, #4294967295
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffe7 	bl	80016ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <_exit+0x12>

080016e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e00a      	b.n	800170c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f6:	f3af 8000 	nop.w
 80016fa:	4601      	mov	r1, r0
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf0      	blt.n	80016f6 <_read+0x12>
  }

  return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e009      	b.n	8001744 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	60ba      	str	r2, [r7, #8]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbf1      	blt.n	8001730 <_write+0x12>
  }
  return len;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_close>:

int _close(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800177c:	605a      	str	r2, [r3, #4]
  return 0;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <_isatty>:

int _isatty(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
	...

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f003 fb32 	bl	8004e50 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20005000 	.word	0x20005000
 8001818:	00000400 	.word	0x00000400
 800181c:	2000031c 	.word	0x2000031c
 8001820:	20000470 	.word	0x20000470

08001824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001830:	f7ff fff8 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001834:	480b      	ldr	r0, [pc, #44]	@ (8001864 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001836:	490c      	ldr	r1, [pc, #48]	@ (8001868 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001838:	4a0c      	ldr	r2, [pc, #48]	@ (800186c <LoopFillZerobss+0x16>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a09      	ldr	r2, [pc, #36]	@ (8001870 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800184c:	4c09      	ldr	r4, [pc, #36]	@ (8001874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185a:	f003 faff 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185e:	f7ff fb3b 	bl	8000ed8 <main>
  bx lr
 8001862:	4770      	bx	lr
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800186c:	08007478 	.word	0x08007478
  ldr r2, =_sbss
 8001870:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001874:	20000470 	.word	0x20000470

08001878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC1_2_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <HAL_Init+0x28>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	@ (80018a4 <HAL_Init+0x28>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 fd9f 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff fdc0 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40022000 	.word	0x40022000

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fdb7 	bl	800243a <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 fd7f 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	@ (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000004 	.word	0x20000004
 8001900:	2000000c 	.word	0x2000000c
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_IncTick+0x1c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_IncTick+0x20>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a03      	ldr	r2, [pc, #12]	@ (8001928 <HAL_IncTick+0x20>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	2000000c 	.word	0x2000000c
 8001928:	20000320 	.word	0x20000320

0800192c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b02      	ldr	r3, [pc, #8]	@ (800193c <HAL_GetTick+0x10>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	20000320 	.word	0x20000320

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff fff0 	bl	800192c <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffe0 	bl	800192c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000000c 	.word	0x2000000c

08001988 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0be      	b.n	8001b28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fd5a 	bl	8001480 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fbf1 	bl	80021b4 <ADC_ConversionStop_Disable>
 80019d2:	4603      	mov	r3, r0
 80019d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f040 8099 	bne.w	8001b16 <HAL_ADC_Init+0x18e>
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 8095 	bne.w	8001b16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019f4:	f023 0302 	bic.w	r3, r3, #2
 80019f8:	f043 0202 	orr.w	r2, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7b1b      	ldrb	r3, [r3, #12]
 8001a0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a20:	d003      	beq.n	8001a2a <HAL_ADC_Init+0xa2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d102      	bne.n	8001a30 <HAL_ADC_Init+0xa8>
 8001a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a2e:	e000      	b.n	8001a32 <HAL_ADC_Init+0xaa>
 8001a30:	2300      	movs	r3, #0
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7d1b      	ldrb	r3, [r3, #20]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d119      	bne.n	8001a74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7b1b      	ldrb	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	035a      	lsls	r2, r3, #13
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	e00b      	b.n	8001a74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a60:	f043 0220 	orr.w	r2, r3, #32
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <HAL_ADC_Init+0x1a8>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aa4:	d003      	beq.n	8001aae <HAL_ADC_Init+0x126>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d104      	bne.n	8001ab8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	051b      	lsls	r3, r3, #20
 8001ab6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <HAL_ADC_Init+0x1ac>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d10b      	bne.n	8001af4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	f023 0303 	bic.w	r3, r3, #3
 8001aea:	f043 0201 	orr.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001af2:	e018      	b.n	8001b26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	f023 0312 	bic.w	r3, r3, #18
 8001afc:	f043 0210 	orr.w	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b14:	e007      	b.n	8001b26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	f043 0210 	orr.w	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	ffe1f7fd 	.word	0xffe1f7fd
 8001b34:	ff1f0efe 	.word	0xff1f0efe

08001b38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_Start+0x1a>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e098      	b.n	8001c84 <HAL_ADC_Start+0x14c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fad0 	bl	8002100 <ADC_Enable>
 8001b60:	4603      	mov	r3, r0
 8001b62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 8087 	bne.w	8001c7a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a41      	ldr	r2, [pc, #260]	@ (8001c8c <HAL_ADC_Start+0x154>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d105      	bne.n	8001b96 <HAL_ADC_Start+0x5e>
 8001b8a:	4b41      	ldr	r3, [pc, #260]	@ (8001c90 <HAL_ADC_Start+0x158>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d115      	bne.n	8001bc2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d026      	beq.n	8001bfe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bc0:	e01d      	b.n	8001bfe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8001c90 <HAL_ADC_Start+0x158>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <HAL_ADC_Start+0xaa>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c8c <HAL_ADC_Start+0x154>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10d      	bne.n	8001bfe <HAL_ADC_Start+0xc6>
 8001be2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c90 <HAL_ADC_Start+0x158>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bf6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0e:	f023 0206 	bic.w	r2, r3, #6
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c16:	e002      	b.n	8001c1e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f06f 0202 	mvn.w	r2, #2
 8001c2e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c3a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c3e:	d113      	bne.n	8001c68 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c44:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <HAL_ADC_Start+0x154>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d105      	bne.n	8001c56 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_ADC_Start+0x158>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d108      	bne.n	8001c68 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	e00c      	b.n	8001c82 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	e003      	b.n	8001c82 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40012800 	.word	0x40012800
 8001c90:	40012400 	.word	0x40012400

08001c94 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Stop+0x1a>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e01a      	b.n	8001ce4 <HAL_ADC_Stop+0x50>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fa7c 	bl	80021b4 <ADC_ConversionStop_Disable>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d02:	f7ff fe13 	bl	800192c <HAL_GetTick>
 8001d06:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1a:	f043 0220 	orr.w	r2, r3, #32
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0d3      	b.n	8001ed6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d131      	bne.n	8001da0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d12a      	bne.n	8001da0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d4a:	e021      	b.n	8001d90 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d52:	d01d      	beq.n	8001d90 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_ADC_PollForConversion+0x7e>
 8001d5a:	f7ff fde7 	bl	800192c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d212      	bcs.n	8001d90 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10b      	bne.n	8001d90 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7c:	f043 0204 	orr.w	r2, r3, #4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0a2      	b.n	8001ed6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0d6      	beq.n	8001d4c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d9e:	e070      	b.n	8001e82 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001da0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee0 <HAL_ADC_PollForConversion+0x1f4>)
 8001da2:	681c      	ldr	r4, [r3, #0]
 8001da4:	2002      	movs	r0, #2
 8001da6:	f001 fab1 	bl	800330c <HAL_RCCEx_GetPeriphCLKFreq>
 8001daa:	4603      	mov	r3, r0
 8001dac:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6919      	ldr	r1, [r3, #16]
 8001db6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee4 <HAL_ADC_PollForConversion+0x1f8>)
 8001db8:	400b      	ands	r3, r1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_ADC_PollForConversion+0x104>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68d9      	ldr	r1, [r3, #12]
 8001dc4:	4b48      	ldr	r3, [pc, #288]	@ (8001ee8 <HAL_ADC_PollForConversion+0x1fc>)
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d111      	bne.n	8001df0 <HAL_ADC_PollForConversion+0x104>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6919      	ldr	r1, [r3, #16]
 8001dd2:	4b46      	ldr	r3, [pc, #280]	@ (8001eec <HAL_ADC_PollForConversion+0x200>)
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d108      	bne.n	8001dec <HAL_ADC_PollForConversion+0x100>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68d9      	ldr	r1, [r3, #12]
 8001de0:	4b43      	ldr	r3, [pc, #268]	@ (8001ef0 <HAL_ADC_PollForConversion+0x204>)
 8001de2:	400b      	ands	r3, r1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_PollForConversion+0x100>
 8001de8:	2314      	movs	r3, #20
 8001dea:	e020      	b.n	8001e2e <HAL_ADC_PollForConversion+0x142>
 8001dec:	2329      	movs	r3, #41	@ 0x29
 8001dee:	e01e      	b.n	8001e2e <HAL_ADC_PollForConversion+0x142>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6919      	ldr	r1, [r3, #16]
 8001df6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <HAL_ADC_PollForConversion+0x200>)
 8001df8:	400b      	ands	r3, r1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_ADC_PollForConversion+0x120>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68d9      	ldr	r1, [r3, #12]
 8001e04:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef0 <HAL_ADC_PollForConversion+0x204>)
 8001e06:	400b      	ands	r3, r1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00d      	beq.n	8001e28 <HAL_ADC_PollForConversion+0x13c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6919      	ldr	r1, [r3, #16]
 8001e12:	4b38      	ldr	r3, [pc, #224]	@ (8001ef4 <HAL_ADC_PollForConversion+0x208>)
 8001e14:	400b      	ands	r3, r1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d108      	bne.n	8001e2c <HAL_ADC_PollForConversion+0x140>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68d9      	ldr	r1, [r3, #12]
 8001e20:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <HAL_ADC_PollForConversion+0x208>)
 8001e22:	400b      	ands	r3, r1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_PollForConversion+0x140>
 8001e28:	2354      	movs	r3, #84	@ 0x54
 8001e2a:	e000      	b.n	8001e2e <HAL_ADC_PollForConversion+0x142>
 8001e2c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e34:	e021      	b.n	8001e7a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d01a      	beq.n	8001e74 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_ADC_PollForConversion+0x168>
 8001e44:	f7ff fd72 	bl	800192c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d20f      	bcs.n	8001e74 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d90b      	bls.n	8001e74 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	f043 0204 	orr.w	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e030      	b.n	8001ed6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3301      	adds	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d8d9      	bhi.n	8001e36 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f06f 0212 	mvn.w	r2, #18
 8001e8a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ea2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ea6:	d115      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d111      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	24924924 	.word	0x24924924
 8001ee8:	00924924 	.word	0x00924924
 8001eec:	12492492 	.word	0x12492492
 8001ef0:	00492492 	.word	0x00492492
 8001ef4:	00249249 	.word	0x00249249

08001ef8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x20>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e0dc      	b.n	80020ea <HAL_ADC_ConfigChannel+0x1da>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d81c      	bhi.n	8001f7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b05      	subs	r3, #5
 8001f52:	221f      	movs	r2, #31
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4019      	ands	r1, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b05      	subs	r3, #5
 8001f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f78:	e03c      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d81c      	bhi.n	8001fbc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	3b23      	subs	r3, #35	@ 0x23
 8001f94:	221f      	movs	r2, #31
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	4019      	ands	r1, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	3b23      	subs	r3, #35	@ 0x23
 8001fae:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fba:	e01b      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b41      	subs	r3, #65	@ 0x41
 8001fce:	221f      	movs	r2, #31
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	4019      	ands	r1, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b41      	subs	r3, #65	@ 0x41
 8001fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b09      	cmp	r3, #9
 8001ffa:	d91c      	bls.n	8002036 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68d9      	ldr	r1, [r3, #12]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	3b1e      	subs	r3, #30
 800200e:	2207      	movs	r2, #7
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	4019      	ands	r1, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	6898      	ldr	r0, [r3, #8]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	3b1e      	subs	r3, #30
 8002028:	fa00 f203 	lsl.w	r2, r0, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	e019      	b.n	800206a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6919      	ldr	r1, [r3, #16]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	2207      	movs	r2, #7
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	4019      	ands	r1, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6898      	ldr	r0, [r3, #8]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	fa00 f203 	lsl.w	r2, r0, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b10      	cmp	r3, #16
 8002070:	d003      	beq.n	800207a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002076:	2b11      	cmp	r3, #17
 8002078:	d132      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1d      	ldr	r2, [pc, #116]	@ (80020f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d125      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d126      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80020a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d11a      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020aa:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a13      	ldr	r2, [pc, #76]	@ (80020fc <HAL_ADC_ConfigChannel+0x1ec>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	0c9a      	lsrs	r2, r3, #18
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020c0:	e002      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f9      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x1b2>
 80020ce:	e007      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40012400 	.word	0x40012400
 80020f8:	20000004 	.word	0x20000004
 80020fc:	431bde83 	.word	0x431bde83

08002100 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d040      	beq.n	80021a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800212e:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <ADC_Enable+0xac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1f      	ldr	r2, [pc, #124]	@ (80021b0 <ADC_Enable+0xb0>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	0c9b      	lsrs	r3, r3, #18
 800213a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800213c:	e002      	b.n	8002144 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3b01      	subs	r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f9      	bne.n	800213e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800214a:	f7ff fbef 	bl	800192c <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002150:	e01f      	b.n	8002192 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002152:	f7ff fbeb 	bl	800192c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d918      	bls.n	8002192 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d011      	beq.n	8002192 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e007      	b.n	80021a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d1d8      	bne.n	8002152 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000004 	.word	0x20000004
 80021b0:	431bde83 	.word	0x431bde83

080021b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d12e      	bne.n	800222c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021de:	f7ff fba5 	bl	800192c <HAL_GetTick>
 80021e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021e4:	e01b      	b.n	800221e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021e6:	f7ff fba1 	bl	800192c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d914      	bls.n	800221e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d10d      	bne.n	800221e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e007      	b.n	800222e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d0dc      	beq.n	80021e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	@ (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4906      	ldr	r1, [pc, #24]	@ (80022d0 <__NVIC_EnableIRQ+0x34>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100

080022d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	490c      	ldr	r1, [pc, #48]	@ (8002320 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4908      	ldr	r1, [pc, #32]	@ (8002324 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	0112      	lsls	r2, r2, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	@ 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002370:	f04f 31ff 	mov.w	r1, #4294967295
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43d9      	mvns	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	4313      	orrs	r3, r2
         );
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	@ 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff90 	bl	80022d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff2d 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff42 	bl	8002280 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff90 	bl	8002328 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5f 	bl	80022d4 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff35 	bl	800229c <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d008      	beq.n	800247c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2204      	movs	r2, #4
 800246e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e020      	b.n	80024be <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 020e 	bic.w	r2, r2, #14
 800248a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d005      	beq.n	80024ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2204      	movs	r2, #4
 80024e4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e051      	b.n	8002590 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 020e 	bic.w	r2, r2, #14
 80024fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a22      	ldr	r2, [pc, #136]	@ (800259c <HAL_DMA_Abort_IT+0xd4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d029      	beq.n	800256a <HAL_DMA_Abort_IT+0xa2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a21      	ldr	r2, [pc, #132]	@ (80025a0 <HAL_DMA_Abort_IT+0xd8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <HAL_DMA_Abort_IT+0x9e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_DMA_Abort_IT+0xdc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01a      	beq.n	8002560 <HAL_DMA_Abort_IT+0x98>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1e      	ldr	r2, [pc, #120]	@ (80025a8 <HAL_DMA_Abort_IT+0xe0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d012      	beq.n	800255a <HAL_DMA_Abort_IT+0x92>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <HAL_DMA_Abort_IT+0xe4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00a      	beq.n	8002554 <HAL_DMA_Abort_IT+0x8c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1b      	ldr	r2, [pc, #108]	@ (80025b0 <HAL_DMA_Abort_IT+0xe8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d102      	bne.n	800254e <HAL_DMA_Abort_IT+0x86>
 8002548:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800254c:	e00e      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 800254e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002552:	e00b      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 8002554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002558:	e008      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 800255a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800255e:	e005      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 8002560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002564:	e002      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 8002566:	2310      	movs	r3, #16
 8002568:	e000      	b.n	800256c <HAL_DMA_Abort_IT+0xa4>
 800256a:	2301      	movs	r3, #1
 800256c:	4a11      	ldr	r2, [pc, #68]	@ (80025b4 <HAL_DMA_Abort_IT+0xec>)
 800256e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
    } 
  }
  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40020008 	.word	0x40020008
 80025a0:	4002001c 	.word	0x4002001c
 80025a4:	40020030 	.word	0x40020030
 80025a8:	40020044 	.word	0x40020044
 80025ac:	40020058 	.word	0x40020058
 80025b0:	4002006c 	.word	0x4002006c
 80025b4:	40020000 	.word	0x40020000

080025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b08b      	sub	sp, #44	@ 0x2c
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025c6:	2300      	movs	r3, #0
 80025c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ca:	e169      	b.n	80028a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025cc:	2201      	movs	r2, #1
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	f040 8158 	bne.w	800289a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002858 <HAL_GPIO_Init+0x2a0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d05e      	beq.n	80026b2 <HAL_GPIO_Init+0xfa>
 80025f4:	4a98      	ldr	r2, [pc, #608]	@ (8002858 <HAL_GPIO_Init+0x2a0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d875      	bhi.n	80026e6 <HAL_GPIO_Init+0x12e>
 80025fa:	4a98      	ldr	r2, [pc, #608]	@ (800285c <HAL_GPIO_Init+0x2a4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d058      	beq.n	80026b2 <HAL_GPIO_Init+0xfa>
 8002600:	4a96      	ldr	r2, [pc, #600]	@ (800285c <HAL_GPIO_Init+0x2a4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d86f      	bhi.n	80026e6 <HAL_GPIO_Init+0x12e>
 8002606:	4a96      	ldr	r2, [pc, #600]	@ (8002860 <HAL_GPIO_Init+0x2a8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d052      	beq.n	80026b2 <HAL_GPIO_Init+0xfa>
 800260c:	4a94      	ldr	r2, [pc, #592]	@ (8002860 <HAL_GPIO_Init+0x2a8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d869      	bhi.n	80026e6 <HAL_GPIO_Init+0x12e>
 8002612:	4a94      	ldr	r2, [pc, #592]	@ (8002864 <HAL_GPIO_Init+0x2ac>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d04c      	beq.n	80026b2 <HAL_GPIO_Init+0xfa>
 8002618:	4a92      	ldr	r2, [pc, #584]	@ (8002864 <HAL_GPIO_Init+0x2ac>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d863      	bhi.n	80026e6 <HAL_GPIO_Init+0x12e>
 800261e:	4a92      	ldr	r2, [pc, #584]	@ (8002868 <HAL_GPIO_Init+0x2b0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d046      	beq.n	80026b2 <HAL_GPIO_Init+0xfa>
 8002624:	4a90      	ldr	r2, [pc, #576]	@ (8002868 <HAL_GPIO_Init+0x2b0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d85d      	bhi.n	80026e6 <HAL_GPIO_Init+0x12e>
 800262a:	2b12      	cmp	r3, #18
 800262c:	d82a      	bhi.n	8002684 <HAL_GPIO_Init+0xcc>
 800262e:	2b12      	cmp	r3, #18
 8002630:	d859      	bhi.n	80026e6 <HAL_GPIO_Init+0x12e>
 8002632:	a201      	add	r2, pc, #4	@ (adr r2, 8002638 <HAL_GPIO_Init+0x80>)
 8002634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002638:	080026b3 	.word	0x080026b3
 800263c:	0800268d 	.word	0x0800268d
 8002640:	0800269f 	.word	0x0800269f
 8002644:	080026e1 	.word	0x080026e1
 8002648:	080026e7 	.word	0x080026e7
 800264c:	080026e7 	.word	0x080026e7
 8002650:	080026e7 	.word	0x080026e7
 8002654:	080026e7 	.word	0x080026e7
 8002658:	080026e7 	.word	0x080026e7
 800265c:	080026e7 	.word	0x080026e7
 8002660:	080026e7 	.word	0x080026e7
 8002664:	080026e7 	.word	0x080026e7
 8002668:	080026e7 	.word	0x080026e7
 800266c:	080026e7 	.word	0x080026e7
 8002670:	080026e7 	.word	0x080026e7
 8002674:	080026e7 	.word	0x080026e7
 8002678:	080026e7 	.word	0x080026e7
 800267c:	08002695 	.word	0x08002695
 8002680:	080026a9 	.word	0x080026a9
 8002684:	4a79      	ldr	r2, [pc, #484]	@ (800286c <HAL_GPIO_Init+0x2b4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800268a:	e02c      	b.n	80026e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	623b      	str	r3, [r7, #32]
          break;
 8002692:	e029      	b.n	80026e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	3304      	adds	r3, #4
 800269a:	623b      	str	r3, [r7, #32]
          break;
 800269c:	e024      	b.n	80026e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	3308      	adds	r3, #8
 80026a4:	623b      	str	r3, [r7, #32]
          break;
 80026a6:	e01f      	b.n	80026e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	330c      	adds	r3, #12
 80026ae:	623b      	str	r3, [r7, #32]
          break;
 80026b0:	e01a      	b.n	80026e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026ba:	2304      	movs	r3, #4
 80026bc:	623b      	str	r3, [r7, #32]
          break;
 80026be:	e013      	b.n	80026e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026c8:	2308      	movs	r3, #8
 80026ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	611a      	str	r2, [r3, #16]
          break;
 80026d2:	e009      	b.n	80026e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d4:	2308      	movs	r3, #8
 80026d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	615a      	str	r2, [r3, #20]
          break;
 80026de:	e003      	b.n	80026e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026e0:	2300      	movs	r3, #0
 80026e2:	623b      	str	r3, [r7, #32]
          break;
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x130>
          break;
 80026e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2bff      	cmp	r3, #255	@ 0xff
 80026ec:	d801      	bhi.n	80026f2 <HAL_GPIO_Init+0x13a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	e001      	b.n	80026f6 <HAL_GPIO_Init+0x13e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2bff      	cmp	r3, #255	@ 0xff
 80026fc:	d802      	bhi.n	8002704 <HAL_GPIO_Init+0x14c>
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	e002      	b.n	800270a <HAL_GPIO_Init+0x152>
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	3b08      	subs	r3, #8
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	210f      	movs	r1, #15
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	6a39      	ldr	r1, [r7, #32]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	431a      	orrs	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80b1 	beq.w	800289a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002738:	4b4d      	ldr	r3, [pc, #308]	@ (8002870 <HAL_GPIO_Init+0x2b8>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a4c      	ldr	r2, [pc, #304]	@ (8002870 <HAL_GPIO_Init+0x2b8>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b4a      	ldr	r3, [pc, #296]	@ (8002870 <HAL_GPIO_Init+0x2b8>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002750:	4a48      	ldr	r2, [pc, #288]	@ (8002874 <HAL_GPIO_Init+0x2bc>)
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4013      	ands	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a40      	ldr	r2, [pc, #256]	@ (8002878 <HAL_GPIO_Init+0x2c0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d013      	beq.n	80027a4 <HAL_GPIO_Init+0x1ec>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a3f      	ldr	r2, [pc, #252]	@ (800287c <HAL_GPIO_Init+0x2c4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00d      	beq.n	80027a0 <HAL_GPIO_Init+0x1e8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a3e      	ldr	r2, [pc, #248]	@ (8002880 <HAL_GPIO_Init+0x2c8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d007      	beq.n	800279c <HAL_GPIO_Init+0x1e4>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a3d      	ldr	r2, [pc, #244]	@ (8002884 <HAL_GPIO_Init+0x2cc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d101      	bne.n	8002798 <HAL_GPIO_Init+0x1e0>
 8002794:	2303      	movs	r3, #3
 8002796:	e006      	b.n	80027a6 <HAL_GPIO_Init+0x1ee>
 8002798:	2304      	movs	r3, #4
 800279a:	e004      	b.n	80027a6 <HAL_GPIO_Init+0x1ee>
 800279c:	2302      	movs	r3, #2
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x1ee>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_GPIO_Init+0x1ee>
 80027a4:	2300      	movs	r3, #0
 80027a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a8:	f002 0203 	and.w	r2, r2, #3
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	4093      	lsls	r3, r2
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027b6:	492f      	ldr	r1, [pc, #188]	@ (8002874 <HAL_GPIO_Init+0x2bc>)
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	492c      	ldr	r1, [pc, #176]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	608b      	str	r3, [r1, #8]
 80027dc:	e006      	b.n	80027ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027de:	4b2a      	ldr	r3, [pc, #168]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	4928      	ldr	r1, [pc, #160]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027f8:	4b23      	ldr	r3, [pc, #140]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	4922      	ldr	r1, [pc, #136]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	60cb      	str	r3, [r1, #12]
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002806:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	43db      	mvns	r3, r3
 800280e:	491e      	ldr	r1, [pc, #120]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 8002810:	4013      	ands	r3, r2
 8002812:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002820:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4918      	ldr	r1, [pc, #96]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
 800282c:	e006      	b.n	800283c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800282e:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	43db      	mvns	r3, r3
 8002836:	4914      	ldr	r1, [pc, #80]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 8002838:	4013      	ands	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d021      	beq.n	800288c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002848:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	490e      	ldr	r1, [pc, #56]	@ (8002888 <HAL_GPIO_Init+0x2d0>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]
 8002854:	e021      	b.n	800289a <HAL_GPIO_Init+0x2e2>
 8002856:	bf00      	nop
 8002858:	10320000 	.word	0x10320000
 800285c:	10310000 	.word	0x10310000
 8002860:	10220000 	.word	0x10220000
 8002864:	10210000 	.word	0x10210000
 8002868:	10120000 	.word	0x10120000
 800286c:	10110000 	.word	0x10110000
 8002870:	40021000 	.word	0x40021000
 8002874:	40010000 	.word	0x40010000
 8002878:	40010800 	.word	0x40010800
 800287c:	40010c00 	.word	0x40010c00
 8002880:	40011000 	.word	0x40011000
 8002884:	40011400 	.word	0x40011400
 8002888:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_GPIO_Init+0x304>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	43db      	mvns	r3, r3
 8002894:	4909      	ldr	r1, [pc, #36]	@ (80028bc <HAL_GPIO_Init+0x304>)
 8002896:	4013      	ands	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	3301      	adds	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f47f ae8e 	bne.w	80025cc <HAL_GPIO_Init+0x14>
  }
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	372c      	adds	r7, #44	@ 0x2c
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40010400 	.word	0x40010400

080028c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e001      	b.n	80028e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	807b      	strh	r3, [r7, #2]
 80028fa:	4613      	mov	r3, r2
 80028fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028fe:	787b      	ldrb	r3, [r7, #1]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002904:	887a      	ldrh	r2, [r7, #2]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800290a:	e003      	b.n	8002914 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	041a      	lsls	r2, r3, #16
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	611a      	str	r2, [r3, #16]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002930:	887a      	ldrh	r2, [r7, #2]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4013      	ands	r3, r2
 8002936:	041a      	lsls	r2, r3, #16
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	43d9      	mvns	r1, r3
 800293c:	887b      	ldrh	r3, [r7, #2]
 800293e:	400b      	ands	r3, r1
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	611a      	str	r2, [r3, #16]
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800295a:	4b08      	ldr	r3, [pc, #32]	@ (800297c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002966:	4a05      	ldr	r2, [pc, #20]	@ (800297c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe f99e 	bl	8000cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40010400 	.word	0x40010400

08002980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e272      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8087 	beq.w	8002aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a0:	4b92      	ldr	r3, [pc, #584]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d00c      	beq.n	80029c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ac:	4b8f      	ldr	r3, [pc, #572]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d112      	bne.n	80029de <HAL_RCC_OscConfig+0x5e>
 80029b8:	4b8c      	ldr	r3, [pc, #560]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c4:	d10b      	bne.n	80029de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c6:	4b89      	ldr	r3, [pc, #548]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d06c      	beq.n	8002aac <HAL_RCC_OscConfig+0x12c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d168      	bne.n	8002aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e24c      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x76>
 80029e8:	4b80      	ldr	r3, [pc, #512]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a7f      	ldr	r2, [pc, #508]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e02e      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x98>
 80029fe:	4b7b      	ldr	r3, [pc, #492]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a7a      	ldr	r2, [pc, #488]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b78      	ldr	r3, [pc, #480]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a77      	ldr	r2, [pc, #476]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0xbc>
 8002a22:	4b72      	ldr	r3, [pc, #456]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a71      	ldr	r2, [pc, #452]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a6e      	ldr	r2, [pc, #440]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 8002a3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a6a      	ldr	r2, [pc, #424]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b68      	ldr	r3, [pc, #416]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a67      	ldr	r2, [pc, #412]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe ff66 	bl	800192c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe ff62 	bl	800192c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	@ 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e200      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	4b5d      	ldr	r3, [pc, #372]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xe4>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe ff52 	bl	800192c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe ff4e 	bl	800192c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	@ 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1ec      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	4b53      	ldr	r3, [pc, #332]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x10c>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d063      	beq.n	8002b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aba:	4b4c      	ldr	r3, [pc, #304]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ac6:	4b49      	ldr	r3, [pc, #292]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x18c>
 8002ad2:	4b46      	ldr	r3, [pc, #280]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b43      	ldr	r3, [pc, #268]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x176>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1c0      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4939      	ldr	r1, [pc, #228]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe ff07 	bl	800192c <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7fe ff03 	bl	800192c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1a1      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b2d      	ldr	r3, [pc, #180]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b2a      	ldr	r3, [pc, #168]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4927      	ldr	r1, [pc, #156]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b26      	ldr	r3, [pc, #152]	@ (8002bf0 <HAL_RCC_OscConfig+0x270>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fee6 	bl	800192c <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b64:	f7fe fee2 	bl	800192c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e180      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d03a      	beq.n	8002c04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d019      	beq.n	8002bca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <HAL_RCC_OscConfig+0x274>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fec6 	bl	800192c <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fec2 	bl	800192c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e160      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	f000 face 	bl	8003164 <RCC_Delay>
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd0:	f7fe feac 	bl	800192c <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd6:	e00f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7fe fea8 	bl	800192c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d908      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e146      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	42420000 	.word	0x42420000
 8002bf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	4b92      	ldr	r3, [pc, #584]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e9      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a6 	beq.w	8002d5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c16:	4b8b      	ldr	r3, [pc, #556]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10d      	bne.n	8002c3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	4b88      	ldr	r3, [pc, #544]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	4a87      	ldr	r2, [pc, #540]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	61d3      	str	r3, [r2, #28]
 8002c2e:	4b85      	ldr	r3, [pc, #532]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b82      	ldr	r3, [pc, #520]	@ (8002e48 <HAL_RCC_OscConfig+0x4c8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e48 <HAL_RCC_OscConfig+0x4c8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e48 <HAL_RCC_OscConfig+0x4c8>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7fe fe69 	bl	800192c <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fe fe65 	bl	800192c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b64      	cmp	r3, #100	@ 0x64
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e103      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b75      	ldr	r3, [pc, #468]	@ (8002e48 <HAL_RCC_OscConfig+0x4c8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x312>
 8002c84:	4b6f      	ldr	r3, [pc, #444]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a6e      	ldr	r2, [pc, #440]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	e02d      	b.n	8002cee <HAL_RCC_OscConfig+0x36e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x334>
 8002c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a69      	ldr	r2, [pc, #420]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6213      	str	r3, [r2, #32]
 8002ca6:	4b67      	ldr	r3, [pc, #412]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4a66      	ldr	r2, [pc, #408]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	6213      	str	r3, [r2, #32]
 8002cb2:	e01c      	b.n	8002cee <HAL_RCC_OscConfig+0x36e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x356>
 8002cbc:	4b61      	ldr	r3, [pc, #388]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a60      	ldr	r2, [pc, #384]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6213      	str	r3, [r2, #32]
 8002cd4:	e00b      	b.n	8002cee <HAL_RCC_OscConfig+0x36e>
 8002cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a5a      	ldr	r2, [pc, #360]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6213      	str	r3, [r2, #32]
 8002ce2:	4b58      	ldr	r3, [pc, #352]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a57      	ldr	r2, [pc, #348]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	f023 0304 	bic.w	r3, r3, #4
 8002cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d015      	beq.n	8002d22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf6:	f7fe fe19 	bl	800192c <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7fe fe15 	bl	800192c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e0b1      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	4b4b      	ldr	r3, [pc, #300]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ee      	beq.n	8002cfe <HAL_RCC_OscConfig+0x37e>
 8002d20:	e014      	b.n	8002d4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fe03 	bl	800192c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fdff 	bl	800192c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e09b      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d40:	4b40      	ldr	r3, [pc, #256]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ee      	bne.n	8002d2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d52:	4b3c      	ldr	r3, [pc, #240]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4a3b      	ldr	r2, [pc, #236]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8087 	beq.w	8002e76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d68:	4b36      	ldr	r3, [pc, #216]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 030c 	and.w	r3, r3, #12
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d061      	beq.n	8002e38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d146      	bne.n	8002e0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7c:	4b33      	ldr	r3, [pc, #204]	@ (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fe fdd3 	bl	800192c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe fdcf 	bl	800192c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e06d      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9c:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db0:	d108      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002db2:	4b24      	ldr	r3, [pc, #144]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4921      	ldr	r1, [pc, #132]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a19      	ldr	r1, [r3, #32]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	491b      	ldr	r1, [pc, #108]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fe fda3 	bl	800192c <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dea:	f7fe fd9f 	bl	800192c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e03d      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x46a>
 8002e08:	e035      	b.n	8002e76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fd8c 	bl	800192c <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe fd88 	bl	800192c <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e026      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x498>
 8002e36:	e01e      	b.n	8002e76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e019      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e50:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <HAL_RCC_OscConfig+0x500>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000

08002e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0d0      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b6a      	ldr	r3, [pc, #424]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d910      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b67      	ldr	r3, [pc, #412]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 0207 	bic.w	r2, r3, #7
 8002eae:	4965      	ldr	r1, [pc, #404]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b63      	ldr	r3, [pc, #396]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0b8      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d020      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee0:	4b59      	ldr	r3, [pc, #356]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a58      	ldr	r2, [pc, #352]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef8:	4b53      	ldr	r3, [pc, #332]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a52      	ldr	r2, [pc, #328]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b50      	ldr	r3, [pc, #320]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	494d      	ldr	r1, [pc, #308]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d040      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b47      	ldr	r3, [pc, #284]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d115      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e07f      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	4b41      	ldr	r3, [pc, #260]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e073      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f52:	4b3d      	ldr	r3, [pc, #244]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06b      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f62:	4b39      	ldr	r3, [pc, #228]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f023 0203 	bic.w	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4936      	ldr	r1, [pc, #216]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f74:	f7fe fcda 	bl	800192c <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7c:	f7fe fcd6 	bl	800192c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e053      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	4b2d      	ldr	r3, [pc, #180]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 020c 	and.w	r2, r3, #12
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1eb      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d210      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	4922      	ldr	r1, [pc, #136]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e032      	b.n	800303a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe0:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4916      	ldr	r1, [pc, #88]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ffe:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	490e      	ldr	r1, [pc, #56]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003012:	f000 f821 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8003016:	4602      	mov	r2, r0
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	490a      	ldr	r1, [pc, #40]	@ (800304c <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	5ccb      	ldrb	r3, [r1, r3]
 8003026:	fa22 f303 	lsr.w	r3, r2, r3
 800302a:	4a09      	ldr	r2, [pc, #36]	@ (8003050 <HAL_RCC_ClockConfig+0x1cc>)
 800302c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800302e:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_RCC_ClockConfig+0x1d0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe fc38 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40022000 	.word	0x40022000
 8003048:	40021000 	.word	0x40021000
 800304c:	080070bc 	.word	0x080070bc
 8003050:	20000004 	.word	0x20000004
 8003054:	20000008 	.word	0x20000008

08003058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003072:	4b1e      	ldr	r3, [pc, #120]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b04      	cmp	r3, #4
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x30>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d003      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x36>
 8003086:	e027      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800308a:	613b      	str	r3, [r7, #16]
      break;
 800308c:	e027      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	0c9b      	lsrs	r3, r3, #18
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	4a17      	ldr	r2, [pc, #92]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030a6:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x94>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	0c5b      	lsrs	r3, r3, #17
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	4a11      	ldr	r2, [pc, #68]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a0d      	ldr	r2, [pc, #52]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ba:	fb03 f202 	mul.w	r2, r3, r2
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e004      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a0c      	ldr	r2, [pc, #48]	@ (80030fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80030cc:	fb02 f303 	mul.w	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	613b      	str	r3, [r7, #16]
      break;
 80030d6:	e002      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80030da:	613b      	str	r3, [r7, #16]
      break;
 80030dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030de:	693b      	ldr	r3, [r7, #16]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	007a1200 	.word	0x007a1200
 80030f4:	080070d4 	.word	0x080070d4
 80030f8:	080070e4 	.word	0x080070e4
 80030fc:	003d0900 	.word	0x003d0900

08003100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003104:	4b02      	ldr	r3, [pc, #8]	@ (8003110 <HAL_RCC_GetHCLKFreq+0x10>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	20000004 	.word	0x20000004

08003114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003118:	f7ff fff2 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	@ (8003138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000
 8003138:	080070cc 	.word	0x080070cc

0800313c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003140:	f7ff ffde 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0adb      	lsrs	r3, r3, #11
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	@ (8003160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	080070cc 	.word	0x080070cc

08003164 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800316c:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <RCC_Delay+0x34>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <RCC_Delay+0x38>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0a5b      	lsrs	r3, r3, #9
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003180:	bf00      	nop
  }
  while (Delay --);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1e5a      	subs	r2, r3, #1
 8003186:	60fa      	str	r2, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f9      	bne.n	8003180 <RCC_Delay+0x1c>
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	20000004 	.word	0x20000004
 800319c:	10624dd3 	.word	0x10624dd3

080031a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d07d      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031bc:	2300      	movs	r3, #0
 80031be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d6:	61d3      	str	r3, [r2, #28]
 80031d8:	4b49      	ldr	r3, [pc, #292]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e4:	2301      	movs	r3, #1
 80031e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e8:	4b46      	ldr	r3, [pc, #280]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d118      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f4:	4b43      	ldr	r3, [pc, #268]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a42      	ldr	r2, [pc, #264]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003200:	f7fe fb94 	bl	800192c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003206:	e008      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003208:	f7fe fb90 	bl	800192c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	@ 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e06d      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b3a      	ldr	r3, [pc, #232]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003226:	4b36      	ldr	r3, [pc, #216]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800322e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d02e      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	429a      	cmp	r2, r3
 8003242:	d027      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003244:	4b2e      	ldr	r3, [pc, #184]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800324c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324e:	4b2e      	ldr	r3, [pc, #184]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003254:	4b2c      	ldr	r3, [pc, #176]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800325a:	4a29      	ldr	r2, [pc, #164]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d014      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fe fb5f 	bl	800192c <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003270:	e00a      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fe fb5b 	bl	800192c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e036      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ee      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003294:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4917      	ldr	r1, [pc, #92]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ac:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	4a13      	ldr	r2, [pc, #76]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	490b      	ldr	r1, [pc, #44]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032e2:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	4904      	ldr	r1, [pc, #16]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	40007000 	.word	0x40007000
 8003308:	42420440 	.word	0x42420440

0800330c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	2300      	movs	r3, #0
 8003326:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b10      	cmp	r3, #16
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b10      	cmp	r3, #16
 8003332:	f200 808a 	bhi.w	800344a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d045      	beq.n	80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d075      	beq.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003342:	e082      	b.n	800344a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003344:	4b46      	ldr	r3, [pc, #280]	@ (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800334a:	4b45      	ldr	r3, [pc, #276]	@ (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d07b      	beq.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	0c9b      	lsrs	r3, r3, #18
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	4a41      	ldr	r2, [pc, #260]	@ (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003360:	5cd3      	ldrb	r3, [r2, r3]
 8003362:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d015      	beq.n	800339a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800336e:	4b3c      	ldr	r3, [pc, #240]	@ (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0c5b      	lsrs	r3, r3, #17
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	4a3b      	ldr	r2, [pc, #236]	@ (8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800337a:	5cd3      	ldrb	r3, [r2, r3]
 800337c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003388:	4a38      	ldr	r2, [pc, #224]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e004      	b.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4a34      	ldr	r2, [pc, #208]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80033a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b0:	d102      	bne.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	61bb      	str	r3, [r7, #24]
      break;
 80033b6:	e04a      	b.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	61bb      	str	r3, [r7, #24]
      break;
 80033c6:	e042      	b.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80033c8:	4b25      	ldr	r3, [pc, #148]	@ (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d8:	d108      	bne.n	80033ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80033e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	e01f      	b.n	800342c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f6:	d109      	bne.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003404:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	e00f      	b.n	800342c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003416:	d11c      	bne.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003418:	4b11      	ldr	r3, [pc, #68]	@ (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d016      	beq.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003424:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003428:	61bb      	str	r3, [r7, #24]
      break;
 800342a:	e012      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800342c:	e011      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800342e:	f7ff fe85 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 8003432:	4602      	mov	r2, r0
 8003434:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	0b9b      	lsrs	r3, r3, #14
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	3301      	adds	r3, #1
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	61bb      	str	r3, [r7, #24]
      break;
 8003448:	e004      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800344a:	bf00      	nop
 800344c:	e002      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003452:	bf00      	nop
    }
  }
  return (frequency);
 8003454:	69bb      	ldr	r3, [r7, #24]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	080070e8 	.word	0x080070e8
 8003468:	080070f8 	.word	0x080070f8
 800346c:	007a1200 	.word	0x007a1200
 8003470:	003d0900 	.word	0x003d0900
 8003474:	aaaaaaab 	.word	0xaaaaaaab

08003478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e042      	b.n	8003510 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe f82a 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	@ 0x24
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fdb7 	bl	8004030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	@ 0x28
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b20      	cmp	r3, #32
 8003536:	d175      	bne.n	8003624 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_UART_Transmit+0x2c>
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e06e      	b.n	8003626 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2221      	movs	r2, #33	@ 0x21
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003556:	f7fe f9e9 	bl	800192c <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003570:	d108      	bne.n	8003584 <HAL_UART_Transmit+0x6c>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	e003      	b.n	800358c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800358c:	e02e      	b.n	80035ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	2180      	movs	r1, #128	@ 0x80
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fb1c 	bl	8003bd6 <UART_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e03a      	b.n	8003626 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	3302      	adds	r3, #2
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	e007      	b.n	80035de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3301      	adds	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1cb      	bne.n	800358e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2140      	movs	r1, #64	@ 0x40
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fae8 	bl	8003bd6 <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e006      	b.n	8003626 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	4613      	mov	r3, r2
 800363a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b20      	cmp	r3, #32
 8003646:	d112      	bne.n	800366e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_UART_Receive_IT+0x26>
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e00b      	b.n	8003670 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	461a      	mov	r2, r3
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fb0f 	bl	8003c88 <UART_Start_Receive_IT>
 800366a:	4603      	mov	r3, r0
 800366c:	e000      	b.n	8003670 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b0ba      	sub	sp, #232	@ 0xe8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_UART_IRQHandler+0x66>
 80036ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fbec 	bl	8003eb4 <UART_Receive_IT>
      return;
 80036dc:	e25b      	b.n	8003b96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80de 	beq.w	80038a4 <HAL_UART_IRQHandler+0x22c>
 80036e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80d1 	beq.w	80038a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_UART_IRQHandler+0xae>
 800370e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00b      	beq.n	800374a <HAL_UART_IRQHandler+0xd2>
 8003732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003742:	f043 0202 	orr.w	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800374a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_UART_IRQHandler+0xf6>
 8003756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	f043 0204 	orr.w	r2, r3, #4
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d011      	beq.n	800379e <HAL_UART_IRQHandler+0x126>
 800377a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d105      	bne.n	8003792 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	f043 0208 	orr.w	r2, r3, #8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 81f2 	beq.w	8003b8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_UART_IRQHandler+0x14e>
 80037b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fb77 	bl	8003eb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_UART_IRQHandler+0x17a>
 80037ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04f      	beq.n	8003892 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa81 	bl	8003cfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d041      	beq.n	800388a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3314      	adds	r3, #20
 800380c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800381c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003832:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800383e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800384a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1d9      	bne.n	8003806 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d013      	beq.n	8003882 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a58 <HAL_UART_IRQHandler+0x3e0>)
 8003860:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fe2e 	bl	80024c8 <HAL_DMA_Abort_IT>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d016      	beq.n	80038a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800387c:	4610      	mov	r0, r2
 800387e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003880:	e00e      	b.n	80038a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f993 	bl	8003bae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	e00a      	b.n	80038a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f98f 	bl	8003bae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	e006      	b.n	80038a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f98b 	bl	8003bae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800389e:	e175      	b.n	8003b8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	bf00      	nop
    return;
 80038a2:	e173      	b.n	8003b8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	f040 814f 	bne.w	8003b4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8148 	beq.w	8003b4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8141 	beq.w	8003b4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80b6 	beq.w	8003a5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8145 	beq.w	8003b90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800390a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800390e:	429a      	cmp	r2, r3
 8003910:	f080 813e 	bcs.w	8003b90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800391a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b20      	cmp	r3, #32
 8003924:	f000 8088 	beq.w	8003a38 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	330c      	adds	r3, #12
 800392e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800393e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003942:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003946:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330c      	adds	r3, #12
 8003950:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003954:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003958:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003960:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800396c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1d9      	bne.n	8003928 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3314      	adds	r3, #20
 800397a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003984:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3314      	adds	r3, #20
 8003994:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003998:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800399c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e1      	bne.n	8003974 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3314      	adds	r3, #20
 80039b6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3314      	adds	r3, #20
 80039d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e3      	bne.n	80039b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a08:	f023 0310 	bic.w	r3, r3, #16
 8003a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a1a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a1c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e3      	bne.n	80039f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fd0d 	bl	8002452 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f8b6 	bl	8003bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a54:	e09c      	b.n	8003b90 <HAL_UART_IRQHandler+0x518>
 8003a56:	bf00      	nop
 8003a58:	08003dbf 	.word	0x08003dbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 808e 	beq.w	8003b94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8089 	beq.w	8003b94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003aa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003aa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e3      	bne.n	8003a82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3314      	adds	r3, #20
 8003ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ade:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e3      	bne.n	8003aba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0310 	bic.w	r3, r3, #16
 8003b16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b24:	61fa      	str	r2, [r7, #28]
 8003b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	69b9      	ldr	r1, [r7, #24]
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	617b      	str	r3, [r7, #20]
   return(result);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e3      	bne.n	8003b00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f83b 	bl	8003bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b4a:	e023      	b.n	8003b94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_UART_IRQHandler+0x4f4>
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f93e 	bl	8003de6 <UART_Transmit_IT>
    return;
 8003b6a:	e014      	b.n	8003b96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <HAL_UART_IRQHandler+0x51e>
 8003b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f97d 	bl	8003e84 <UART_EndTransmit_IT>
    return;
 8003b8a:	e004      	b.n	8003b96 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b8c:	bf00      	nop
 8003b8e:	e002      	b.n	8003b96 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b90:	bf00      	nop
 8003b92:	e000      	b.n	8003b96 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b94:	bf00      	nop
  }
}
 8003b96:	37e8      	adds	r7, #232	@ 0xe8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr

08003bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be6:	e03b      	b.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d037      	beq.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf0:	f7fd fe9c 	bl	800192c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	6a3a      	ldr	r2, [r7, #32]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d302      	bcc.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e03a      	b.n	8003c80 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d023      	beq.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b80      	cmp	r3, #128	@ 0x80
 8003c1c:	d020      	beq.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b40      	cmp	r3, #64	@ 0x40
 8003c22:	d01d      	beq.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d116      	bne.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f856 	bl	8003cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2208      	movs	r2, #8
 8003c52:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e00f      	b.n	8003c80 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d0b4      	beq.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	88fa      	ldrh	r2, [r7, #6]
 8003ca6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2222      	movs	r2, #34	@ 0x22
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ccc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0220 	orr.w	r2, r2, #32
 8003cec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b095      	sub	sp, #84	@ 0x54
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	330c      	adds	r3, #12
 8003d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d22:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e5      	bne.n	8003d02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e5      	bne.n	8003d36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d119      	bne.n	8003da6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f023 0310 	bic.w	r3, r3, #16
 8003d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d92:	61ba      	str	r2, [r7, #24]
 8003d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6979      	ldr	r1, [r7, #20]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e5      	bne.n	8003d72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003db4:	bf00      	nop
 8003db6:	3754      	adds	r7, #84	@ 0x54
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff fee8 	bl	8003bae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b21      	cmp	r3, #33	@ 0x21
 8003df8:	d13e      	bne.n	8003e78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e02:	d114      	bne.n	8003e2e <UART_Transmit_IT+0x48>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d110      	bne.n	8003e2e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	621a      	str	r2, [r3, #32]
 8003e2c:	e008      	b.n	8003e40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	1c59      	adds	r1, r3, #1
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6211      	str	r1, [r2, #32]
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10f      	bne.n	8003e74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff fe79 	bl	8003b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08c      	sub	sp, #48	@ 0x30
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b22      	cmp	r3, #34	@ 0x22
 8003ec6:	f040 80ae 	bne.w	8004026 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed2:	d117      	bne.n	8003f04 <UART_Receive_IT+0x50>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d113      	bne.n	8003f04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	1c9a      	adds	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f02:	e026      	b.n	8003f52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f16:	d007      	beq.n	8003f28 <UART_Receive_IT+0x74>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <UART_Receive_IT+0x82>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	e008      	b.n	8003f48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d15d      	bne.n	8004022 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0220 	bic.w	r2, r2, #32
 8003f74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d135      	bne.n	8004018 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f023 0310 	bic.w	r3, r3, #16
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd2:	623a      	str	r2, [r7, #32]
 8003fd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	69f9      	ldr	r1, [r7, #28]
 8003fd8:	6a3a      	ldr	r2, [r7, #32]
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e5      	bne.n	8003fb2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d10a      	bne.n	800400a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fdd5 	bl	8003bc0 <HAL_UARTEx_RxEventCallback>
 8004016:	e002      	b.n	800401e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7fc fe6b 	bl	8000cf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e002      	b.n	8004028 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3730      	adds	r7, #48	@ 0x30
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800406a:	f023 030c 	bic.w	r3, r3, #12
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	430b      	orrs	r3, r1
 8004076:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2c      	ldr	r2, [pc, #176]	@ (8004144 <UART_SetConfig+0x114>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7ff f850 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	e002      	b.n	80040a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040a0:	f7ff f838 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 80040a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009a      	lsls	r2, r3, #2
 80040b0:	441a      	add	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	4a22      	ldr	r2, [pc, #136]	@ (8004148 <UART_SetConfig+0x118>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	0119      	lsls	r1, r3, #4
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009a      	lsls	r2, r3, #2
 80040d0:	441a      	add	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004148 <UART_SetConfig+0x118>)
 80040de:	fba3 0302 	umull	r0, r3, r3, r2
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2064      	movs	r0, #100	@ 0x64
 80040e6:	fb00 f303 	mul.w	r3, r0, r3
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	3332      	adds	r3, #50	@ 0x32
 80040f0:	4a15      	ldr	r2, [pc, #84]	@ (8004148 <UART_SetConfig+0x118>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040fc:	4419      	add	r1, r3
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	fbb2 f2f3 	udiv	r2, r2, r3
 8004114:	4b0c      	ldr	r3, [pc, #48]	@ (8004148 <UART_SetConfig+0x118>)
 8004116:	fba3 0302 	umull	r0, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2064      	movs	r0, #100	@ 0x64
 800411e:	fb00 f303 	mul.w	r3, r0, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	3332      	adds	r3, #50	@ 0x32
 8004128:	4a07      	ldr	r2, [pc, #28]	@ (8004148 <UART_SetConfig+0x118>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	f003 020f 	and.w	r2, r3, #15
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	440a      	add	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40013800 	.word	0x40013800
 8004148:	51eb851f 	.word	0x51eb851f

0800414c <atoi>:
 800414c:	220a      	movs	r2, #10
 800414e:	2100      	movs	r1, #0
 8004150:	f000 b87a 	b.w	8004248 <strtol>

08004154 <_strtol_l.isra.0>:
 8004154:	2b24      	cmp	r3, #36	@ 0x24
 8004156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800415a:	4686      	mov	lr, r0
 800415c:	4690      	mov	r8, r2
 800415e:	d801      	bhi.n	8004164 <_strtol_l.isra.0+0x10>
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <_strtol_l.isra.0+0x1e>
 8004164:	f000 fe74 	bl	8004e50 <__errno>
 8004168:	2316      	movs	r3, #22
 800416a:	6003      	str	r3, [r0, #0]
 800416c:	2000      	movs	r0, #0
 800416e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004172:	460d      	mov	r5, r1
 8004174:	4833      	ldr	r0, [pc, #204]	@ (8004244 <_strtol_l.isra.0+0xf0>)
 8004176:	462a      	mov	r2, r5
 8004178:	f815 4b01 	ldrb.w	r4, [r5], #1
 800417c:	5d06      	ldrb	r6, [r0, r4]
 800417e:	f016 0608 	ands.w	r6, r6, #8
 8004182:	d1f8      	bne.n	8004176 <_strtol_l.isra.0+0x22>
 8004184:	2c2d      	cmp	r4, #45	@ 0x2d
 8004186:	d110      	bne.n	80041aa <_strtol_l.isra.0+0x56>
 8004188:	2601      	movs	r6, #1
 800418a:	782c      	ldrb	r4, [r5, #0]
 800418c:	1c95      	adds	r5, r2, #2
 800418e:	f033 0210 	bics.w	r2, r3, #16
 8004192:	d115      	bne.n	80041c0 <_strtol_l.isra.0+0x6c>
 8004194:	2c30      	cmp	r4, #48	@ 0x30
 8004196:	d10d      	bne.n	80041b4 <_strtol_l.isra.0+0x60>
 8004198:	782a      	ldrb	r2, [r5, #0]
 800419a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800419e:	2a58      	cmp	r2, #88	@ 0x58
 80041a0:	d108      	bne.n	80041b4 <_strtol_l.isra.0+0x60>
 80041a2:	786c      	ldrb	r4, [r5, #1]
 80041a4:	3502      	adds	r5, #2
 80041a6:	2310      	movs	r3, #16
 80041a8:	e00a      	b.n	80041c0 <_strtol_l.isra.0+0x6c>
 80041aa:	2c2b      	cmp	r4, #43	@ 0x2b
 80041ac:	bf04      	itt	eq
 80041ae:	782c      	ldrbeq	r4, [r5, #0]
 80041b0:	1c95      	addeq	r5, r2, #2
 80041b2:	e7ec      	b.n	800418e <_strtol_l.isra.0+0x3a>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f6      	bne.n	80041a6 <_strtol_l.isra.0+0x52>
 80041b8:	2c30      	cmp	r4, #48	@ 0x30
 80041ba:	bf14      	ite	ne
 80041bc:	230a      	movne	r3, #10
 80041be:	2308      	moveq	r3, #8
 80041c0:	2200      	movs	r2, #0
 80041c2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80041c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80041ca:	fbbc f9f3 	udiv	r9, ip, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80041d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80041d8:	2f09      	cmp	r7, #9
 80041da:	d80f      	bhi.n	80041fc <_strtol_l.isra.0+0xa8>
 80041dc:	463c      	mov	r4, r7
 80041de:	42a3      	cmp	r3, r4
 80041e0:	dd1b      	ble.n	800421a <_strtol_l.isra.0+0xc6>
 80041e2:	1c57      	adds	r7, r2, #1
 80041e4:	d007      	beq.n	80041f6 <_strtol_l.isra.0+0xa2>
 80041e6:	4581      	cmp	r9, r0
 80041e8:	d314      	bcc.n	8004214 <_strtol_l.isra.0+0xc0>
 80041ea:	d101      	bne.n	80041f0 <_strtol_l.isra.0+0x9c>
 80041ec:	45a2      	cmp	sl, r4
 80041ee:	db11      	blt.n	8004214 <_strtol_l.isra.0+0xc0>
 80041f0:	2201      	movs	r2, #1
 80041f2:	fb00 4003 	mla	r0, r0, r3, r4
 80041f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041fa:	e7eb      	b.n	80041d4 <_strtol_l.isra.0+0x80>
 80041fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004200:	2f19      	cmp	r7, #25
 8004202:	d801      	bhi.n	8004208 <_strtol_l.isra.0+0xb4>
 8004204:	3c37      	subs	r4, #55	@ 0x37
 8004206:	e7ea      	b.n	80041de <_strtol_l.isra.0+0x8a>
 8004208:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800420c:	2f19      	cmp	r7, #25
 800420e:	d804      	bhi.n	800421a <_strtol_l.isra.0+0xc6>
 8004210:	3c57      	subs	r4, #87	@ 0x57
 8004212:	e7e4      	b.n	80041de <_strtol_l.isra.0+0x8a>
 8004214:	f04f 32ff 	mov.w	r2, #4294967295
 8004218:	e7ed      	b.n	80041f6 <_strtol_l.isra.0+0xa2>
 800421a:	1c53      	adds	r3, r2, #1
 800421c:	d108      	bne.n	8004230 <_strtol_l.isra.0+0xdc>
 800421e:	2322      	movs	r3, #34	@ 0x22
 8004220:	4660      	mov	r0, ip
 8004222:	f8ce 3000 	str.w	r3, [lr]
 8004226:	f1b8 0f00 	cmp.w	r8, #0
 800422a:	d0a0      	beq.n	800416e <_strtol_l.isra.0+0x1a>
 800422c:	1e69      	subs	r1, r5, #1
 800422e:	e006      	b.n	800423e <_strtol_l.isra.0+0xea>
 8004230:	b106      	cbz	r6, 8004234 <_strtol_l.isra.0+0xe0>
 8004232:	4240      	negs	r0, r0
 8004234:	f1b8 0f00 	cmp.w	r8, #0
 8004238:	d099      	beq.n	800416e <_strtol_l.isra.0+0x1a>
 800423a:	2a00      	cmp	r2, #0
 800423c:	d1f6      	bne.n	800422c <_strtol_l.isra.0+0xd8>
 800423e:	f8c8 1000 	str.w	r1, [r8]
 8004242:	e794      	b.n	800416e <_strtol_l.isra.0+0x1a>
 8004244:	080070fb 	.word	0x080070fb

08004248 <strtol>:
 8004248:	4613      	mov	r3, r2
 800424a:	460a      	mov	r2, r1
 800424c:	4601      	mov	r1, r0
 800424e:	4802      	ldr	r0, [pc, #8]	@ (8004258 <strtol+0x10>)
 8004250:	6800      	ldr	r0, [r0, #0]
 8004252:	f7ff bf7f 	b.w	8004154 <_strtol_l.isra.0>
 8004256:	bf00      	nop
 8004258:	2000001c 	.word	0x2000001c

0800425c <__cvt>:
 800425c:	2b00      	cmp	r3, #0
 800425e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004262:	461d      	mov	r5, r3
 8004264:	bfbb      	ittet	lt
 8004266:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800426a:	461d      	movlt	r5, r3
 800426c:	2300      	movge	r3, #0
 800426e:	232d      	movlt	r3, #45	@ 0x2d
 8004270:	b088      	sub	sp, #32
 8004272:	4614      	mov	r4, r2
 8004274:	bfb8      	it	lt
 8004276:	4614      	movlt	r4, r2
 8004278:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800427a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800427c:	7013      	strb	r3, [r2, #0]
 800427e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004280:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004284:	f023 0820 	bic.w	r8, r3, #32
 8004288:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800428c:	d005      	beq.n	800429a <__cvt+0x3e>
 800428e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004292:	d100      	bne.n	8004296 <__cvt+0x3a>
 8004294:	3601      	adds	r6, #1
 8004296:	2302      	movs	r3, #2
 8004298:	e000      	b.n	800429c <__cvt+0x40>
 800429a:	2303      	movs	r3, #3
 800429c:	aa07      	add	r2, sp, #28
 800429e:	9204      	str	r2, [sp, #16]
 80042a0:	aa06      	add	r2, sp, #24
 80042a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80042a6:	e9cd 3600 	strd	r3, r6, [sp]
 80042aa:	4622      	mov	r2, r4
 80042ac:	462b      	mov	r3, r5
 80042ae:	f000 fe93 	bl	8004fd8 <_dtoa_r>
 80042b2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80042b6:	4607      	mov	r7, r0
 80042b8:	d119      	bne.n	80042ee <__cvt+0x92>
 80042ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80042bc:	07db      	lsls	r3, r3, #31
 80042be:	d50e      	bpl.n	80042de <__cvt+0x82>
 80042c0:	eb00 0906 	add.w	r9, r0, r6
 80042c4:	2200      	movs	r2, #0
 80042c6:	2300      	movs	r3, #0
 80042c8:	4620      	mov	r0, r4
 80042ca:	4629      	mov	r1, r5
 80042cc:	f7fc fb76 	bl	80009bc <__aeabi_dcmpeq>
 80042d0:	b108      	cbz	r0, 80042d6 <__cvt+0x7a>
 80042d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80042d6:	2230      	movs	r2, #48	@ 0x30
 80042d8:	9b07      	ldr	r3, [sp, #28]
 80042da:	454b      	cmp	r3, r9
 80042dc:	d31e      	bcc.n	800431c <__cvt+0xc0>
 80042de:	4638      	mov	r0, r7
 80042e0:	9b07      	ldr	r3, [sp, #28]
 80042e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80042e4:	1bdb      	subs	r3, r3, r7
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	b008      	add	sp, #32
 80042ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80042f2:	eb00 0906 	add.w	r9, r0, r6
 80042f6:	d1e5      	bne.n	80042c4 <__cvt+0x68>
 80042f8:	7803      	ldrb	r3, [r0, #0]
 80042fa:	2b30      	cmp	r3, #48	@ 0x30
 80042fc:	d10a      	bne.n	8004314 <__cvt+0xb8>
 80042fe:	2200      	movs	r2, #0
 8004300:	2300      	movs	r3, #0
 8004302:	4620      	mov	r0, r4
 8004304:	4629      	mov	r1, r5
 8004306:	f7fc fb59 	bl	80009bc <__aeabi_dcmpeq>
 800430a:	b918      	cbnz	r0, 8004314 <__cvt+0xb8>
 800430c:	f1c6 0601 	rsb	r6, r6, #1
 8004310:	f8ca 6000 	str.w	r6, [sl]
 8004314:	f8da 3000 	ldr.w	r3, [sl]
 8004318:	4499      	add	r9, r3
 800431a:	e7d3      	b.n	80042c4 <__cvt+0x68>
 800431c:	1c59      	adds	r1, r3, #1
 800431e:	9107      	str	r1, [sp, #28]
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	e7d9      	b.n	80042d8 <__cvt+0x7c>

08004324 <__exponent>:
 8004324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004326:	2900      	cmp	r1, #0
 8004328:	bfb6      	itet	lt
 800432a:	232d      	movlt	r3, #45	@ 0x2d
 800432c:	232b      	movge	r3, #43	@ 0x2b
 800432e:	4249      	neglt	r1, r1
 8004330:	2909      	cmp	r1, #9
 8004332:	7002      	strb	r2, [r0, #0]
 8004334:	7043      	strb	r3, [r0, #1]
 8004336:	dd29      	ble.n	800438c <__exponent+0x68>
 8004338:	f10d 0307 	add.w	r3, sp, #7
 800433c:	461d      	mov	r5, r3
 800433e:	270a      	movs	r7, #10
 8004340:	fbb1 f6f7 	udiv	r6, r1, r7
 8004344:	461a      	mov	r2, r3
 8004346:	fb07 1416 	mls	r4, r7, r6, r1
 800434a:	3430      	adds	r4, #48	@ 0x30
 800434c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004350:	460c      	mov	r4, r1
 8004352:	2c63      	cmp	r4, #99	@ 0x63
 8004354:	4631      	mov	r1, r6
 8004356:	f103 33ff 	add.w	r3, r3, #4294967295
 800435a:	dcf1      	bgt.n	8004340 <__exponent+0x1c>
 800435c:	3130      	adds	r1, #48	@ 0x30
 800435e:	1e94      	subs	r4, r2, #2
 8004360:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004364:	4623      	mov	r3, r4
 8004366:	1c41      	adds	r1, r0, #1
 8004368:	42ab      	cmp	r3, r5
 800436a:	d30a      	bcc.n	8004382 <__exponent+0x5e>
 800436c:	f10d 0309 	add.w	r3, sp, #9
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	42ac      	cmp	r4, r5
 8004374:	bf88      	it	hi
 8004376:	2300      	movhi	r3, #0
 8004378:	3302      	adds	r3, #2
 800437a:	4403      	add	r3, r0
 800437c:	1a18      	subs	r0, r3, r0
 800437e:	b003      	add	sp, #12
 8004380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004382:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004386:	f801 6f01 	strb.w	r6, [r1, #1]!
 800438a:	e7ed      	b.n	8004368 <__exponent+0x44>
 800438c:	2330      	movs	r3, #48	@ 0x30
 800438e:	3130      	adds	r1, #48	@ 0x30
 8004390:	7083      	strb	r3, [r0, #2]
 8004392:	70c1      	strb	r1, [r0, #3]
 8004394:	1d03      	adds	r3, r0, #4
 8004396:	e7f1      	b.n	800437c <__exponent+0x58>

08004398 <_printf_float>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	b091      	sub	sp, #68	@ 0x44
 800439e:	460c      	mov	r4, r1
 80043a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80043a4:	4616      	mov	r6, r2
 80043a6:	461f      	mov	r7, r3
 80043a8:	4605      	mov	r5, r0
 80043aa:	f000 fd07 	bl	8004dbc <_localeconv_r>
 80043ae:	6803      	ldr	r3, [r0, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	9308      	str	r3, [sp, #32]
 80043b4:	f7fb fed6 	bl	8000164 <strlen>
 80043b8:	2300      	movs	r3, #0
 80043ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80043bc:	f8d8 3000 	ldr.w	r3, [r8]
 80043c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80043c2:	3307      	adds	r3, #7
 80043c4:	f023 0307 	bic.w	r3, r3, #7
 80043c8:	f103 0208 	add.w	r2, r3, #8
 80043cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80043d0:	f8d4 b000 	ldr.w	fp, [r4]
 80043d4:	f8c8 2000 	str.w	r2, [r8]
 80043d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80043e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043e2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80043ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80043f2:	4b9c      	ldr	r3, [pc, #624]	@ (8004664 <_printf_float+0x2cc>)
 80043f4:	f7fc fb14 	bl	8000a20 <__aeabi_dcmpun>
 80043f8:	bb70      	cbnz	r0, 8004458 <_printf_float+0xc0>
 80043fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80043fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004402:	4b98      	ldr	r3, [pc, #608]	@ (8004664 <_printf_float+0x2cc>)
 8004404:	f7fc faee 	bl	80009e4 <__aeabi_dcmple>
 8004408:	bb30      	cbnz	r0, 8004458 <_printf_float+0xc0>
 800440a:	2200      	movs	r2, #0
 800440c:	2300      	movs	r3, #0
 800440e:	4640      	mov	r0, r8
 8004410:	4649      	mov	r1, r9
 8004412:	f7fc fadd 	bl	80009d0 <__aeabi_dcmplt>
 8004416:	b110      	cbz	r0, 800441e <_printf_float+0x86>
 8004418:	232d      	movs	r3, #45	@ 0x2d
 800441a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800441e:	4a92      	ldr	r2, [pc, #584]	@ (8004668 <_printf_float+0x2d0>)
 8004420:	4b92      	ldr	r3, [pc, #584]	@ (800466c <_printf_float+0x2d4>)
 8004422:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004426:	bf8c      	ite	hi
 8004428:	4690      	movhi	r8, r2
 800442a:	4698      	movls	r8, r3
 800442c:	2303      	movs	r3, #3
 800442e:	f04f 0900 	mov.w	r9, #0
 8004432:	6123      	str	r3, [r4, #16]
 8004434:	f02b 0304 	bic.w	r3, fp, #4
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	4633      	mov	r3, r6
 800443c:	4621      	mov	r1, r4
 800443e:	4628      	mov	r0, r5
 8004440:	9700      	str	r7, [sp, #0]
 8004442:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004444:	f000 f9d4 	bl	80047f0 <_printf_common>
 8004448:	3001      	adds	r0, #1
 800444a:	f040 8090 	bne.w	800456e <_printf_float+0x1d6>
 800444e:	f04f 30ff 	mov.w	r0, #4294967295
 8004452:	b011      	add	sp, #68	@ 0x44
 8004454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004458:	4642      	mov	r2, r8
 800445a:	464b      	mov	r3, r9
 800445c:	4640      	mov	r0, r8
 800445e:	4649      	mov	r1, r9
 8004460:	f7fc fade 	bl	8000a20 <__aeabi_dcmpun>
 8004464:	b148      	cbz	r0, 800447a <_printf_float+0xe2>
 8004466:	464b      	mov	r3, r9
 8004468:	2b00      	cmp	r3, #0
 800446a:	bfb8      	it	lt
 800446c:	232d      	movlt	r3, #45	@ 0x2d
 800446e:	4a80      	ldr	r2, [pc, #512]	@ (8004670 <_printf_float+0x2d8>)
 8004470:	bfb8      	it	lt
 8004472:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004476:	4b7f      	ldr	r3, [pc, #508]	@ (8004674 <_printf_float+0x2dc>)
 8004478:	e7d3      	b.n	8004422 <_printf_float+0x8a>
 800447a:	6863      	ldr	r3, [r4, #4]
 800447c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	d13f      	bne.n	8004504 <_printf_float+0x16c>
 8004484:	2306      	movs	r3, #6
 8004486:	6063      	str	r3, [r4, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	9206      	str	r2, [sp, #24]
 8004492:	aa0e      	add	r2, sp, #56	@ 0x38
 8004494:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004498:	aa0d      	add	r2, sp, #52	@ 0x34
 800449a:	9203      	str	r2, [sp, #12]
 800449c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80044a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80044a4:	6863      	ldr	r3, [r4, #4]
 80044a6:	4642      	mov	r2, r8
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4628      	mov	r0, r5
 80044ac:	464b      	mov	r3, r9
 80044ae:	910a      	str	r1, [sp, #40]	@ 0x28
 80044b0:	f7ff fed4 	bl	800425c <__cvt>
 80044b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80044b6:	4680      	mov	r8, r0
 80044b8:	2947      	cmp	r1, #71	@ 0x47
 80044ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80044bc:	d128      	bne.n	8004510 <_printf_float+0x178>
 80044be:	1cc8      	adds	r0, r1, #3
 80044c0:	db02      	blt.n	80044c8 <_printf_float+0x130>
 80044c2:	6863      	ldr	r3, [r4, #4]
 80044c4:	4299      	cmp	r1, r3
 80044c6:	dd40      	ble.n	800454a <_printf_float+0x1b2>
 80044c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80044cc:	fa5f fa8a 	uxtb.w	sl, sl
 80044d0:	4652      	mov	r2, sl
 80044d2:	3901      	subs	r1, #1
 80044d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80044d8:	910d      	str	r1, [sp, #52]	@ 0x34
 80044da:	f7ff ff23 	bl	8004324 <__exponent>
 80044de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80044e0:	4681      	mov	r9, r0
 80044e2:	1813      	adds	r3, r2, r0
 80044e4:	2a01      	cmp	r2, #1
 80044e6:	6123      	str	r3, [r4, #16]
 80044e8:	dc02      	bgt.n	80044f0 <_printf_float+0x158>
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	07d2      	lsls	r2, r2, #31
 80044ee:	d501      	bpl.n	80044f4 <_printf_float+0x15c>
 80044f0:	3301      	adds	r3, #1
 80044f2:	6123      	str	r3, [r4, #16]
 80044f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d09e      	beq.n	800443a <_printf_float+0xa2>
 80044fc:	232d      	movs	r3, #45	@ 0x2d
 80044fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004502:	e79a      	b.n	800443a <_printf_float+0xa2>
 8004504:	2947      	cmp	r1, #71	@ 0x47
 8004506:	d1bf      	bne.n	8004488 <_printf_float+0xf0>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1bd      	bne.n	8004488 <_printf_float+0xf0>
 800450c:	2301      	movs	r3, #1
 800450e:	e7ba      	b.n	8004486 <_printf_float+0xee>
 8004510:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004514:	d9dc      	bls.n	80044d0 <_printf_float+0x138>
 8004516:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800451a:	d118      	bne.n	800454e <_printf_float+0x1b6>
 800451c:	2900      	cmp	r1, #0
 800451e:	6863      	ldr	r3, [r4, #4]
 8004520:	dd0b      	ble.n	800453a <_printf_float+0x1a2>
 8004522:	6121      	str	r1, [r4, #16]
 8004524:	b913      	cbnz	r3, 800452c <_printf_float+0x194>
 8004526:	6822      	ldr	r2, [r4, #0]
 8004528:	07d0      	lsls	r0, r2, #31
 800452a:	d502      	bpl.n	8004532 <_printf_float+0x19a>
 800452c:	3301      	adds	r3, #1
 800452e:	440b      	add	r3, r1
 8004530:	6123      	str	r3, [r4, #16]
 8004532:	f04f 0900 	mov.w	r9, #0
 8004536:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004538:	e7dc      	b.n	80044f4 <_printf_float+0x15c>
 800453a:	b913      	cbnz	r3, 8004542 <_printf_float+0x1aa>
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	07d2      	lsls	r2, r2, #31
 8004540:	d501      	bpl.n	8004546 <_printf_float+0x1ae>
 8004542:	3302      	adds	r3, #2
 8004544:	e7f4      	b.n	8004530 <_printf_float+0x198>
 8004546:	2301      	movs	r3, #1
 8004548:	e7f2      	b.n	8004530 <_printf_float+0x198>
 800454a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800454e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004550:	4299      	cmp	r1, r3
 8004552:	db05      	blt.n	8004560 <_printf_float+0x1c8>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	6121      	str	r1, [r4, #16]
 8004558:	07d8      	lsls	r0, r3, #31
 800455a:	d5ea      	bpl.n	8004532 <_printf_float+0x19a>
 800455c:	1c4b      	adds	r3, r1, #1
 800455e:	e7e7      	b.n	8004530 <_printf_float+0x198>
 8004560:	2900      	cmp	r1, #0
 8004562:	bfcc      	ite	gt
 8004564:	2201      	movgt	r2, #1
 8004566:	f1c1 0202 	rsble	r2, r1, #2
 800456a:	4413      	add	r3, r2
 800456c:	e7e0      	b.n	8004530 <_printf_float+0x198>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	055a      	lsls	r2, r3, #21
 8004572:	d407      	bmi.n	8004584 <_printf_float+0x1ec>
 8004574:	6923      	ldr	r3, [r4, #16]
 8004576:	4642      	mov	r2, r8
 8004578:	4631      	mov	r1, r6
 800457a:	4628      	mov	r0, r5
 800457c:	47b8      	blx	r7
 800457e:	3001      	adds	r0, #1
 8004580:	d12b      	bne.n	80045da <_printf_float+0x242>
 8004582:	e764      	b.n	800444e <_printf_float+0xb6>
 8004584:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004588:	f240 80dc 	bls.w	8004744 <_printf_float+0x3ac>
 800458c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004590:	2200      	movs	r2, #0
 8004592:	2300      	movs	r3, #0
 8004594:	f7fc fa12 	bl	80009bc <__aeabi_dcmpeq>
 8004598:	2800      	cmp	r0, #0
 800459a:	d033      	beq.n	8004604 <_printf_float+0x26c>
 800459c:	2301      	movs	r3, #1
 800459e:	4631      	mov	r1, r6
 80045a0:	4628      	mov	r0, r5
 80045a2:	4a35      	ldr	r2, [pc, #212]	@ (8004678 <_printf_float+0x2e0>)
 80045a4:	47b8      	blx	r7
 80045a6:	3001      	adds	r0, #1
 80045a8:	f43f af51 	beq.w	800444e <_printf_float+0xb6>
 80045ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80045b0:	4543      	cmp	r3, r8
 80045b2:	db02      	blt.n	80045ba <_printf_float+0x222>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	07d8      	lsls	r0, r3, #31
 80045b8:	d50f      	bpl.n	80045da <_printf_float+0x242>
 80045ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	f43f af42 	beq.w	800444e <_printf_float+0xb6>
 80045ca:	f04f 0900 	mov.w	r9, #0
 80045ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80045d2:	f104 0a1a 	add.w	sl, r4, #26
 80045d6:	45c8      	cmp	r8, r9
 80045d8:	dc09      	bgt.n	80045ee <_printf_float+0x256>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	079b      	lsls	r3, r3, #30
 80045de:	f100 8102 	bmi.w	80047e6 <_printf_float+0x44e>
 80045e2:	68e0      	ldr	r0, [r4, #12]
 80045e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045e6:	4298      	cmp	r0, r3
 80045e8:	bfb8      	it	lt
 80045ea:	4618      	movlt	r0, r3
 80045ec:	e731      	b.n	8004452 <_printf_float+0xba>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4652      	mov	r2, sl
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	47b8      	blx	r7
 80045f8:	3001      	adds	r0, #1
 80045fa:	f43f af28 	beq.w	800444e <_printf_float+0xb6>
 80045fe:	f109 0901 	add.w	r9, r9, #1
 8004602:	e7e8      	b.n	80045d6 <_printf_float+0x23e>
 8004604:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004606:	2b00      	cmp	r3, #0
 8004608:	dc38      	bgt.n	800467c <_printf_float+0x2e4>
 800460a:	2301      	movs	r3, #1
 800460c:	4631      	mov	r1, r6
 800460e:	4628      	mov	r0, r5
 8004610:	4a19      	ldr	r2, [pc, #100]	@ (8004678 <_printf_float+0x2e0>)
 8004612:	47b8      	blx	r7
 8004614:	3001      	adds	r0, #1
 8004616:	f43f af1a 	beq.w	800444e <_printf_float+0xb6>
 800461a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800461e:	ea59 0303 	orrs.w	r3, r9, r3
 8004622:	d102      	bne.n	800462a <_printf_float+0x292>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	07d9      	lsls	r1, r3, #31
 8004628:	d5d7      	bpl.n	80045da <_printf_float+0x242>
 800462a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800462e:	4631      	mov	r1, r6
 8004630:	4628      	mov	r0, r5
 8004632:	47b8      	blx	r7
 8004634:	3001      	adds	r0, #1
 8004636:	f43f af0a 	beq.w	800444e <_printf_float+0xb6>
 800463a:	f04f 0a00 	mov.w	sl, #0
 800463e:	f104 0b1a 	add.w	fp, r4, #26
 8004642:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004644:	425b      	negs	r3, r3
 8004646:	4553      	cmp	r3, sl
 8004648:	dc01      	bgt.n	800464e <_printf_float+0x2b6>
 800464a:	464b      	mov	r3, r9
 800464c:	e793      	b.n	8004576 <_printf_float+0x1de>
 800464e:	2301      	movs	r3, #1
 8004650:	465a      	mov	r2, fp
 8004652:	4631      	mov	r1, r6
 8004654:	4628      	mov	r0, r5
 8004656:	47b8      	blx	r7
 8004658:	3001      	adds	r0, #1
 800465a:	f43f aef8 	beq.w	800444e <_printf_float+0xb6>
 800465e:	f10a 0a01 	add.w	sl, sl, #1
 8004662:	e7ee      	b.n	8004642 <_printf_float+0x2aa>
 8004664:	7fefffff 	.word	0x7fefffff
 8004668:	080071ff 	.word	0x080071ff
 800466c:	080071fb 	.word	0x080071fb
 8004670:	08007207 	.word	0x08007207
 8004674:	08007203 	.word	0x08007203
 8004678:	0800720b 	.word	0x0800720b
 800467c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800467e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004682:	4553      	cmp	r3, sl
 8004684:	bfa8      	it	ge
 8004686:	4653      	movge	r3, sl
 8004688:	2b00      	cmp	r3, #0
 800468a:	4699      	mov	r9, r3
 800468c:	dc36      	bgt.n	80046fc <_printf_float+0x364>
 800468e:	f04f 0b00 	mov.w	fp, #0
 8004692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004696:	f104 021a 	add.w	r2, r4, #26
 800469a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800469c:	930a      	str	r3, [sp, #40]	@ 0x28
 800469e:	eba3 0309 	sub.w	r3, r3, r9
 80046a2:	455b      	cmp	r3, fp
 80046a4:	dc31      	bgt.n	800470a <_printf_float+0x372>
 80046a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046a8:	459a      	cmp	sl, r3
 80046aa:	dc3a      	bgt.n	8004722 <_printf_float+0x38a>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	07da      	lsls	r2, r3, #31
 80046b0:	d437      	bmi.n	8004722 <_printf_float+0x38a>
 80046b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046b4:	ebaa 0903 	sub.w	r9, sl, r3
 80046b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046ba:	ebaa 0303 	sub.w	r3, sl, r3
 80046be:	4599      	cmp	r9, r3
 80046c0:	bfa8      	it	ge
 80046c2:	4699      	movge	r9, r3
 80046c4:	f1b9 0f00 	cmp.w	r9, #0
 80046c8:	dc33      	bgt.n	8004732 <_printf_float+0x39a>
 80046ca:	f04f 0800 	mov.w	r8, #0
 80046ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046d2:	f104 0b1a 	add.w	fp, r4, #26
 80046d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046d8:	ebaa 0303 	sub.w	r3, sl, r3
 80046dc:	eba3 0309 	sub.w	r3, r3, r9
 80046e0:	4543      	cmp	r3, r8
 80046e2:	f77f af7a 	ble.w	80045da <_printf_float+0x242>
 80046e6:	2301      	movs	r3, #1
 80046e8:	465a      	mov	r2, fp
 80046ea:	4631      	mov	r1, r6
 80046ec:	4628      	mov	r0, r5
 80046ee:	47b8      	blx	r7
 80046f0:	3001      	adds	r0, #1
 80046f2:	f43f aeac 	beq.w	800444e <_printf_float+0xb6>
 80046f6:	f108 0801 	add.w	r8, r8, #1
 80046fa:	e7ec      	b.n	80046d6 <_printf_float+0x33e>
 80046fc:	4642      	mov	r2, r8
 80046fe:	4631      	mov	r1, r6
 8004700:	4628      	mov	r0, r5
 8004702:	47b8      	blx	r7
 8004704:	3001      	adds	r0, #1
 8004706:	d1c2      	bne.n	800468e <_printf_float+0x2f6>
 8004708:	e6a1      	b.n	800444e <_printf_float+0xb6>
 800470a:	2301      	movs	r3, #1
 800470c:	4631      	mov	r1, r6
 800470e:	4628      	mov	r0, r5
 8004710:	920a      	str	r2, [sp, #40]	@ 0x28
 8004712:	47b8      	blx	r7
 8004714:	3001      	adds	r0, #1
 8004716:	f43f ae9a 	beq.w	800444e <_printf_float+0xb6>
 800471a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800471c:	f10b 0b01 	add.w	fp, fp, #1
 8004720:	e7bb      	b.n	800469a <_printf_float+0x302>
 8004722:	4631      	mov	r1, r6
 8004724:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004728:	4628      	mov	r0, r5
 800472a:	47b8      	blx	r7
 800472c:	3001      	adds	r0, #1
 800472e:	d1c0      	bne.n	80046b2 <_printf_float+0x31a>
 8004730:	e68d      	b.n	800444e <_printf_float+0xb6>
 8004732:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004734:	464b      	mov	r3, r9
 8004736:	4631      	mov	r1, r6
 8004738:	4628      	mov	r0, r5
 800473a:	4442      	add	r2, r8
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	d1c3      	bne.n	80046ca <_printf_float+0x332>
 8004742:	e684      	b.n	800444e <_printf_float+0xb6>
 8004744:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004748:	f1ba 0f01 	cmp.w	sl, #1
 800474c:	dc01      	bgt.n	8004752 <_printf_float+0x3ba>
 800474e:	07db      	lsls	r3, r3, #31
 8004750:	d536      	bpl.n	80047c0 <_printf_float+0x428>
 8004752:	2301      	movs	r3, #1
 8004754:	4642      	mov	r2, r8
 8004756:	4631      	mov	r1, r6
 8004758:	4628      	mov	r0, r5
 800475a:	47b8      	blx	r7
 800475c:	3001      	adds	r0, #1
 800475e:	f43f ae76 	beq.w	800444e <_printf_float+0xb6>
 8004762:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	f43f ae6e 	beq.w	800444e <_printf_float+0xb6>
 8004772:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004776:	2200      	movs	r2, #0
 8004778:	2300      	movs	r3, #0
 800477a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800477e:	f7fc f91d 	bl	80009bc <__aeabi_dcmpeq>
 8004782:	b9c0      	cbnz	r0, 80047b6 <_printf_float+0x41e>
 8004784:	4653      	mov	r3, sl
 8004786:	f108 0201 	add.w	r2, r8, #1
 800478a:	4631      	mov	r1, r6
 800478c:	4628      	mov	r0, r5
 800478e:	47b8      	blx	r7
 8004790:	3001      	adds	r0, #1
 8004792:	d10c      	bne.n	80047ae <_printf_float+0x416>
 8004794:	e65b      	b.n	800444e <_printf_float+0xb6>
 8004796:	2301      	movs	r3, #1
 8004798:	465a      	mov	r2, fp
 800479a:	4631      	mov	r1, r6
 800479c:	4628      	mov	r0, r5
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	f43f ae54 	beq.w	800444e <_printf_float+0xb6>
 80047a6:	f108 0801 	add.w	r8, r8, #1
 80047aa:	45d0      	cmp	r8, sl
 80047ac:	dbf3      	blt.n	8004796 <_printf_float+0x3fe>
 80047ae:	464b      	mov	r3, r9
 80047b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80047b4:	e6e0      	b.n	8004578 <_printf_float+0x1e0>
 80047b6:	f04f 0800 	mov.w	r8, #0
 80047ba:	f104 0b1a 	add.w	fp, r4, #26
 80047be:	e7f4      	b.n	80047aa <_printf_float+0x412>
 80047c0:	2301      	movs	r3, #1
 80047c2:	4642      	mov	r2, r8
 80047c4:	e7e1      	b.n	800478a <_printf_float+0x3f2>
 80047c6:	2301      	movs	r3, #1
 80047c8:	464a      	mov	r2, r9
 80047ca:	4631      	mov	r1, r6
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	f43f ae3c 	beq.w	800444e <_printf_float+0xb6>
 80047d6:	f108 0801 	add.w	r8, r8, #1
 80047da:	68e3      	ldr	r3, [r4, #12]
 80047dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80047de:	1a5b      	subs	r3, r3, r1
 80047e0:	4543      	cmp	r3, r8
 80047e2:	dcf0      	bgt.n	80047c6 <_printf_float+0x42e>
 80047e4:	e6fd      	b.n	80045e2 <_printf_float+0x24a>
 80047e6:	f04f 0800 	mov.w	r8, #0
 80047ea:	f104 0919 	add.w	r9, r4, #25
 80047ee:	e7f4      	b.n	80047da <_printf_float+0x442>

080047f0 <_printf_common>:
 80047f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f4:	4616      	mov	r6, r2
 80047f6:	4698      	mov	r8, r3
 80047f8:	688a      	ldr	r2, [r1, #8]
 80047fa:	690b      	ldr	r3, [r1, #16]
 80047fc:	4607      	mov	r7, r0
 80047fe:	4293      	cmp	r3, r2
 8004800:	bfb8      	it	lt
 8004802:	4613      	movlt	r3, r2
 8004804:	6033      	str	r3, [r6, #0]
 8004806:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800480a:	460c      	mov	r4, r1
 800480c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004810:	b10a      	cbz	r2, 8004816 <_printf_common+0x26>
 8004812:	3301      	adds	r3, #1
 8004814:	6033      	str	r3, [r6, #0]
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	0699      	lsls	r1, r3, #26
 800481a:	bf42      	ittt	mi
 800481c:	6833      	ldrmi	r3, [r6, #0]
 800481e:	3302      	addmi	r3, #2
 8004820:	6033      	strmi	r3, [r6, #0]
 8004822:	6825      	ldr	r5, [r4, #0]
 8004824:	f015 0506 	ands.w	r5, r5, #6
 8004828:	d106      	bne.n	8004838 <_printf_common+0x48>
 800482a:	f104 0a19 	add.w	sl, r4, #25
 800482e:	68e3      	ldr	r3, [r4, #12]
 8004830:	6832      	ldr	r2, [r6, #0]
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	42ab      	cmp	r3, r5
 8004836:	dc2b      	bgt.n	8004890 <_printf_common+0xa0>
 8004838:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	3b00      	subs	r3, #0
 8004840:	bf18      	it	ne
 8004842:	2301      	movne	r3, #1
 8004844:	0692      	lsls	r2, r2, #26
 8004846:	d430      	bmi.n	80048aa <_printf_common+0xba>
 8004848:	4641      	mov	r1, r8
 800484a:	4638      	mov	r0, r7
 800484c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004850:	47c8      	blx	r9
 8004852:	3001      	adds	r0, #1
 8004854:	d023      	beq.n	800489e <_printf_common+0xae>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	6922      	ldr	r2, [r4, #16]
 800485a:	f003 0306 	and.w	r3, r3, #6
 800485e:	2b04      	cmp	r3, #4
 8004860:	bf14      	ite	ne
 8004862:	2500      	movne	r5, #0
 8004864:	6833      	ldreq	r3, [r6, #0]
 8004866:	f04f 0600 	mov.w	r6, #0
 800486a:	bf08      	it	eq
 800486c:	68e5      	ldreq	r5, [r4, #12]
 800486e:	f104 041a 	add.w	r4, r4, #26
 8004872:	bf08      	it	eq
 8004874:	1aed      	subeq	r5, r5, r3
 8004876:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800487a:	bf08      	it	eq
 800487c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004880:	4293      	cmp	r3, r2
 8004882:	bfc4      	itt	gt
 8004884:	1a9b      	subgt	r3, r3, r2
 8004886:	18ed      	addgt	r5, r5, r3
 8004888:	42b5      	cmp	r5, r6
 800488a:	d11a      	bne.n	80048c2 <_printf_common+0xd2>
 800488c:	2000      	movs	r0, #0
 800488e:	e008      	b.n	80048a2 <_printf_common+0xb2>
 8004890:	2301      	movs	r3, #1
 8004892:	4652      	mov	r2, sl
 8004894:	4641      	mov	r1, r8
 8004896:	4638      	mov	r0, r7
 8004898:	47c8      	blx	r9
 800489a:	3001      	adds	r0, #1
 800489c:	d103      	bne.n	80048a6 <_printf_common+0xb6>
 800489e:	f04f 30ff 	mov.w	r0, #4294967295
 80048a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a6:	3501      	adds	r5, #1
 80048a8:	e7c1      	b.n	800482e <_printf_common+0x3e>
 80048aa:	2030      	movs	r0, #48	@ 0x30
 80048ac:	18e1      	adds	r1, r4, r3
 80048ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048b8:	4422      	add	r2, r4
 80048ba:	3302      	adds	r3, #2
 80048bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048c0:	e7c2      	b.n	8004848 <_printf_common+0x58>
 80048c2:	2301      	movs	r3, #1
 80048c4:	4622      	mov	r2, r4
 80048c6:	4641      	mov	r1, r8
 80048c8:	4638      	mov	r0, r7
 80048ca:	47c8      	blx	r9
 80048cc:	3001      	adds	r0, #1
 80048ce:	d0e6      	beq.n	800489e <_printf_common+0xae>
 80048d0:	3601      	adds	r6, #1
 80048d2:	e7d9      	b.n	8004888 <_printf_common+0x98>

080048d4 <_printf_i>:
 80048d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d8:	7e0f      	ldrb	r7, [r1, #24]
 80048da:	4691      	mov	r9, r2
 80048dc:	2f78      	cmp	r7, #120	@ 0x78
 80048de:	4680      	mov	r8, r0
 80048e0:	460c      	mov	r4, r1
 80048e2:	469a      	mov	sl, r3
 80048e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048ea:	d807      	bhi.n	80048fc <_printf_i+0x28>
 80048ec:	2f62      	cmp	r7, #98	@ 0x62
 80048ee:	d80a      	bhi.n	8004906 <_printf_i+0x32>
 80048f0:	2f00      	cmp	r7, #0
 80048f2:	f000 80d1 	beq.w	8004a98 <_printf_i+0x1c4>
 80048f6:	2f58      	cmp	r7, #88	@ 0x58
 80048f8:	f000 80b8 	beq.w	8004a6c <_printf_i+0x198>
 80048fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004900:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004904:	e03a      	b.n	800497c <_printf_i+0xa8>
 8004906:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800490a:	2b15      	cmp	r3, #21
 800490c:	d8f6      	bhi.n	80048fc <_printf_i+0x28>
 800490e:	a101      	add	r1, pc, #4	@ (adr r1, 8004914 <_printf_i+0x40>)
 8004910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004914:	0800496d 	.word	0x0800496d
 8004918:	08004981 	.word	0x08004981
 800491c:	080048fd 	.word	0x080048fd
 8004920:	080048fd 	.word	0x080048fd
 8004924:	080048fd 	.word	0x080048fd
 8004928:	080048fd 	.word	0x080048fd
 800492c:	08004981 	.word	0x08004981
 8004930:	080048fd 	.word	0x080048fd
 8004934:	080048fd 	.word	0x080048fd
 8004938:	080048fd 	.word	0x080048fd
 800493c:	080048fd 	.word	0x080048fd
 8004940:	08004a7f 	.word	0x08004a7f
 8004944:	080049ab 	.word	0x080049ab
 8004948:	08004a39 	.word	0x08004a39
 800494c:	080048fd 	.word	0x080048fd
 8004950:	080048fd 	.word	0x080048fd
 8004954:	08004aa1 	.word	0x08004aa1
 8004958:	080048fd 	.word	0x080048fd
 800495c:	080049ab 	.word	0x080049ab
 8004960:	080048fd 	.word	0x080048fd
 8004964:	080048fd 	.word	0x080048fd
 8004968:	08004a41 	.word	0x08004a41
 800496c:	6833      	ldr	r3, [r6, #0]
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6032      	str	r2, [r6, #0]
 8004974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004978:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800497c:	2301      	movs	r3, #1
 800497e:	e09c      	b.n	8004aba <_printf_i+0x1e6>
 8004980:	6833      	ldr	r3, [r6, #0]
 8004982:	6820      	ldr	r0, [r4, #0]
 8004984:	1d19      	adds	r1, r3, #4
 8004986:	6031      	str	r1, [r6, #0]
 8004988:	0606      	lsls	r6, r0, #24
 800498a:	d501      	bpl.n	8004990 <_printf_i+0xbc>
 800498c:	681d      	ldr	r5, [r3, #0]
 800498e:	e003      	b.n	8004998 <_printf_i+0xc4>
 8004990:	0645      	lsls	r5, r0, #25
 8004992:	d5fb      	bpl.n	800498c <_printf_i+0xb8>
 8004994:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004998:	2d00      	cmp	r5, #0
 800499a:	da03      	bge.n	80049a4 <_printf_i+0xd0>
 800499c:	232d      	movs	r3, #45	@ 0x2d
 800499e:	426d      	negs	r5, r5
 80049a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049a4:	230a      	movs	r3, #10
 80049a6:	4858      	ldr	r0, [pc, #352]	@ (8004b08 <_printf_i+0x234>)
 80049a8:	e011      	b.n	80049ce <_printf_i+0xfa>
 80049aa:	6821      	ldr	r1, [r4, #0]
 80049ac:	6833      	ldr	r3, [r6, #0]
 80049ae:	0608      	lsls	r0, r1, #24
 80049b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80049b4:	d402      	bmi.n	80049bc <_printf_i+0xe8>
 80049b6:	0649      	lsls	r1, r1, #25
 80049b8:	bf48      	it	mi
 80049ba:	b2ad      	uxthmi	r5, r5
 80049bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80049be:	6033      	str	r3, [r6, #0]
 80049c0:	bf14      	ite	ne
 80049c2:	230a      	movne	r3, #10
 80049c4:	2308      	moveq	r3, #8
 80049c6:	4850      	ldr	r0, [pc, #320]	@ (8004b08 <_printf_i+0x234>)
 80049c8:	2100      	movs	r1, #0
 80049ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049ce:	6866      	ldr	r6, [r4, #4]
 80049d0:	2e00      	cmp	r6, #0
 80049d2:	60a6      	str	r6, [r4, #8]
 80049d4:	db05      	blt.n	80049e2 <_printf_i+0x10e>
 80049d6:	6821      	ldr	r1, [r4, #0]
 80049d8:	432e      	orrs	r6, r5
 80049da:	f021 0104 	bic.w	r1, r1, #4
 80049de:	6021      	str	r1, [r4, #0]
 80049e0:	d04b      	beq.n	8004a7a <_printf_i+0x1a6>
 80049e2:	4616      	mov	r6, r2
 80049e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80049e8:	fb03 5711 	mls	r7, r3, r1, r5
 80049ec:	5dc7      	ldrb	r7, [r0, r7]
 80049ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049f2:	462f      	mov	r7, r5
 80049f4:	42bb      	cmp	r3, r7
 80049f6:	460d      	mov	r5, r1
 80049f8:	d9f4      	bls.n	80049e4 <_printf_i+0x110>
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d10b      	bne.n	8004a16 <_printf_i+0x142>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	07df      	lsls	r7, r3, #31
 8004a02:	d508      	bpl.n	8004a16 <_printf_i+0x142>
 8004a04:	6923      	ldr	r3, [r4, #16]
 8004a06:	6861      	ldr	r1, [r4, #4]
 8004a08:	4299      	cmp	r1, r3
 8004a0a:	bfde      	ittt	le
 8004a0c:	2330      	movle	r3, #48	@ 0x30
 8004a0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a16:	1b92      	subs	r2, r2, r6
 8004a18:	6122      	str	r2, [r4, #16]
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	4640      	mov	r0, r8
 8004a20:	f8cd a000 	str.w	sl, [sp]
 8004a24:	aa03      	add	r2, sp, #12
 8004a26:	f7ff fee3 	bl	80047f0 <_printf_common>
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d14a      	bne.n	8004ac4 <_printf_i+0x1f0>
 8004a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a32:	b004      	add	sp, #16
 8004a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	f043 0320 	orr.w	r3, r3, #32
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	2778      	movs	r7, #120	@ 0x78
 8004a42:	4832      	ldr	r0, [pc, #200]	@ (8004b0c <_printf_i+0x238>)
 8004a44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	6831      	ldr	r1, [r6, #0]
 8004a4c:	061f      	lsls	r7, r3, #24
 8004a4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a52:	d402      	bmi.n	8004a5a <_printf_i+0x186>
 8004a54:	065f      	lsls	r7, r3, #25
 8004a56:	bf48      	it	mi
 8004a58:	b2ad      	uxthmi	r5, r5
 8004a5a:	6031      	str	r1, [r6, #0]
 8004a5c:	07d9      	lsls	r1, r3, #31
 8004a5e:	bf44      	itt	mi
 8004a60:	f043 0320 	orrmi.w	r3, r3, #32
 8004a64:	6023      	strmi	r3, [r4, #0]
 8004a66:	b11d      	cbz	r5, 8004a70 <_printf_i+0x19c>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	e7ad      	b.n	80049c8 <_printf_i+0xf4>
 8004a6c:	4826      	ldr	r0, [pc, #152]	@ (8004b08 <_printf_i+0x234>)
 8004a6e:	e7e9      	b.n	8004a44 <_printf_i+0x170>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	f023 0320 	bic.w	r3, r3, #32
 8004a76:	6023      	str	r3, [r4, #0]
 8004a78:	e7f6      	b.n	8004a68 <_printf_i+0x194>
 8004a7a:	4616      	mov	r6, r2
 8004a7c:	e7bd      	b.n	80049fa <_printf_i+0x126>
 8004a7e:	6833      	ldr	r3, [r6, #0]
 8004a80:	6825      	ldr	r5, [r4, #0]
 8004a82:	1d18      	adds	r0, r3, #4
 8004a84:	6961      	ldr	r1, [r4, #20]
 8004a86:	6030      	str	r0, [r6, #0]
 8004a88:	062e      	lsls	r6, r5, #24
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	d501      	bpl.n	8004a92 <_printf_i+0x1be>
 8004a8e:	6019      	str	r1, [r3, #0]
 8004a90:	e002      	b.n	8004a98 <_printf_i+0x1c4>
 8004a92:	0668      	lsls	r0, r5, #25
 8004a94:	d5fb      	bpl.n	8004a8e <_printf_i+0x1ba>
 8004a96:	8019      	strh	r1, [r3, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4616      	mov	r6, r2
 8004a9c:	6123      	str	r3, [r4, #16]
 8004a9e:	e7bc      	b.n	8004a1a <_printf_i+0x146>
 8004aa0:	6833      	ldr	r3, [r6, #0]
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	1d1a      	adds	r2, r3, #4
 8004aa6:	6032      	str	r2, [r6, #0]
 8004aa8:	681e      	ldr	r6, [r3, #0]
 8004aaa:	6862      	ldr	r2, [r4, #4]
 8004aac:	4630      	mov	r0, r6
 8004aae:	f000 f9fc 	bl	8004eaa <memchr>
 8004ab2:	b108      	cbz	r0, 8004ab8 <_printf_i+0x1e4>
 8004ab4:	1b80      	subs	r0, r0, r6
 8004ab6:	6060      	str	r0, [r4, #4]
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	2300      	movs	r3, #0
 8004abe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ac2:	e7aa      	b.n	8004a1a <_printf_i+0x146>
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	4640      	mov	r0, r8
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	47d0      	blx	sl
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d0ad      	beq.n	8004a2e <_printf_i+0x15a>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	079b      	lsls	r3, r3, #30
 8004ad6:	d413      	bmi.n	8004b00 <_printf_i+0x22c>
 8004ad8:	68e0      	ldr	r0, [r4, #12]
 8004ada:	9b03      	ldr	r3, [sp, #12]
 8004adc:	4298      	cmp	r0, r3
 8004ade:	bfb8      	it	lt
 8004ae0:	4618      	movlt	r0, r3
 8004ae2:	e7a6      	b.n	8004a32 <_printf_i+0x15e>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4632      	mov	r2, r6
 8004ae8:	4649      	mov	r1, r9
 8004aea:	4640      	mov	r0, r8
 8004aec:	47d0      	blx	sl
 8004aee:	3001      	adds	r0, #1
 8004af0:	d09d      	beq.n	8004a2e <_printf_i+0x15a>
 8004af2:	3501      	adds	r5, #1
 8004af4:	68e3      	ldr	r3, [r4, #12]
 8004af6:	9903      	ldr	r1, [sp, #12]
 8004af8:	1a5b      	subs	r3, r3, r1
 8004afa:	42ab      	cmp	r3, r5
 8004afc:	dcf2      	bgt.n	8004ae4 <_printf_i+0x210>
 8004afe:	e7eb      	b.n	8004ad8 <_printf_i+0x204>
 8004b00:	2500      	movs	r5, #0
 8004b02:	f104 0619 	add.w	r6, r4, #25
 8004b06:	e7f5      	b.n	8004af4 <_printf_i+0x220>
 8004b08:	0800720d 	.word	0x0800720d
 8004b0c:	0800721e 	.word	0x0800721e

08004b10 <std>:
 8004b10:	2300      	movs	r3, #0
 8004b12:	b510      	push	{r4, lr}
 8004b14:	4604      	mov	r4, r0
 8004b16:	e9c0 3300 	strd	r3, r3, [r0]
 8004b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b1e:	6083      	str	r3, [r0, #8]
 8004b20:	8181      	strh	r1, [r0, #12]
 8004b22:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b24:	81c2      	strh	r2, [r0, #14]
 8004b26:	6183      	str	r3, [r0, #24]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	2208      	movs	r2, #8
 8004b2c:	305c      	adds	r0, #92	@ 0x5c
 8004b2e:	f000 f92a 	bl	8004d86 <memset>
 8004b32:	4b0d      	ldr	r3, [pc, #52]	@ (8004b68 <std+0x58>)
 8004b34:	6224      	str	r4, [r4, #32]
 8004b36:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b38:	4b0c      	ldr	r3, [pc, #48]	@ (8004b6c <std+0x5c>)
 8004b3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <std+0x60>)
 8004b3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b40:	4b0c      	ldr	r3, [pc, #48]	@ (8004b74 <std+0x64>)
 8004b42:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b44:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <std+0x68>)
 8004b46:	429c      	cmp	r4, r3
 8004b48:	d006      	beq.n	8004b58 <std+0x48>
 8004b4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b4e:	4294      	cmp	r4, r2
 8004b50:	d002      	beq.n	8004b58 <std+0x48>
 8004b52:	33d0      	adds	r3, #208	@ 0xd0
 8004b54:	429c      	cmp	r4, r3
 8004b56:	d105      	bne.n	8004b64 <std+0x54>
 8004b58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b60:	f000 b9a0 	b.w	8004ea4 <__retarget_lock_init_recursive>
 8004b64:	bd10      	pop	{r4, pc}
 8004b66:	bf00      	nop
 8004b68:	08004d01 	.word	0x08004d01
 8004b6c:	08004d23 	.word	0x08004d23
 8004b70:	08004d5b 	.word	0x08004d5b
 8004b74:	08004d7f 	.word	0x08004d7f
 8004b78:	20000324 	.word	0x20000324

08004b7c <stdio_exit_handler>:
 8004b7c:	4a02      	ldr	r2, [pc, #8]	@ (8004b88 <stdio_exit_handler+0xc>)
 8004b7e:	4903      	ldr	r1, [pc, #12]	@ (8004b8c <stdio_exit_handler+0x10>)
 8004b80:	4803      	ldr	r0, [pc, #12]	@ (8004b90 <stdio_exit_handler+0x14>)
 8004b82:	f000 b869 	b.w	8004c58 <_fwalk_sglue>
 8004b86:	bf00      	nop
 8004b88:	20000010 	.word	0x20000010
 8004b8c:	08006821 	.word	0x08006821
 8004b90:	20000020 	.word	0x20000020

08004b94 <cleanup_stdio>:
 8004b94:	6841      	ldr	r1, [r0, #4]
 8004b96:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <cleanup_stdio+0x34>)
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	4299      	cmp	r1, r3
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	d001      	beq.n	8004ba4 <cleanup_stdio+0x10>
 8004ba0:	f001 fe3e 	bl	8006820 <_fflush_r>
 8004ba4:	68a1      	ldr	r1, [r4, #8]
 8004ba6:	4b09      	ldr	r3, [pc, #36]	@ (8004bcc <cleanup_stdio+0x38>)
 8004ba8:	4299      	cmp	r1, r3
 8004baa:	d002      	beq.n	8004bb2 <cleanup_stdio+0x1e>
 8004bac:	4620      	mov	r0, r4
 8004bae:	f001 fe37 	bl	8006820 <_fflush_r>
 8004bb2:	68e1      	ldr	r1, [r4, #12]
 8004bb4:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <cleanup_stdio+0x3c>)
 8004bb6:	4299      	cmp	r1, r3
 8004bb8:	d004      	beq.n	8004bc4 <cleanup_stdio+0x30>
 8004bba:	4620      	mov	r0, r4
 8004bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc0:	f001 be2e 	b.w	8006820 <_fflush_r>
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000324 	.word	0x20000324
 8004bcc:	2000038c 	.word	0x2000038c
 8004bd0:	200003f4 	.word	0x200003f4

08004bd4 <global_stdio_init.part.0>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c04 <global_stdio_init.part.0+0x30>)
 8004bd8:	4c0b      	ldr	r4, [pc, #44]	@ (8004c08 <global_stdio_init.part.0+0x34>)
 8004bda:	4a0c      	ldr	r2, [pc, #48]	@ (8004c0c <global_stdio_init.part.0+0x38>)
 8004bdc:	4620      	mov	r0, r4
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	2104      	movs	r1, #4
 8004be2:	2200      	movs	r2, #0
 8004be4:	f7ff ff94 	bl	8004b10 <std>
 8004be8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bec:	2201      	movs	r2, #1
 8004bee:	2109      	movs	r1, #9
 8004bf0:	f7ff ff8e 	bl	8004b10 <std>
 8004bf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bfe:	2112      	movs	r1, #18
 8004c00:	f7ff bf86 	b.w	8004b10 <std>
 8004c04:	2000045c 	.word	0x2000045c
 8004c08:	20000324 	.word	0x20000324
 8004c0c:	08004b7d 	.word	0x08004b7d

08004c10 <__sfp_lock_acquire>:
 8004c10:	4801      	ldr	r0, [pc, #4]	@ (8004c18 <__sfp_lock_acquire+0x8>)
 8004c12:	f000 b948 	b.w	8004ea6 <__retarget_lock_acquire_recursive>
 8004c16:	bf00      	nop
 8004c18:	20000465 	.word	0x20000465

08004c1c <__sfp_lock_release>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	@ (8004c24 <__sfp_lock_release+0x8>)
 8004c1e:	f000 b943 	b.w	8004ea8 <__retarget_lock_release_recursive>
 8004c22:	bf00      	nop
 8004c24:	20000465 	.word	0x20000465

08004c28 <__sinit>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	f7ff fff0 	bl	8004c10 <__sfp_lock_acquire>
 8004c30:	6a23      	ldr	r3, [r4, #32]
 8004c32:	b11b      	cbz	r3, 8004c3c <__sinit+0x14>
 8004c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c38:	f7ff bff0 	b.w	8004c1c <__sfp_lock_release>
 8004c3c:	4b04      	ldr	r3, [pc, #16]	@ (8004c50 <__sinit+0x28>)
 8004c3e:	6223      	str	r3, [r4, #32]
 8004c40:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <__sinit+0x2c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f5      	bne.n	8004c34 <__sinit+0xc>
 8004c48:	f7ff ffc4 	bl	8004bd4 <global_stdio_init.part.0>
 8004c4c:	e7f2      	b.n	8004c34 <__sinit+0xc>
 8004c4e:	bf00      	nop
 8004c50:	08004b95 	.word	0x08004b95
 8004c54:	2000045c 	.word	0x2000045c

08004c58 <_fwalk_sglue>:
 8004c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	4688      	mov	r8, r1
 8004c60:	4614      	mov	r4, r2
 8004c62:	2600      	movs	r6, #0
 8004c64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c68:	f1b9 0901 	subs.w	r9, r9, #1
 8004c6c:	d505      	bpl.n	8004c7a <_fwalk_sglue+0x22>
 8004c6e:	6824      	ldr	r4, [r4, #0]
 8004c70:	2c00      	cmp	r4, #0
 8004c72:	d1f7      	bne.n	8004c64 <_fwalk_sglue+0xc>
 8004c74:	4630      	mov	r0, r6
 8004c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c7a:	89ab      	ldrh	r3, [r5, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d907      	bls.n	8004c90 <_fwalk_sglue+0x38>
 8004c80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c84:	3301      	adds	r3, #1
 8004c86:	d003      	beq.n	8004c90 <_fwalk_sglue+0x38>
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	47c0      	blx	r8
 8004c8e:	4306      	orrs	r6, r0
 8004c90:	3568      	adds	r5, #104	@ 0x68
 8004c92:	e7e9      	b.n	8004c68 <_fwalk_sglue+0x10>

08004c94 <sniprintf>:
 8004c94:	b40c      	push	{r2, r3}
 8004c96:	b530      	push	{r4, r5, lr}
 8004c98:	4b18      	ldr	r3, [pc, #96]	@ (8004cfc <sniprintf+0x68>)
 8004c9a:	1e0c      	subs	r4, r1, #0
 8004c9c:	681d      	ldr	r5, [r3, #0]
 8004c9e:	b09d      	sub	sp, #116	@ 0x74
 8004ca0:	da08      	bge.n	8004cb4 <sniprintf+0x20>
 8004ca2:	238b      	movs	r3, #139	@ 0x8b
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	b01d      	add	sp, #116	@ 0x74
 8004cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cb0:	b002      	add	sp, #8
 8004cb2:	4770      	bx	lr
 8004cb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004cb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004cc2:	bf0c      	ite	eq
 8004cc4:	4623      	moveq	r3, r4
 8004cc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004cca:	9304      	str	r3, [sp, #16]
 8004ccc:	9307      	str	r3, [sp, #28]
 8004cce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004cd2:	9002      	str	r0, [sp, #8]
 8004cd4:	9006      	str	r0, [sp, #24]
 8004cd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004cda:	4628      	mov	r0, r5
 8004cdc:	ab21      	add	r3, sp, #132	@ 0x84
 8004cde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004ce0:	a902      	add	r1, sp, #8
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	f001 fc20 	bl	8006528 <_svfiprintf_r>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	bfbc      	itt	lt
 8004cec:	238b      	movlt	r3, #139	@ 0x8b
 8004cee:	602b      	strlt	r3, [r5, #0]
 8004cf0:	2c00      	cmp	r4, #0
 8004cf2:	d0da      	beq.n	8004caa <sniprintf+0x16>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	9b02      	ldr	r3, [sp, #8]
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e7d6      	b.n	8004caa <sniprintf+0x16>
 8004cfc:	2000001c 	.word	0x2000001c

08004d00 <__sread>:
 8004d00:	b510      	push	{r4, lr}
 8004d02:	460c      	mov	r4, r1
 8004d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d08:	f000 f87e 	bl	8004e08 <_read_r>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	bfab      	itete	ge
 8004d10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d12:	89a3      	ldrhlt	r3, [r4, #12]
 8004d14:	181b      	addge	r3, r3, r0
 8004d16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d1a:	bfac      	ite	ge
 8004d1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d1e:	81a3      	strhlt	r3, [r4, #12]
 8004d20:	bd10      	pop	{r4, pc}

08004d22 <__swrite>:
 8004d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d26:	461f      	mov	r7, r3
 8004d28:	898b      	ldrh	r3, [r1, #12]
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	05db      	lsls	r3, r3, #23
 8004d2e:	460c      	mov	r4, r1
 8004d30:	4616      	mov	r6, r2
 8004d32:	d505      	bpl.n	8004d40 <__swrite+0x1e>
 8004d34:	2302      	movs	r3, #2
 8004d36:	2200      	movs	r2, #0
 8004d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3c:	f000 f852 	bl	8004de4 <_lseek_r>
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	4632      	mov	r2, r6
 8004d44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d56:	f000 b869 	b.w	8004e2c <_write_r>

08004d5a <__sseek>:
 8004d5a:	b510      	push	{r4, lr}
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d62:	f000 f83f 	bl	8004de4 <_lseek_r>
 8004d66:	1c43      	adds	r3, r0, #1
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	bf15      	itete	ne
 8004d6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d76:	81a3      	strheq	r3, [r4, #12]
 8004d78:	bf18      	it	ne
 8004d7a:	81a3      	strhne	r3, [r4, #12]
 8004d7c:	bd10      	pop	{r4, pc}

08004d7e <__sclose>:
 8004d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d82:	f000 b81f 	b.w	8004dc4 <_close_r>

08004d86 <memset>:
 8004d86:	4603      	mov	r3, r0
 8004d88:	4402      	add	r2, r0
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d100      	bne.n	8004d90 <memset+0xa>
 8004d8e:	4770      	bx	lr
 8004d90:	f803 1b01 	strb.w	r1, [r3], #1
 8004d94:	e7f9      	b.n	8004d8a <memset+0x4>

08004d96 <strncmp>:
 8004d96:	b510      	push	{r4, lr}
 8004d98:	b16a      	cbz	r2, 8004db6 <strncmp+0x20>
 8004d9a:	3901      	subs	r1, #1
 8004d9c:	1884      	adds	r4, r0, r2
 8004d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004da2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d103      	bne.n	8004db2 <strncmp+0x1c>
 8004daa:	42a0      	cmp	r0, r4
 8004dac:	d001      	beq.n	8004db2 <strncmp+0x1c>
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d1f5      	bne.n	8004d9e <strncmp+0x8>
 8004db2:	1ad0      	subs	r0, r2, r3
 8004db4:	bd10      	pop	{r4, pc}
 8004db6:	4610      	mov	r0, r2
 8004db8:	e7fc      	b.n	8004db4 <strncmp+0x1e>
	...

08004dbc <_localeconv_r>:
 8004dbc:	4800      	ldr	r0, [pc, #0]	@ (8004dc0 <_localeconv_r+0x4>)
 8004dbe:	4770      	bx	lr
 8004dc0:	2000015c 	.word	0x2000015c

08004dc4 <_close_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4d05      	ldr	r5, [pc, #20]	@ (8004de0 <_close_r+0x1c>)
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fc fcc1 	bl	8001756 <_close>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_close_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_close_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	20000460 	.word	0x20000460

08004de4 <_lseek_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4604      	mov	r4, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	2200      	movs	r2, #0
 8004dee:	4d05      	ldr	r5, [pc, #20]	@ (8004e04 <_lseek_r+0x20>)
 8004df0:	602a      	str	r2, [r5, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f7fc fcd3 	bl	800179e <_lseek>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_lseek_r+0x1e>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_lseek_r+0x1e>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	20000460 	.word	0x20000460

08004e08 <_read_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	4611      	mov	r1, r2
 8004e10:	2200      	movs	r2, #0
 8004e12:	4d05      	ldr	r5, [pc, #20]	@ (8004e28 <_read_r+0x20>)
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7fc fc64 	bl	80016e4 <_read>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_read_r+0x1e>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_read_r+0x1e>
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	20000460 	.word	0x20000460

08004e2c <_write_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4604      	mov	r4, r0
 8004e30:	4608      	mov	r0, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	2200      	movs	r2, #0
 8004e36:	4d05      	ldr	r5, [pc, #20]	@ (8004e4c <_write_r+0x20>)
 8004e38:	602a      	str	r2, [r5, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f7fc fc6f 	bl	800171e <_write>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_write_r+0x1e>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_write_r+0x1e>
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	20000460 	.word	0x20000460

08004e50 <__errno>:
 8004e50:	4b01      	ldr	r3, [pc, #4]	@ (8004e58 <__errno+0x8>)
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	2000001c 	.word	0x2000001c

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	2600      	movs	r6, #0
 8004e60:	4d0c      	ldr	r5, [pc, #48]	@ (8004e94 <__libc_init_array+0x38>)
 8004e62:	4c0d      	ldr	r4, [pc, #52]	@ (8004e98 <__libc_init_array+0x3c>)
 8004e64:	1b64      	subs	r4, r4, r5
 8004e66:	10a4      	asrs	r4, r4, #2
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	f002 f874 	bl	8006f58 <_init>
 8004e70:	2600      	movs	r6, #0
 8004e72:	4d0a      	ldr	r5, [pc, #40]	@ (8004e9c <__libc_init_array+0x40>)
 8004e74:	4c0a      	ldr	r4, [pc, #40]	@ (8004ea0 <__libc_init_array+0x44>)
 8004e76:	1b64      	subs	r4, r4, r5
 8004e78:	10a4      	asrs	r4, r4, #2
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	08007470 	.word	0x08007470
 8004e98:	08007470 	.word	0x08007470
 8004e9c:	08007470 	.word	0x08007470
 8004ea0:	08007474 	.word	0x08007474

08004ea4 <__retarget_lock_init_recursive>:
 8004ea4:	4770      	bx	lr

08004ea6 <__retarget_lock_acquire_recursive>:
 8004ea6:	4770      	bx	lr

08004ea8 <__retarget_lock_release_recursive>:
 8004ea8:	4770      	bx	lr

08004eaa <memchr>:
 8004eaa:	4603      	mov	r3, r0
 8004eac:	b510      	push	{r4, lr}
 8004eae:	b2c9      	uxtb	r1, r1
 8004eb0:	4402      	add	r2, r0
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	d101      	bne.n	8004ebc <memchr+0x12>
 8004eb8:	2000      	movs	r0, #0
 8004eba:	e003      	b.n	8004ec4 <memchr+0x1a>
 8004ebc:	7804      	ldrb	r4, [r0, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	428c      	cmp	r4, r1
 8004ec2:	d1f6      	bne.n	8004eb2 <memchr+0x8>
 8004ec4:	bd10      	pop	{r4, pc}

08004ec6 <quorem>:
 8004ec6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eca:	6903      	ldr	r3, [r0, #16]
 8004ecc:	690c      	ldr	r4, [r1, #16]
 8004ece:	4607      	mov	r7, r0
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	db7e      	blt.n	8004fd2 <quorem+0x10c>
 8004ed4:	3c01      	subs	r4, #1
 8004ed6:	00a3      	lsls	r3, r4, #2
 8004ed8:	f100 0514 	add.w	r5, r0, #20
 8004edc:	f101 0814 	add.w	r8, r1, #20
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004eec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004efc:	d32e      	bcc.n	8004f5c <quorem+0x96>
 8004efe:	f04f 0a00 	mov.w	sl, #0
 8004f02:	46c4      	mov	ip, r8
 8004f04:	46ae      	mov	lr, r5
 8004f06:	46d3      	mov	fp, sl
 8004f08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f0c:	b298      	uxth	r0, r3
 8004f0e:	fb06 a000 	mla	r0, r6, r0, sl
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	0c02      	lsrs	r2, r0, #16
 8004f16:	fb06 2303 	mla	r3, r6, r3, r2
 8004f1a:	f8de 2000 	ldr.w	r2, [lr]
 8004f1e:	b280      	uxth	r0, r0
 8004f20:	b292      	uxth	r2, r2
 8004f22:	1a12      	subs	r2, r2, r0
 8004f24:	445a      	add	r2, fp
 8004f26:	f8de 0000 	ldr.w	r0, [lr]
 8004f2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f3e:	45e1      	cmp	r9, ip
 8004f40:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f44:	f84e 2b04 	str.w	r2, [lr], #4
 8004f48:	d2de      	bcs.n	8004f08 <quorem+0x42>
 8004f4a:	9b00      	ldr	r3, [sp, #0]
 8004f4c:	58eb      	ldr	r3, [r5, r3]
 8004f4e:	b92b      	cbnz	r3, 8004f5c <quorem+0x96>
 8004f50:	9b01      	ldr	r3, [sp, #4]
 8004f52:	3b04      	subs	r3, #4
 8004f54:	429d      	cmp	r5, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	d32f      	bcc.n	8004fba <quorem+0xf4>
 8004f5a:	613c      	str	r4, [r7, #16]
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	f001 f97f 	bl	8006260 <__mcmp>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	db25      	blt.n	8004fb2 <quorem+0xec>
 8004f66:	4629      	mov	r1, r5
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f6e:	f8d1 c000 	ldr.w	ip, [r1]
 8004f72:	fa1f fe82 	uxth.w	lr, r2
 8004f76:	fa1f f38c 	uxth.w	r3, ip
 8004f7a:	eba3 030e 	sub.w	r3, r3, lr
 8004f7e:	4403      	add	r3, r0
 8004f80:	0c12      	lsrs	r2, r2, #16
 8004f82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f90:	45c1      	cmp	r9, r8
 8004f92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f96:	f841 3b04 	str.w	r3, [r1], #4
 8004f9a:	d2e6      	bcs.n	8004f6a <quorem+0xa4>
 8004f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fa4:	b922      	cbnz	r2, 8004fb0 <quorem+0xea>
 8004fa6:	3b04      	subs	r3, #4
 8004fa8:	429d      	cmp	r5, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	d30b      	bcc.n	8004fc6 <quorem+0x100>
 8004fae:	613c      	str	r4, [r7, #16]
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	b003      	add	sp, #12
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	d1cb      	bne.n	8004f5a <quorem+0x94>
 8004fc2:	3c01      	subs	r4, #1
 8004fc4:	e7c6      	b.n	8004f54 <quorem+0x8e>
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	3b04      	subs	r3, #4
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	d1ef      	bne.n	8004fae <quorem+0xe8>
 8004fce:	3c01      	subs	r4, #1
 8004fd0:	e7ea      	b.n	8004fa8 <quorem+0xe2>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	e7ee      	b.n	8004fb4 <quorem+0xee>
	...

08004fd8 <_dtoa_r>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	4614      	mov	r4, r2
 8004fde:	461d      	mov	r5, r3
 8004fe0:	69c7      	ldr	r7, [r0, #28]
 8004fe2:	b097      	sub	sp, #92	@ 0x5c
 8004fe4:	4681      	mov	r9, r0
 8004fe6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004fea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004fec:	b97f      	cbnz	r7, 800500e <_dtoa_r+0x36>
 8004fee:	2010      	movs	r0, #16
 8004ff0:	f000 fe0e 	bl	8005c10 <malloc>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f8c9 001c 	str.w	r0, [r9, #28]
 8004ffa:	b920      	cbnz	r0, 8005006 <_dtoa_r+0x2e>
 8004ffc:	21ef      	movs	r1, #239	@ 0xef
 8004ffe:	4bac      	ldr	r3, [pc, #688]	@ (80052b0 <_dtoa_r+0x2d8>)
 8005000:	48ac      	ldr	r0, [pc, #688]	@ (80052b4 <_dtoa_r+0x2dc>)
 8005002:	f001 fc6d 	bl	80068e0 <__assert_func>
 8005006:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800500a:	6007      	str	r7, [r0, #0]
 800500c:	60c7      	str	r7, [r0, #12]
 800500e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	b159      	cbz	r1, 800502e <_dtoa_r+0x56>
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	2301      	movs	r3, #1
 800501a:	4093      	lsls	r3, r2
 800501c:	604a      	str	r2, [r1, #4]
 800501e:	608b      	str	r3, [r1, #8]
 8005020:	4648      	mov	r0, r9
 8005022:	f000 feeb 	bl	8005dfc <_Bfree>
 8005026:	2200      	movs	r2, #0
 8005028:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	1e2b      	subs	r3, r5, #0
 8005030:	bfaf      	iteee	ge
 8005032:	2300      	movge	r3, #0
 8005034:	2201      	movlt	r2, #1
 8005036:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800503a:	9307      	strlt	r3, [sp, #28]
 800503c:	bfa8      	it	ge
 800503e:	6033      	strge	r3, [r6, #0]
 8005040:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005044:	4b9c      	ldr	r3, [pc, #624]	@ (80052b8 <_dtoa_r+0x2e0>)
 8005046:	bfb8      	it	lt
 8005048:	6032      	strlt	r2, [r6, #0]
 800504a:	ea33 0308 	bics.w	r3, r3, r8
 800504e:	d112      	bne.n	8005076 <_dtoa_r+0x9e>
 8005050:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005054:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800505c:	4323      	orrs	r3, r4
 800505e:	f000 855e 	beq.w	8005b1e <_dtoa_r+0xb46>
 8005062:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005064:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80052bc <_dtoa_r+0x2e4>
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8560 	beq.w	8005b2e <_dtoa_r+0xb56>
 800506e:	f10a 0303 	add.w	r3, sl, #3
 8005072:	f000 bd5a 	b.w	8005b2a <_dtoa_r+0xb52>
 8005076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800507a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800507e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005082:	2200      	movs	r2, #0
 8005084:	2300      	movs	r3, #0
 8005086:	f7fb fc99 	bl	80009bc <__aeabi_dcmpeq>
 800508a:	4607      	mov	r7, r0
 800508c:	b158      	cbz	r0, 80050a6 <_dtoa_r+0xce>
 800508e:	2301      	movs	r3, #1
 8005090:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005096:	b113      	cbz	r3, 800509e <_dtoa_r+0xc6>
 8005098:	4b89      	ldr	r3, [pc, #548]	@ (80052c0 <_dtoa_r+0x2e8>)
 800509a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80052c4 <_dtoa_r+0x2ec>
 80050a2:	f000 bd44 	b.w	8005b2e <_dtoa_r+0xb56>
 80050a6:	ab14      	add	r3, sp, #80	@ 0x50
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	ab15      	add	r3, sp, #84	@ 0x54
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	4648      	mov	r0, r9
 80050b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80050b4:	f001 f984 	bl	80063c0 <__d2b>
 80050b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80050bc:	9003      	str	r0, [sp, #12]
 80050be:	2e00      	cmp	r6, #0
 80050c0:	d078      	beq.n	80051b4 <_dtoa_r+0x1dc>
 80050c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80050cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80050d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80050d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80050da:	4619      	mov	r1, r3
 80050dc:	2200      	movs	r2, #0
 80050de:	4b7a      	ldr	r3, [pc, #488]	@ (80052c8 <_dtoa_r+0x2f0>)
 80050e0:	f7fb f84c 	bl	800017c <__aeabi_dsub>
 80050e4:	a36c      	add	r3, pc, #432	@ (adr r3, 8005298 <_dtoa_r+0x2c0>)
 80050e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ea:	f7fb f9ff 	bl	80004ec <__aeabi_dmul>
 80050ee:	a36c      	add	r3, pc, #432	@ (adr r3, 80052a0 <_dtoa_r+0x2c8>)
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	f7fb f844 	bl	8000180 <__adddf3>
 80050f8:	4604      	mov	r4, r0
 80050fa:	4630      	mov	r0, r6
 80050fc:	460d      	mov	r5, r1
 80050fe:	f7fb f98b 	bl	8000418 <__aeabi_i2d>
 8005102:	a369      	add	r3, pc, #420	@ (adr r3, 80052a8 <_dtoa_r+0x2d0>)
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f7fb f9f0 	bl	80004ec <__aeabi_dmul>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4620      	mov	r0, r4
 8005112:	4629      	mov	r1, r5
 8005114:	f7fb f834 	bl	8000180 <__adddf3>
 8005118:	4604      	mov	r4, r0
 800511a:	460d      	mov	r5, r1
 800511c:	f7fb fc96 	bl	8000a4c <__aeabi_d2iz>
 8005120:	2200      	movs	r2, #0
 8005122:	4607      	mov	r7, r0
 8005124:	2300      	movs	r3, #0
 8005126:	4620      	mov	r0, r4
 8005128:	4629      	mov	r1, r5
 800512a:	f7fb fc51 	bl	80009d0 <__aeabi_dcmplt>
 800512e:	b140      	cbz	r0, 8005142 <_dtoa_r+0x16a>
 8005130:	4638      	mov	r0, r7
 8005132:	f7fb f971 	bl	8000418 <__aeabi_i2d>
 8005136:	4622      	mov	r2, r4
 8005138:	462b      	mov	r3, r5
 800513a:	f7fb fc3f 	bl	80009bc <__aeabi_dcmpeq>
 800513e:	b900      	cbnz	r0, 8005142 <_dtoa_r+0x16a>
 8005140:	3f01      	subs	r7, #1
 8005142:	2f16      	cmp	r7, #22
 8005144:	d854      	bhi.n	80051f0 <_dtoa_r+0x218>
 8005146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800514a:	4b60      	ldr	r3, [pc, #384]	@ (80052cc <_dtoa_r+0x2f4>)
 800514c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f7fb fc3c 	bl	80009d0 <__aeabi_dcmplt>
 8005158:	2800      	cmp	r0, #0
 800515a:	d04b      	beq.n	80051f4 <_dtoa_r+0x21c>
 800515c:	2300      	movs	r3, #0
 800515e:	3f01      	subs	r7, #1
 8005160:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005162:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005164:	1b9b      	subs	r3, r3, r6
 8005166:	1e5a      	subs	r2, r3, #1
 8005168:	bf49      	itett	mi
 800516a:	f1c3 0301 	rsbmi	r3, r3, #1
 800516e:	2300      	movpl	r3, #0
 8005170:	9304      	strmi	r3, [sp, #16]
 8005172:	2300      	movmi	r3, #0
 8005174:	9209      	str	r2, [sp, #36]	@ 0x24
 8005176:	bf54      	ite	pl
 8005178:	9304      	strpl	r3, [sp, #16]
 800517a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800517c:	2f00      	cmp	r7, #0
 800517e:	db3b      	blt.n	80051f8 <_dtoa_r+0x220>
 8005180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005182:	970e      	str	r7, [sp, #56]	@ 0x38
 8005184:	443b      	add	r3, r7
 8005186:	9309      	str	r3, [sp, #36]	@ 0x24
 8005188:	2300      	movs	r3, #0
 800518a:	930a      	str	r3, [sp, #40]	@ 0x28
 800518c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800518e:	2b09      	cmp	r3, #9
 8005190:	d865      	bhi.n	800525e <_dtoa_r+0x286>
 8005192:	2b05      	cmp	r3, #5
 8005194:	bfc4      	itt	gt
 8005196:	3b04      	subgt	r3, #4
 8005198:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800519a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800519c:	bfc8      	it	gt
 800519e:	2400      	movgt	r4, #0
 80051a0:	f1a3 0302 	sub.w	r3, r3, #2
 80051a4:	bfd8      	it	le
 80051a6:	2401      	movle	r4, #1
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d864      	bhi.n	8005276 <_dtoa_r+0x29e>
 80051ac:	e8df f003 	tbb	[pc, r3]
 80051b0:	2c385553 	.word	0x2c385553
 80051b4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80051b8:	441e      	add	r6, r3
 80051ba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051be:	2b20      	cmp	r3, #32
 80051c0:	bfc1      	itttt	gt
 80051c2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80051c6:	fa08 f803 	lslgt.w	r8, r8, r3
 80051ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80051ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80051d2:	bfd6      	itet	le
 80051d4:	f1c3 0320 	rsble	r3, r3, #32
 80051d8:	ea48 0003 	orrgt.w	r0, r8, r3
 80051dc:	fa04 f003 	lslle.w	r0, r4, r3
 80051e0:	f7fb f90a 	bl	80003f8 <__aeabi_ui2d>
 80051e4:	2201      	movs	r2, #1
 80051e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80051ea:	3e01      	subs	r6, #1
 80051ec:	9212      	str	r2, [sp, #72]	@ 0x48
 80051ee:	e774      	b.n	80050da <_dtoa_r+0x102>
 80051f0:	2301      	movs	r3, #1
 80051f2:	e7b5      	b.n	8005160 <_dtoa_r+0x188>
 80051f4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80051f6:	e7b4      	b.n	8005162 <_dtoa_r+0x18a>
 80051f8:	9b04      	ldr	r3, [sp, #16]
 80051fa:	1bdb      	subs	r3, r3, r7
 80051fc:	9304      	str	r3, [sp, #16]
 80051fe:	427b      	negs	r3, r7
 8005200:	930a      	str	r3, [sp, #40]	@ 0x28
 8005202:	2300      	movs	r3, #0
 8005204:	930e      	str	r3, [sp, #56]	@ 0x38
 8005206:	e7c1      	b.n	800518c <_dtoa_r+0x1b4>
 8005208:	2301      	movs	r3, #1
 800520a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800520c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800520e:	eb07 0b03 	add.w	fp, r7, r3
 8005212:	f10b 0301 	add.w	r3, fp, #1
 8005216:	2b01      	cmp	r3, #1
 8005218:	9308      	str	r3, [sp, #32]
 800521a:	bfb8      	it	lt
 800521c:	2301      	movlt	r3, #1
 800521e:	e006      	b.n	800522e <_dtoa_r+0x256>
 8005220:	2301      	movs	r3, #1
 8005222:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005224:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005226:	2b00      	cmp	r3, #0
 8005228:	dd28      	ble.n	800527c <_dtoa_r+0x2a4>
 800522a:	469b      	mov	fp, r3
 800522c:	9308      	str	r3, [sp, #32]
 800522e:	2100      	movs	r1, #0
 8005230:	2204      	movs	r2, #4
 8005232:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005236:	f102 0514 	add.w	r5, r2, #20
 800523a:	429d      	cmp	r5, r3
 800523c:	d926      	bls.n	800528c <_dtoa_r+0x2b4>
 800523e:	6041      	str	r1, [r0, #4]
 8005240:	4648      	mov	r0, r9
 8005242:	f000 fd9b 	bl	8005d7c <_Balloc>
 8005246:	4682      	mov	sl, r0
 8005248:	2800      	cmp	r0, #0
 800524a:	d143      	bne.n	80052d4 <_dtoa_r+0x2fc>
 800524c:	4602      	mov	r2, r0
 800524e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005252:	4b1f      	ldr	r3, [pc, #124]	@ (80052d0 <_dtoa_r+0x2f8>)
 8005254:	e6d4      	b.n	8005000 <_dtoa_r+0x28>
 8005256:	2300      	movs	r3, #0
 8005258:	e7e3      	b.n	8005222 <_dtoa_r+0x24a>
 800525a:	2300      	movs	r3, #0
 800525c:	e7d5      	b.n	800520a <_dtoa_r+0x232>
 800525e:	2401      	movs	r4, #1
 8005260:	2300      	movs	r3, #0
 8005262:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005264:	9320      	str	r3, [sp, #128]	@ 0x80
 8005266:	f04f 3bff 	mov.w	fp, #4294967295
 800526a:	2200      	movs	r2, #0
 800526c:	2312      	movs	r3, #18
 800526e:	f8cd b020 	str.w	fp, [sp, #32]
 8005272:	9221      	str	r2, [sp, #132]	@ 0x84
 8005274:	e7db      	b.n	800522e <_dtoa_r+0x256>
 8005276:	2301      	movs	r3, #1
 8005278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800527a:	e7f4      	b.n	8005266 <_dtoa_r+0x28e>
 800527c:	f04f 0b01 	mov.w	fp, #1
 8005280:	465b      	mov	r3, fp
 8005282:	f8cd b020 	str.w	fp, [sp, #32]
 8005286:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800528a:	e7d0      	b.n	800522e <_dtoa_r+0x256>
 800528c:	3101      	adds	r1, #1
 800528e:	0052      	lsls	r2, r2, #1
 8005290:	e7d1      	b.n	8005236 <_dtoa_r+0x25e>
 8005292:	bf00      	nop
 8005294:	f3af 8000 	nop.w
 8005298:	636f4361 	.word	0x636f4361
 800529c:	3fd287a7 	.word	0x3fd287a7
 80052a0:	8b60c8b3 	.word	0x8b60c8b3
 80052a4:	3fc68a28 	.word	0x3fc68a28
 80052a8:	509f79fb 	.word	0x509f79fb
 80052ac:	3fd34413 	.word	0x3fd34413
 80052b0:	0800723c 	.word	0x0800723c
 80052b4:	08007253 	.word	0x08007253
 80052b8:	7ff00000 	.word	0x7ff00000
 80052bc:	08007238 	.word	0x08007238
 80052c0:	0800720c 	.word	0x0800720c
 80052c4:	0800720b 	.word	0x0800720b
 80052c8:	3ff80000 	.word	0x3ff80000
 80052cc:	080073a0 	.word	0x080073a0
 80052d0:	080072ab 	.word	0x080072ab
 80052d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80052d8:	6018      	str	r0, [r3, #0]
 80052da:	9b08      	ldr	r3, [sp, #32]
 80052dc:	2b0e      	cmp	r3, #14
 80052de:	f200 80a1 	bhi.w	8005424 <_dtoa_r+0x44c>
 80052e2:	2c00      	cmp	r4, #0
 80052e4:	f000 809e 	beq.w	8005424 <_dtoa_r+0x44c>
 80052e8:	2f00      	cmp	r7, #0
 80052ea:	dd33      	ble.n	8005354 <_dtoa_r+0x37c>
 80052ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005560 <_dtoa_r+0x588>)
 80052ee:	f007 020f 	and.w	r2, r7, #15
 80052f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052f6:	05f8      	lsls	r0, r7, #23
 80052f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005300:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005304:	d516      	bpl.n	8005334 <_dtoa_r+0x35c>
 8005306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800530a:	4b96      	ldr	r3, [pc, #600]	@ (8005564 <_dtoa_r+0x58c>)
 800530c:	2603      	movs	r6, #3
 800530e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005312:	f7fb fa15 	bl	8000740 <__aeabi_ddiv>
 8005316:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800531a:	f004 040f 	and.w	r4, r4, #15
 800531e:	4d91      	ldr	r5, [pc, #580]	@ (8005564 <_dtoa_r+0x58c>)
 8005320:	b954      	cbnz	r4, 8005338 <_dtoa_r+0x360>
 8005322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800532a:	f7fb fa09 	bl	8000740 <__aeabi_ddiv>
 800532e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005332:	e028      	b.n	8005386 <_dtoa_r+0x3ae>
 8005334:	2602      	movs	r6, #2
 8005336:	e7f2      	b.n	800531e <_dtoa_r+0x346>
 8005338:	07e1      	lsls	r1, r4, #31
 800533a:	d508      	bpl.n	800534e <_dtoa_r+0x376>
 800533c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005340:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005344:	f7fb f8d2 	bl	80004ec <__aeabi_dmul>
 8005348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800534c:	3601      	adds	r6, #1
 800534e:	1064      	asrs	r4, r4, #1
 8005350:	3508      	adds	r5, #8
 8005352:	e7e5      	b.n	8005320 <_dtoa_r+0x348>
 8005354:	f000 80af 	beq.w	80054b6 <_dtoa_r+0x4de>
 8005358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800535c:	427c      	negs	r4, r7
 800535e:	4b80      	ldr	r3, [pc, #512]	@ (8005560 <_dtoa_r+0x588>)
 8005360:	f004 020f 	and.w	r2, r4, #15
 8005364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f7fb f8be 	bl	80004ec <__aeabi_dmul>
 8005370:	2602      	movs	r6, #2
 8005372:	2300      	movs	r3, #0
 8005374:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005378:	4d7a      	ldr	r5, [pc, #488]	@ (8005564 <_dtoa_r+0x58c>)
 800537a:	1124      	asrs	r4, r4, #4
 800537c:	2c00      	cmp	r4, #0
 800537e:	f040 808f 	bne.w	80054a0 <_dtoa_r+0x4c8>
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1d3      	bne.n	800532e <_dtoa_r+0x356>
 8005386:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800538a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8094 	beq.w	80054ba <_dtoa_r+0x4e2>
 8005392:	2200      	movs	r2, #0
 8005394:	4620      	mov	r0, r4
 8005396:	4629      	mov	r1, r5
 8005398:	4b73      	ldr	r3, [pc, #460]	@ (8005568 <_dtoa_r+0x590>)
 800539a:	f7fb fb19 	bl	80009d0 <__aeabi_dcmplt>
 800539e:	2800      	cmp	r0, #0
 80053a0:	f000 808b 	beq.w	80054ba <_dtoa_r+0x4e2>
 80053a4:	9b08      	ldr	r3, [sp, #32]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 8087 	beq.w	80054ba <_dtoa_r+0x4e2>
 80053ac:	f1bb 0f00 	cmp.w	fp, #0
 80053b0:	dd34      	ble.n	800541c <_dtoa_r+0x444>
 80053b2:	4620      	mov	r0, r4
 80053b4:	2200      	movs	r2, #0
 80053b6:	4629      	mov	r1, r5
 80053b8:	4b6c      	ldr	r3, [pc, #432]	@ (800556c <_dtoa_r+0x594>)
 80053ba:	f7fb f897 	bl	80004ec <__aeabi_dmul>
 80053be:	465c      	mov	r4, fp
 80053c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053c4:	f107 38ff 	add.w	r8, r7, #4294967295
 80053c8:	3601      	adds	r6, #1
 80053ca:	4630      	mov	r0, r6
 80053cc:	f7fb f824 	bl	8000418 <__aeabi_i2d>
 80053d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053d4:	f7fb f88a 	bl	80004ec <__aeabi_dmul>
 80053d8:	2200      	movs	r2, #0
 80053da:	4b65      	ldr	r3, [pc, #404]	@ (8005570 <_dtoa_r+0x598>)
 80053dc:	f7fa fed0 	bl	8000180 <__adddf3>
 80053e0:	4605      	mov	r5, r0
 80053e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80053e6:	2c00      	cmp	r4, #0
 80053e8:	d16a      	bne.n	80054c0 <_dtoa_r+0x4e8>
 80053ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ee:	2200      	movs	r2, #0
 80053f0:	4b60      	ldr	r3, [pc, #384]	@ (8005574 <_dtoa_r+0x59c>)
 80053f2:	f7fa fec3 	bl	800017c <__aeabi_dsub>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80053fe:	462a      	mov	r2, r5
 8005400:	4633      	mov	r3, r6
 8005402:	f7fb fb03 	bl	8000a0c <__aeabi_dcmpgt>
 8005406:	2800      	cmp	r0, #0
 8005408:	f040 8298 	bne.w	800593c <_dtoa_r+0x964>
 800540c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005410:	462a      	mov	r2, r5
 8005412:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005416:	f7fb fadb 	bl	80009d0 <__aeabi_dcmplt>
 800541a:	bb38      	cbnz	r0, 800546c <_dtoa_r+0x494>
 800541c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005420:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005424:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005426:	2b00      	cmp	r3, #0
 8005428:	f2c0 8157 	blt.w	80056da <_dtoa_r+0x702>
 800542c:	2f0e      	cmp	r7, #14
 800542e:	f300 8154 	bgt.w	80056da <_dtoa_r+0x702>
 8005432:	4b4b      	ldr	r3, [pc, #300]	@ (8005560 <_dtoa_r+0x588>)
 8005434:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005438:	e9d3 3400 	ldrd	r3, r4, [r3]
 800543c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005440:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005442:	2b00      	cmp	r3, #0
 8005444:	f280 80e5 	bge.w	8005612 <_dtoa_r+0x63a>
 8005448:	9b08      	ldr	r3, [sp, #32]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f300 80e1 	bgt.w	8005612 <_dtoa_r+0x63a>
 8005450:	d10c      	bne.n	800546c <_dtoa_r+0x494>
 8005452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005456:	2200      	movs	r2, #0
 8005458:	4b46      	ldr	r3, [pc, #280]	@ (8005574 <_dtoa_r+0x59c>)
 800545a:	f7fb f847 	bl	80004ec <__aeabi_dmul>
 800545e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005462:	f7fb fac9 	bl	80009f8 <__aeabi_dcmpge>
 8005466:	2800      	cmp	r0, #0
 8005468:	f000 8266 	beq.w	8005938 <_dtoa_r+0x960>
 800546c:	2400      	movs	r4, #0
 800546e:	4625      	mov	r5, r4
 8005470:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005472:	4656      	mov	r6, sl
 8005474:	ea6f 0803 	mvn.w	r8, r3
 8005478:	2700      	movs	r7, #0
 800547a:	4621      	mov	r1, r4
 800547c:	4648      	mov	r0, r9
 800547e:	f000 fcbd 	bl	8005dfc <_Bfree>
 8005482:	2d00      	cmp	r5, #0
 8005484:	f000 80bd 	beq.w	8005602 <_dtoa_r+0x62a>
 8005488:	b12f      	cbz	r7, 8005496 <_dtoa_r+0x4be>
 800548a:	42af      	cmp	r7, r5
 800548c:	d003      	beq.n	8005496 <_dtoa_r+0x4be>
 800548e:	4639      	mov	r1, r7
 8005490:	4648      	mov	r0, r9
 8005492:	f000 fcb3 	bl	8005dfc <_Bfree>
 8005496:	4629      	mov	r1, r5
 8005498:	4648      	mov	r0, r9
 800549a:	f000 fcaf 	bl	8005dfc <_Bfree>
 800549e:	e0b0      	b.n	8005602 <_dtoa_r+0x62a>
 80054a0:	07e2      	lsls	r2, r4, #31
 80054a2:	d505      	bpl.n	80054b0 <_dtoa_r+0x4d8>
 80054a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054a8:	f7fb f820 	bl	80004ec <__aeabi_dmul>
 80054ac:	2301      	movs	r3, #1
 80054ae:	3601      	adds	r6, #1
 80054b0:	1064      	asrs	r4, r4, #1
 80054b2:	3508      	adds	r5, #8
 80054b4:	e762      	b.n	800537c <_dtoa_r+0x3a4>
 80054b6:	2602      	movs	r6, #2
 80054b8:	e765      	b.n	8005386 <_dtoa_r+0x3ae>
 80054ba:	46b8      	mov	r8, r7
 80054bc:	9c08      	ldr	r4, [sp, #32]
 80054be:	e784      	b.n	80053ca <_dtoa_r+0x3f2>
 80054c0:	4b27      	ldr	r3, [pc, #156]	@ (8005560 <_dtoa_r+0x588>)
 80054c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054cc:	4454      	add	r4, sl
 80054ce:	2900      	cmp	r1, #0
 80054d0:	d054      	beq.n	800557c <_dtoa_r+0x5a4>
 80054d2:	2000      	movs	r0, #0
 80054d4:	4928      	ldr	r1, [pc, #160]	@ (8005578 <_dtoa_r+0x5a0>)
 80054d6:	f7fb f933 	bl	8000740 <__aeabi_ddiv>
 80054da:	4633      	mov	r3, r6
 80054dc:	462a      	mov	r2, r5
 80054de:	f7fa fe4d 	bl	800017c <__aeabi_dsub>
 80054e2:	4656      	mov	r6, sl
 80054e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ec:	f7fb faae 	bl	8000a4c <__aeabi_d2iz>
 80054f0:	4605      	mov	r5, r0
 80054f2:	f7fa ff91 	bl	8000418 <__aeabi_i2d>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054fe:	f7fa fe3d 	bl	800017c <__aeabi_dsub>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	3530      	adds	r5, #48	@ 0x30
 8005508:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800550c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005510:	f806 5b01 	strb.w	r5, [r6], #1
 8005514:	f7fb fa5c 	bl	80009d0 <__aeabi_dcmplt>
 8005518:	2800      	cmp	r0, #0
 800551a:	d172      	bne.n	8005602 <_dtoa_r+0x62a>
 800551c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005520:	2000      	movs	r0, #0
 8005522:	4911      	ldr	r1, [pc, #68]	@ (8005568 <_dtoa_r+0x590>)
 8005524:	f7fa fe2a 	bl	800017c <__aeabi_dsub>
 8005528:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800552c:	f7fb fa50 	bl	80009d0 <__aeabi_dcmplt>
 8005530:	2800      	cmp	r0, #0
 8005532:	f040 80b4 	bne.w	800569e <_dtoa_r+0x6c6>
 8005536:	42a6      	cmp	r6, r4
 8005538:	f43f af70 	beq.w	800541c <_dtoa_r+0x444>
 800553c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005540:	2200      	movs	r2, #0
 8005542:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <_dtoa_r+0x594>)
 8005544:	f7fa ffd2 	bl	80004ec <__aeabi_dmul>
 8005548:	2200      	movs	r2, #0
 800554a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800554e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005552:	4b06      	ldr	r3, [pc, #24]	@ (800556c <_dtoa_r+0x594>)
 8005554:	f7fa ffca 	bl	80004ec <__aeabi_dmul>
 8005558:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800555c:	e7c4      	b.n	80054e8 <_dtoa_r+0x510>
 800555e:	bf00      	nop
 8005560:	080073a0 	.word	0x080073a0
 8005564:	08007378 	.word	0x08007378
 8005568:	3ff00000 	.word	0x3ff00000
 800556c:	40240000 	.word	0x40240000
 8005570:	401c0000 	.word	0x401c0000
 8005574:	40140000 	.word	0x40140000
 8005578:	3fe00000 	.word	0x3fe00000
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	f7fa ffb4 	bl	80004ec <__aeabi_dmul>
 8005584:	4656      	mov	r6, sl
 8005586:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800558a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800558c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005590:	f7fb fa5c 	bl	8000a4c <__aeabi_d2iz>
 8005594:	4605      	mov	r5, r0
 8005596:	f7fa ff3f 	bl	8000418 <__aeabi_i2d>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055a2:	f7fa fdeb 	bl	800017c <__aeabi_dsub>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	3530      	adds	r5, #48	@ 0x30
 80055ac:	f806 5b01 	strb.w	r5, [r6], #1
 80055b0:	42a6      	cmp	r6, r4
 80055b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	d124      	bne.n	8005606 <_dtoa_r+0x62e>
 80055bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055c0:	4bae      	ldr	r3, [pc, #696]	@ (800587c <_dtoa_r+0x8a4>)
 80055c2:	f7fa fddd 	bl	8000180 <__adddf3>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ce:	f7fb fa1d 	bl	8000a0c <__aeabi_dcmpgt>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d163      	bne.n	800569e <_dtoa_r+0x6c6>
 80055d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055da:	2000      	movs	r0, #0
 80055dc:	49a7      	ldr	r1, [pc, #668]	@ (800587c <_dtoa_r+0x8a4>)
 80055de:	f7fa fdcd 	bl	800017c <__aeabi_dsub>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ea:	f7fb f9f1 	bl	80009d0 <__aeabi_dcmplt>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	f43f af14 	beq.w	800541c <_dtoa_r+0x444>
 80055f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80055f6:	1e73      	subs	r3, r6, #1
 80055f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80055fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055fe:	2b30      	cmp	r3, #48	@ 0x30
 8005600:	d0f8      	beq.n	80055f4 <_dtoa_r+0x61c>
 8005602:	4647      	mov	r7, r8
 8005604:	e03b      	b.n	800567e <_dtoa_r+0x6a6>
 8005606:	4b9e      	ldr	r3, [pc, #632]	@ (8005880 <_dtoa_r+0x8a8>)
 8005608:	f7fa ff70 	bl	80004ec <__aeabi_dmul>
 800560c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005610:	e7bc      	b.n	800558c <_dtoa_r+0x5b4>
 8005612:	4656      	mov	r6, sl
 8005614:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800561c:	4620      	mov	r0, r4
 800561e:	4629      	mov	r1, r5
 8005620:	f7fb f88e 	bl	8000740 <__aeabi_ddiv>
 8005624:	f7fb fa12 	bl	8000a4c <__aeabi_d2iz>
 8005628:	4680      	mov	r8, r0
 800562a:	f7fa fef5 	bl	8000418 <__aeabi_i2d>
 800562e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005632:	f7fa ff5b 	bl	80004ec <__aeabi_dmul>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4620      	mov	r0, r4
 800563c:	4629      	mov	r1, r5
 800563e:	f7fa fd9d 	bl	800017c <__aeabi_dsub>
 8005642:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005646:	9d08      	ldr	r5, [sp, #32]
 8005648:	f806 4b01 	strb.w	r4, [r6], #1
 800564c:	eba6 040a 	sub.w	r4, r6, sl
 8005650:	42a5      	cmp	r5, r4
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	d133      	bne.n	80056c0 <_dtoa_r+0x6e8>
 8005658:	f7fa fd92 	bl	8000180 <__adddf3>
 800565c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005660:	4604      	mov	r4, r0
 8005662:	460d      	mov	r5, r1
 8005664:	f7fb f9d2 	bl	8000a0c <__aeabi_dcmpgt>
 8005668:	b9c0      	cbnz	r0, 800569c <_dtoa_r+0x6c4>
 800566a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800566e:	4620      	mov	r0, r4
 8005670:	4629      	mov	r1, r5
 8005672:	f7fb f9a3 	bl	80009bc <__aeabi_dcmpeq>
 8005676:	b110      	cbz	r0, 800567e <_dtoa_r+0x6a6>
 8005678:	f018 0f01 	tst.w	r8, #1
 800567c:	d10e      	bne.n	800569c <_dtoa_r+0x6c4>
 800567e:	4648      	mov	r0, r9
 8005680:	9903      	ldr	r1, [sp, #12]
 8005682:	f000 fbbb 	bl	8005dfc <_Bfree>
 8005686:	2300      	movs	r3, #0
 8005688:	7033      	strb	r3, [r6, #0]
 800568a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800568c:	3701      	adds	r7, #1
 800568e:	601f      	str	r7, [r3, #0]
 8005690:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 824b 	beq.w	8005b2e <_dtoa_r+0xb56>
 8005698:	601e      	str	r6, [r3, #0]
 800569a:	e248      	b.n	8005b2e <_dtoa_r+0xb56>
 800569c:	46b8      	mov	r8, r7
 800569e:	4633      	mov	r3, r6
 80056a0:	461e      	mov	r6, r3
 80056a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056a6:	2a39      	cmp	r2, #57	@ 0x39
 80056a8:	d106      	bne.n	80056b8 <_dtoa_r+0x6e0>
 80056aa:	459a      	cmp	sl, r3
 80056ac:	d1f8      	bne.n	80056a0 <_dtoa_r+0x6c8>
 80056ae:	2230      	movs	r2, #48	@ 0x30
 80056b0:	f108 0801 	add.w	r8, r8, #1
 80056b4:	f88a 2000 	strb.w	r2, [sl]
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	3201      	adds	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	e7a0      	b.n	8005602 <_dtoa_r+0x62a>
 80056c0:	2200      	movs	r2, #0
 80056c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005880 <_dtoa_r+0x8a8>)
 80056c4:	f7fa ff12 	bl	80004ec <__aeabi_dmul>
 80056c8:	2200      	movs	r2, #0
 80056ca:	2300      	movs	r3, #0
 80056cc:	4604      	mov	r4, r0
 80056ce:	460d      	mov	r5, r1
 80056d0:	f7fb f974 	bl	80009bc <__aeabi_dcmpeq>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d09f      	beq.n	8005618 <_dtoa_r+0x640>
 80056d8:	e7d1      	b.n	800567e <_dtoa_r+0x6a6>
 80056da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80056dc:	2a00      	cmp	r2, #0
 80056de:	f000 80ea 	beq.w	80058b6 <_dtoa_r+0x8de>
 80056e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80056e4:	2a01      	cmp	r2, #1
 80056e6:	f300 80cd 	bgt.w	8005884 <_dtoa_r+0x8ac>
 80056ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	f000 80c1 	beq.w	8005874 <_dtoa_r+0x89c>
 80056f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80056f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056f8:	9e04      	ldr	r6, [sp, #16]
 80056fa:	9a04      	ldr	r2, [sp, #16]
 80056fc:	2101      	movs	r1, #1
 80056fe:	441a      	add	r2, r3
 8005700:	9204      	str	r2, [sp, #16]
 8005702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005704:	4648      	mov	r0, r9
 8005706:	441a      	add	r2, r3
 8005708:	9209      	str	r2, [sp, #36]	@ 0x24
 800570a:	f000 fc2b 	bl	8005f64 <__i2b>
 800570e:	4605      	mov	r5, r0
 8005710:	b166      	cbz	r6, 800572c <_dtoa_r+0x754>
 8005712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	dd09      	ble.n	800572c <_dtoa_r+0x754>
 8005718:	42b3      	cmp	r3, r6
 800571a:	bfa8      	it	ge
 800571c:	4633      	movge	r3, r6
 800571e:	9a04      	ldr	r2, [sp, #16]
 8005720:	1af6      	subs	r6, r6, r3
 8005722:	1ad2      	subs	r2, r2, r3
 8005724:	9204      	str	r2, [sp, #16]
 8005726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	9309      	str	r3, [sp, #36]	@ 0x24
 800572c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800572e:	b30b      	cbz	r3, 8005774 <_dtoa_r+0x79c>
 8005730:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80c6 	beq.w	80058c4 <_dtoa_r+0x8ec>
 8005738:	2c00      	cmp	r4, #0
 800573a:	f000 80c0 	beq.w	80058be <_dtoa_r+0x8e6>
 800573e:	4629      	mov	r1, r5
 8005740:	4622      	mov	r2, r4
 8005742:	4648      	mov	r0, r9
 8005744:	f000 fcc6 	bl	80060d4 <__pow5mult>
 8005748:	9a03      	ldr	r2, [sp, #12]
 800574a:	4601      	mov	r1, r0
 800574c:	4605      	mov	r5, r0
 800574e:	4648      	mov	r0, r9
 8005750:	f000 fc1e 	bl	8005f90 <__multiply>
 8005754:	9903      	ldr	r1, [sp, #12]
 8005756:	4680      	mov	r8, r0
 8005758:	4648      	mov	r0, r9
 800575a:	f000 fb4f 	bl	8005dfc <_Bfree>
 800575e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005760:	1b1b      	subs	r3, r3, r4
 8005762:	930a      	str	r3, [sp, #40]	@ 0x28
 8005764:	f000 80b1 	beq.w	80058ca <_dtoa_r+0x8f2>
 8005768:	4641      	mov	r1, r8
 800576a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800576c:	4648      	mov	r0, r9
 800576e:	f000 fcb1 	bl	80060d4 <__pow5mult>
 8005772:	9003      	str	r0, [sp, #12]
 8005774:	2101      	movs	r1, #1
 8005776:	4648      	mov	r0, r9
 8005778:	f000 fbf4 	bl	8005f64 <__i2b>
 800577c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800577e:	4604      	mov	r4, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 81d8 	beq.w	8005b36 <_dtoa_r+0xb5e>
 8005786:	461a      	mov	r2, r3
 8005788:	4601      	mov	r1, r0
 800578a:	4648      	mov	r0, r9
 800578c:	f000 fca2 	bl	80060d4 <__pow5mult>
 8005790:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005792:	4604      	mov	r4, r0
 8005794:	2b01      	cmp	r3, #1
 8005796:	f300 809f 	bgt.w	80058d8 <_dtoa_r+0x900>
 800579a:	9b06      	ldr	r3, [sp, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	f040 8097 	bne.w	80058d0 <_dtoa_r+0x8f8>
 80057a2:	9b07      	ldr	r3, [sp, #28]
 80057a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f040 8093 	bne.w	80058d4 <_dtoa_r+0x8fc>
 80057ae:	9b07      	ldr	r3, [sp, #28]
 80057b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057b4:	0d1b      	lsrs	r3, r3, #20
 80057b6:	051b      	lsls	r3, r3, #20
 80057b8:	b133      	cbz	r3, 80057c8 <_dtoa_r+0x7f0>
 80057ba:	9b04      	ldr	r3, [sp, #16]
 80057bc:	3301      	adds	r3, #1
 80057be:	9304      	str	r3, [sp, #16]
 80057c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c2:	3301      	adds	r3, #1
 80057c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80057c6:	2301      	movs	r3, #1
 80057c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80057ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 81b8 	beq.w	8005b42 <_dtoa_r+0xb6a>
 80057d2:	6923      	ldr	r3, [r4, #16]
 80057d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057d8:	6918      	ldr	r0, [r3, #16]
 80057da:	f000 fb77 	bl	8005ecc <__hi0bits>
 80057de:	f1c0 0020 	rsb	r0, r0, #32
 80057e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e4:	4418      	add	r0, r3
 80057e6:	f010 001f 	ands.w	r0, r0, #31
 80057ea:	f000 8082 	beq.w	80058f2 <_dtoa_r+0x91a>
 80057ee:	f1c0 0320 	rsb	r3, r0, #32
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	dd73      	ble.n	80058de <_dtoa_r+0x906>
 80057f6:	9b04      	ldr	r3, [sp, #16]
 80057f8:	f1c0 001c 	rsb	r0, r0, #28
 80057fc:	4403      	add	r3, r0
 80057fe:	9304      	str	r3, [sp, #16]
 8005800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005802:	4406      	add	r6, r0
 8005804:	4403      	add	r3, r0
 8005806:	9309      	str	r3, [sp, #36]	@ 0x24
 8005808:	9b04      	ldr	r3, [sp, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	dd05      	ble.n	800581a <_dtoa_r+0x842>
 800580e:	461a      	mov	r2, r3
 8005810:	4648      	mov	r0, r9
 8005812:	9903      	ldr	r1, [sp, #12]
 8005814:	f000 fcb8 	bl	8006188 <__lshift>
 8005818:	9003      	str	r0, [sp, #12]
 800581a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	dd05      	ble.n	800582c <_dtoa_r+0x854>
 8005820:	4621      	mov	r1, r4
 8005822:	461a      	mov	r2, r3
 8005824:	4648      	mov	r0, r9
 8005826:	f000 fcaf 	bl	8006188 <__lshift>
 800582a:	4604      	mov	r4, r0
 800582c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d061      	beq.n	80058f6 <_dtoa_r+0x91e>
 8005832:	4621      	mov	r1, r4
 8005834:	9803      	ldr	r0, [sp, #12]
 8005836:	f000 fd13 	bl	8006260 <__mcmp>
 800583a:	2800      	cmp	r0, #0
 800583c:	da5b      	bge.n	80058f6 <_dtoa_r+0x91e>
 800583e:	2300      	movs	r3, #0
 8005840:	220a      	movs	r2, #10
 8005842:	4648      	mov	r0, r9
 8005844:	9903      	ldr	r1, [sp, #12]
 8005846:	f000 fafb 	bl	8005e40 <__multadd>
 800584a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800584c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005850:	9003      	str	r0, [sp, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8177 	beq.w	8005b46 <_dtoa_r+0xb6e>
 8005858:	4629      	mov	r1, r5
 800585a:	2300      	movs	r3, #0
 800585c:	220a      	movs	r2, #10
 800585e:	4648      	mov	r0, r9
 8005860:	f000 faee 	bl	8005e40 <__multadd>
 8005864:	f1bb 0f00 	cmp.w	fp, #0
 8005868:	4605      	mov	r5, r0
 800586a:	dc6f      	bgt.n	800594c <_dtoa_r+0x974>
 800586c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800586e:	2b02      	cmp	r3, #2
 8005870:	dc49      	bgt.n	8005906 <_dtoa_r+0x92e>
 8005872:	e06b      	b.n	800594c <_dtoa_r+0x974>
 8005874:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005876:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800587a:	e73c      	b.n	80056f6 <_dtoa_r+0x71e>
 800587c:	3fe00000 	.word	0x3fe00000
 8005880:	40240000 	.word	0x40240000
 8005884:	9b08      	ldr	r3, [sp, #32]
 8005886:	1e5c      	subs	r4, r3, #1
 8005888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800588a:	42a3      	cmp	r3, r4
 800588c:	db09      	blt.n	80058a2 <_dtoa_r+0x8ca>
 800588e:	1b1c      	subs	r4, r3, r4
 8005890:	9b08      	ldr	r3, [sp, #32]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f6bf af30 	bge.w	80056f8 <_dtoa_r+0x720>
 8005898:	9b04      	ldr	r3, [sp, #16]
 800589a:	9a08      	ldr	r2, [sp, #32]
 800589c:	1a9e      	subs	r6, r3, r2
 800589e:	2300      	movs	r3, #0
 80058a0:	e72b      	b.n	80056fa <_dtoa_r+0x722>
 80058a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058a6:	1ae3      	subs	r3, r4, r3
 80058a8:	441a      	add	r2, r3
 80058aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80058ac:	9e04      	ldr	r6, [sp, #16]
 80058ae:	2400      	movs	r4, #0
 80058b0:	9b08      	ldr	r3, [sp, #32]
 80058b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80058b4:	e721      	b.n	80056fa <_dtoa_r+0x722>
 80058b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80058b8:	9e04      	ldr	r6, [sp, #16]
 80058ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80058bc:	e728      	b.n	8005710 <_dtoa_r+0x738>
 80058be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80058c2:	e751      	b.n	8005768 <_dtoa_r+0x790>
 80058c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058c6:	9903      	ldr	r1, [sp, #12]
 80058c8:	e750      	b.n	800576c <_dtoa_r+0x794>
 80058ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ce:	e751      	b.n	8005774 <_dtoa_r+0x79c>
 80058d0:	2300      	movs	r3, #0
 80058d2:	e779      	b.n	80057c8 <_dtoa_r+0x7f0>
 80058d4:	9b06      	ldr	r3, [sp, #24]
 80058d6:	e777      	b.n	80057c8 <_dtoa_r+0x7f0>
 80058d8:	2300      	movs	r3, #0
 80058da:	930a      	str	r3, [sp, #40]	@ 0x28
 80058dc:	e779      	b.n	80057d2 <_dtoa_r+0x7fa>
 80058de:	d093      	beq.n	8005808 <_dtoa_r+0x830>
 80058e0:	9a04      	ldr	r2, [sp, #16]
 80058e2:	331c      	adds	r3, #28
 80058e4:	441a      	add	r2, r3
 80058e6:	9204      	str	r2, [sp, #16]
 80058e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058ea:	441e      	add	r6, r3
 80058ec:	441a      	add	r2, r3
 80058ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80058f0:	e78a      	b.n	8005808 <_dtoa_r+0x830>
 80058f2:	4603      	mov	r3, r0
 80058f4:	e7f4      	b.n	80058e0 <_dtoa_r+0x908>
 80058f6:	9b08      	ldr	r3, [sp, #32]
 80058f8:	46b8      	mov	r8, r7
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	dc20      	bgt.n	8005940 <_dtoa_r+0x968>
 80058fe:	469b      	mov	fp, r3
 8005900:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005902:	2b02      	cmp	r3, #2
 8005904:	dd1e      	ble.n	8005944 <_dtoa_r+0x96c>
 8005906:	f1bb 0f00 	cmp.w	fp, #0
 800590a:	f47f adb1 	bne.w	8005470 <_dtoa_r+0x498>
 800590e:	4621      	mov	r1, r4
 8005910:	465b      	mov	r3, fp
 8005912:	2205      	movs	r2, #5
 8005914:	4648      	mov	r0, r9
 8005916:	f000 fa93 	bl	8005e40 <__multadd>
 800591a:	4601      	mov	r1, r0
 800591c:	4604      	mov	r4, r0
 800591e:	9803      	ldr	r0, [sp, #12]
 8005920:	f000 fc9e 	bl	8006260 <__mcmp>
 8005924:	2800      	cmp	r0, #0
 8005926:	f77f ada3 	ble.w	8005470 <_dtoa_r+0x498>
 800592a:	4656      	mov	r6, sl
 800592c:	2331      	movs	r3, #49	@ 0x31
 800592e:	f108 0801 	add.w	r8, r8, #1
 8005932:	f806 3b01 	strb.w	r3, [r6], #1
 8005936:	e59f      	b.n	8005478 <_dtoa_r+0x4a0>
 8005938:	46b8      	mov	r8, r7
 800593a:	9c08      	ldr	r4, [sp, #32]
 800593c:	4625      	mov	r5, r4
 800593e:	e7f4      	b.n	800592a <_dtoa_r+0x952>
 8005940:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 8101 	beq.w	8005b4e <_dtoa_r+0xb76>
 800594c:	2e00      	cmp	r6, #0
 800594e:	dd05      	ble.n	800595c <_dtoa_r+0x984>
 8005950:	4629      	mov	r1, r5
 8005952:	4632      	mov	r2, r6
 8005954:	4648      	mov	r0, r9
 8005956:	f000 fc17 	bl	8006188 <__lshift>
 800595a:	4605      	mov	r5, r0
 800595c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d05c      	beq.n	8005a1c <_dtoa_r+0xa44>
 8005962:	4648      	mov	r0, r9
 8005964:	6869      	ldr	r1, [r5, #4]
 8005966:	f000 fa09 	bl	8005d7c <_Balloc>
 800596a:	4606      	mov	r6, r0
 800596c:	b928      	cbnz	r0, 800597a <_dtoa_r+0x9a2>
 800596e:	4602      	mov	r2, r0
 8005970:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005974:	4b80      	ldr	r3, [pc, #512]	@ (8005b78 <_dtoa_r+0xba0>)
 8005976:	f7ff bb43 	b.w	8005000 <_dtoa_r+0x28>
 800597a:	692a      	ldr	r2, [r5, #16]
 800597c:	f105 010c 	add.w	r1, r5, #12
 8005980:	3202      	adds	r2, #2
 8005982:	0092      	lsls	r2, r2, #2
 8005984:	300c      	adds	r0, #12
 8005986:	f000 ff9d 	bl	80068c4 <memcpy>
 800598a:	2201      	movs	r2, #1
 800598c:	4631      	mov	r1, r6
 800598e:	4648      	mov	r0, r9
 8005990:	f000 fbfa 	bl	8006188 <__lshift>
 8005994:	462f      	mov	r7, r5
 8005996:	4605      	mov	r5, r0
 8005998:	f10a 0301 	add.w	r3, sl, #1
 800599c:	9304      	str	r3, [sp, #16]
 800599e:	eb0a 030b 	add.w	r3, sl, fp
 80059a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80059a4:	9b06      	ldr	r3, [sp, #24]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ac:	9b04      	ldr	r3, [sp, #16]
 80059ae:	4621      	mov	r1, r4
 80059b0:	9803      	ldr	r0, [sp, #12]
 80059b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80059b6:	f7ff fa86 	bl	8004ec6 <quorem>
 80059ba:	4603      	mov	r3, r0
 80059bc:	4639      	mov	r1, r7
 80059be:	3330      	adds	r3, #48	@ 0x30
 80059c0:	9006      	str	r0, [sp, #24]
 80059c2:	9803      	ldr	r0, [sp, #12]
 80059c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059c6:	f000 fc4b 	bl	8006260 <__mcmp>
 80059ca:	462a      	mov	r2, r5
 80059cc:	9008      	str	r0, [sp, #32]
 80059ce:	4621      	mov	r1, r4
 80059d0:	4648      	mov	r0, r9
 80059d2:	f000 fc61 	bl	8006298 <__mdiff>
 80059d6:	68c2      	ldr	r2, [r0, #12]
 80059d8:	4606      	mov	r6, r0
 80059da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059dc:	bb02      	cbnz	r2, 8005a20 <_dtoa_r+0xa48>
 80059de:	4601      	mov	r1, r0
 80059e0:	9803      	ldr	r0, [sp, #12]
 80059e2:	f000 fc3d 	bl	8006260 <__mcmp>
 80059e6:	4602      	mov	r2, r0
 80059e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059ea:	4631      	mov	r1, r6
 80059ec:	4648      	mov	r0, r9
 80059ee:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80059f2:	f000 fa03 	bl	8005dfc <_Bfree>
 80059f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059fa:	9e04      	ldr	r6, [sp, #16]
 80059fc:	ea42 0103 	orr.w	r1, r2, r3
 8005a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a02:	4319      	orrs	r1, r3
 8005a04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a06:	d10d      	bne.n	8005a24 <_dtoa_r+0xa4c>
 8005a08:	2b39      	cmp	r3, #57	@ 0x39
 8005a0a:	d027      	beq.n	8005a5c <_dtoa_r+0xa84>
 8005a0c:	9a08      	ldr	r2, [sp, #32]
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	dd01      	ble.n	8005a16 <_dtoa_r+0xa3e>
 8005a12:	9b06      	ldr	r3, [sp, #24]
 8005a14:	3331      	adds	r3, #49	@ 0x31
 8005a16:	f88b 3000 	strb.w	r3, [fp]
 8005a1a:	e52e      	b.n	800547a <_dtoa_r+0x4a2>
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	e7b9      	b.n	8005994 <_dtoa_r+0x9bc>
 8005a20:	2201      	movs	r2, #1
 8005a22:	e7e2      	b.n	80059ea <_dtoa_r+0xa12>
 8005a24:	9908      	ldr	r1, [sp, #32]
 8005a26:	2900      	cmp	r1, #0
 8005a28:	db04      	blt.n	8005a34 <_dtoa_r+0xa5c>
 8005a2a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005a2c:	4301      	orrs	r1, r0
 8005a2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a30:	4301      	orrs	r1, r0
 8005a32:	d120      	bne.n	8005a76 <_dtoa_r+0xa9e>
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	ddee      	ble.n	8005a16 <_dtoa_r+0xa3e>
 8005a38:	2201      	movs	r2, #1
 8005a3a:	9903      	ldr	r1, [sp, #12]
 8005a3c:	4648      	mov	r0, r9
 8005a3e:	9304      	str	r3, [sp, #16]
 8005a40:	f000 fba2 	bl	8006188 <__lshift>
 8005a44:	4621      	mov	r1, r4
 8005a46:	9003      	str	r0, [sp, #12]
 8005a48:	f000 fc0a 	bl	8006260 <__mcmp>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	9b04      	ldr	r3, [sp, #16]
 8005a50:	dc02      	bgt.n	8005a58 <_dtoa_r+0xa80>
 8005a52:	d1e0      	bne.n	8005a16 <_dtoa_r+0xa3e>
 8005a54:	07da      	lsls	r2, r3, #31
 8005a56:	d5de      	bpl.n	8005a16 <_dtoa_r+0xa3e>
 8005a58:	2b39      	cmp	r3, #57	@ 0x39
 8005a5a:	d1da      	bne.n	8005a12 <_dtoa_r+0xa3a>
 8005a5c:	2339      	movs	r3, #57	@ 0x39
 8005a5e:	f88b 3000 	strb.w	r3, [fp]
 8005a62:	4633      	mov	r3, r6
 8005a64:	461e      	mov	r6, r3
 8005a66:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	2a39      	cmp	r2, #57	@ 0x39
 8005a6e:	d04e      	beq.n	8005b0e <_dtoa_r+0xb36>
 8005a70:	3201      	adds	r2, #1
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	e501      	b.n	800547a <_dtoa_r+0x4a2>
 8005a76:	2a00      	cmp	r2, #0
 8005a78:	dd03      	ble.n	8005a82 <_dtoa_r+0xaaa>
 8005a7a:	2b39      	cmp	r3, #57	@ 0x39
 8005a7c:	d0ee      	beq.n	8005a5c <_dtoa_r+0xa84>
 8005a7e:	3301      	adds	r3, #1
 8005a80:	e7c9      	b.n	8005a16 <_dtoa_r+0xa3e>
 8005a82:	9a04      	ldr	r2, [sp, #16]
 8005a84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a8a:	428a      	cmp	r2, r1
 8005a8c:	d028      	beq.n	8005ae0 <_dtoa_r+0xb08>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	220a      	movs	r2, #10
 8005a92:	9903      	ldr	r1, [sp, #12]
 8005a94:	4648      	mov	r0, r9
 8005a96:	f000 f9d3 	bl	8005e40 <__multadd>
 8005a9a:	42af      	cmp	r7, r5
 8005a9c:	9003      	str	r0, [sp, #12]
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	f04f 020a 	mov.w	r2, #10
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	4648      	mov	r0, r9
 8005aaa:	d107      	bne.n	8005abc <_dtoa_r+0xae4>
 8005aac:	f000 f9c8 	bl	8005e40 <__multadd>
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	9304      	str	r3, [sp, #16]
 8005aba:	e777      	b.n	80059ac <_dtoa_r+0x9d4>
 8005abc:	f000 f9c0 	bl	8005e40 <__multadd>
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4607      	mov	r7, r0
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	220a      	movs	r2, #10
 8005ac8:	4648      	mov	r0, r9
 8005aca:	f000 f9b9 	bl	8005e40 <__multadd>
 8005ace:	4605      	mov	r5, r0
 8005ad0:	e7f0      	b.n	8005ab4 <_dtoa_r+0xadc>
 8005ad2:	f1bb 0f00 	cmp.w	fp, #0
 8005ad6:	bfcc      	ite	gt
 8005ad8:	465e      	movgt	r6, fp
 8005ada:	2601      	movle	r6, #1
 8005adc:	2700      	movs	r7, #0
 8005ade:	4456      	add	r6, sl
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	9903      	ldr	r1, [sp, #12]
 8005ae4:	4648      	mov	r0, r9
 8005ae6:	9304      	str	r3, [sp, #16]
 8005ae8:	f000 fb4e 	bl	8006188 <__lshift>
 8005aec:	4621      	mov	r1, r4
 8005aee:	9003      	str	r0, [sp, #12]
 8005af0:	f000 fbb6 	bl	8006260 <__mcmp>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	dcb4      	bgt.n	8005a62 <_dtoa_r+0xa8a>
 8005af8:	d102      	bne.n	8005b00 <_dtoa_r+0xb28>
 8005afa:	9b04      	ldr	r3, [sp, #16]
 8005afc:	07db      	lsls	r3, r3, #31
 8005afe:	d4b0      	bmi.n	8005a62 <_dtoa_r+0xa8a>
 8005b00:	4633      	mov	r3, r6
 8005b02:	461e      	mov	r6, r3
 8005b04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b08:	2a30      	cmp	r2, #48	@ 0x30
 8005b0a:	d0fa      	beq.n	8005b02 <_dtoa_r+0xb2a>
 8005b0c:	e4b5      	b.n	800547a <_dtoa_r+0x4a2>
 8005b0e:	459a      	cmp	sl, r3
 8005b10:	d1a8      	bne.n	8005a64 <_dtoa_r+0xa8c>
 8005b12:	2331      	movs	r3, #49	@ 0x31
 8005b14:	f108 0801 	add.w	r8, r8, #1
 8005b18:	f88a 3000 	strb.w	r3, [sl]
 8005b1c:	e4ad      	b.n	800547a <_dtoa_r+0x4a2>
 8005b1e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b20:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005b7c <_dtoa_r+0xba4>
 8005b24:	b11b      	cbz	r3, 8005b2e <_dtoa_r+0xb56>
 8005b26:	f10a 0308 	add.w	r3, sl, #8
 8005b2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	4650      	mov	r0, sl
 8005b30:	b017      	add	sp, #92	@ 0x5c
 8005b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	f77f ae2e 	ble.w	800579a <_dtoa_r+0x7c2>
 8005b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b42:	2001      	movs	r0, #1
 8005b44:	e64d      	b.n	80057e2 <_dtoa_r+0x80a>
 8005b46:	f1bb 0f00 	cmp.w	fp, #0
 8005b4a:	f77f aed9 	ble.w	8005900 <_dtoa_r+0x928>
 8005b4e:	4656      	mov	r6, sl
 8005b50:	4621      	mov	r1, r4
 8005b52:	9803      	ldr	r0, [sp, #12]
 8005b54:	f7ff f9b7 	bl	8004ec6 <quorem>
 8005b58:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005b5c:	f806 3b01 	strb.w	r3, [r6], #1
 8005b60:	eba6 020a 	sub.w	r2, r6, sl
 8005b64:	4593      	cmp	fp, r2
 8005b66:	ddb4      	ble.n	8005ad2 <_dtoa_r+0xafa>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	220a      	movs	r2, #10
 8005b6c:	4648      	mov	r0, r9
 8005b6e:	9903      	ldr	r1, [sp, #12]
 8005b70:	f000 f966 	bl	8005e40 <__multadd>
 8005b74:	9003      	str	r0, [sp, #12]
 8005b76:	e7eb      	b.n	8005b50 <_dtoa_r+0xb78>
 8005b78:	080072ab 	.word	0x080072ab
 8005b7c:	0800722f 	.word	0x0800722f

08005b80 <_free_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4605      	mov	r5, r0
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d040      	beq.n	8005c0a <_free_r+0x8a>
 8005b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8c:	1f0c      	subs	r4, r1, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bfb8      	it	lt
 8005b92:	18e4      	addlt	r4, r4, r3
 8005b94:	f000 f8e6 	bl	8005d64 <__malloc_lock>
 8005b98:	4a1c      	ldr	r2, [pc, #112]	@ (8005c0c <_free_r+0x8c>)
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	b933      	cbnz	r3, 8005bac <_free_r+0x2c>
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	6014      	str	r4, [r2, #0]
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ba8:	f000 b8e2 	b.w	8005d70 <__malloc_unlock>
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	d908      	bls.n	8005bc2 <_free_r+0x42>
 8005bb0:	6820      	ldr	r0, [r4, #0]
 8005bb2:	1821      	adds	r1, r4, r0
 8005bb4:	428b      	cmp	r3, r1
 8005bb6:	bf01      	itttt	eq
 8005bb8:	6819      	ldreq	r1, [r3, #0]
 8005bba:	685b      	ldreq	r3, [r3, #4]
 8005bbc:	1809      	addeq	r1, r1, r0
 8005bbe:	6021      	streq	r1, [r4, #0]
 8005bc0:	e7ed      	b.n	8005b9e <_free_r+0x1e>
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	b10b      	cbz	r3, 8005bcc <_free_r+0x4c>
 8005bc8:	42a3      	cmp	r3, r4
 8005bca:	d9fa      	bls.n	8005bc2 <_free_r+0x42>
 8005bcc:	6811      	ldr	r1, [r2, #0]
 8005bce:	1850      	adds	r0, r2, r1
 8005bd0:	42a0      	cmp	r0, r4
 8005bd2:	d10b      	bne.n	8005bec <_free_r+0x6c>
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	4401      	add	r1, r0
 8005bd8:	1850      	adds	r0, r2, r1
 8005bda:	4283      	cmp	r3, r0
 8005bdc:	6011      	str	r1, [r2, #0]
 8005bde:	d1e0      	bne.n	8005ba2 <_free_r+0x22>
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	4408      	add	r0, r1
 8005be6:	6010      	str	r0, [r2, #0]
 8005be8:	6053      	str	r3, [r2, #4]
 8005bea:	e7da      	b.n	8005ba2 <_free_r+0x22>
 8005bec:	d902      	bls.n	8005bf4 <_free_r+0x74>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	e7d6      	b.n	8005ba2 <_free_r+0x22>
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	1821      	adds	r1, r4, r0
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf01      	itttt	eq
 8005bfc:	6819      	ldreq	r1, [r3, #0]
 8005bfe:	685b      	ldreq	r3, [r3, #4]
 8005c00:	1809      	addeq	r1, r1, r0
 8005c02:	6021      	streq	r1, [r4, #0]
 8005c04:	6063      	str	r3, [r4, #4]
 8005c06:	6054      	str	r4, [r2, #4]
 8005c08:	e7cb      	b.n	8005ba2 <_free_r+0x22>
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	2000046c 	.word	0x2000046c

08005c10 <malloc>:
 8005c10:	4b02      	ldr	r3, [pc, #8]	@ (8005c1c <malloc+0xc>)
 8005c12:	4601      	mov	r1, r0
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	f000 b825 	b.w	8005c64 <_malloc_r>
 8005c1a:	bf00      	nop
 8005c1c:	2000001c 	.word	0x2000001c

08005c20 <sbrk_aligned>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4e0f      	ldr	r6, [pc, #60]	@ (8005c60 <sbrk_aligned+0x40>)
 8005c24:	460c      	mov	r4, r1
 8005c26:	6831      	ldr	r1, [r6, #0]
 8005c28:	4605      	mov	r5, r0
 8005c2a:	b911      	cbnz	r1, 8005c32 <sbrk_aligned+0x12>
 8005c2c:	f000 fe3a 	bl	80068a4 <_sbrk_r>
 8005c30:	6030      	str	r0, [r6, #0]
 8005c32:	4621      	mov	r1, r4
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 fe35 	bl	80068a4 <_sbrk_r>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	d103      	bne.n	8005c46 <sbrk_aligned+0x26>
 8005c3e:	f04f 34ff 	mov.w	r4, #4294967295
 8005c42:	4620      	mov	r0, r4
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
 8005c46:	1cc4      	adds	r4, r0, #3
 8005c48:	f024 0403 	bic.w	r4, r4, #3
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d0f8      	beq.n	8005c42 <sbrk_aligned+0x22>
 8005c50:	1a21      	subs	r1, r4, r0
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 fe26 	bl	80068a4 <_sbrk_r>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d1f2      	bne.n	8005c42 <sbrk_aligned+0x22>
 8005c5c:	e7ef      	b.n	8005c3e <sbrk_aligned+0x1e>
 8005c5e:	bf00      	nop
 8005c60:	20000468 	.word	0x20000468

08005c64 <_malloc_r>:
 8005c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c68:	1ccd      	adds	r5, r1, #3
 8005c6a:	f025 0503 	bic.w	r5, r5, #3
 8005c6e:	3508      	adds	r5, #8
 8005c70:	2d0c      	cmp	r5, #12
 8005c72:	bf38      	it	cc
 8005c74:	250c      	movcc	r5, #12
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	4606      	mov	r6, r0
 8005c7a:	db01      	blt.n	8005c80 <_malloc_r+0x1c>
 8005c7c:	42a9      	cmp	r1, r5
 8005c7e:	d904      	bls.n	8005c8a <_malloc_r+0x26>
 8005c80:	230c      	movs	r3, #12
 8005c82:	6033      	str	r3, [r6, #0]
 8005c84:	2000      	movs	r0, #0
 8005c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d60 <_malloc_r+0xfc>
 8005c8e:	f000 f869 	bl	8005d64 <__malloc_lock>
 8005c92:	f8d8 3000 	ldr.w	r3, [r8]
 8005c96:	461c      	mov	r4, r3
 8005c98:	bb44      	cbnz	r4, 8005cec <_malloc_r+0x88>
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7ff ffbf 	bl	8005c20 <sbrk_aligned>
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	d158      	bne.n	8005d5a <_malloc_r+0xf6>
 8005ca8:	f8d8 4000 	ldr.w	r4, [r8]
 8005cac:	4627      	mov	r7, r4
 8005cae:	2f00      	cmp	r7, #0
 8005cb0:	d143      	bne.n	8005d3a <_malloc_r+0xd6>
 8005cb2:	2c00      	cmp	r4, #0
 8005cb4:	d04b      	beq.n	8005d4e <_malloc_r+0xea>
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	4639      	mov	r1, r7
 8005cba:	4630      	mov	r0, r6
 8005cbc:	eb04 0903 	add.w	r9, r4, r3
 8005cc0:	f000 fdf0 	bl	80068a4 <_sbrk_r>
 8005cc4:	4581      	cmp	r9, r0
 8005cc6:	d142      	bne.n	8005d4e <_malloc_r+0xea>
 8005cc8:	6821      	ldr	r1, [r4, #0]
 8005cca:	4630      	mov	r0, r6
 8005ccc:	1a6d      	subs	r5, r5, r1
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7ff ffa6 	bl	8005c20 <sbrk_aligned>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d03a      	beq.n	8005d4e <_malloc_r+0xea>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	442b      	add	r3, r5
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	bb62      	cbnz	r2, 8005d40 <_malloc_r+0xdc>
 8005ce6:	f8c8 7000 	str.w	r7, [r8]
 8005cea:	e00f      	b.n	8005d0c <_malloc_r+0xa8>
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	1b52      	subs	r2, r2, r5
 8005cf0:	d420      	bmi.n	8005d34 <_malloc_r+0xd0>
 8005cf2:	2a0b      	cmp	r2, #11
 8005cf4:	d917      	bls.n	8005d26 <_malloc_r+0xc2>
 8005cf6:	1961      	adds	r1, r4, r5
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	6025      	str	r5, [r4, #0]
 8005cfc:	bf18      	it	ne
 8005cfe:	6059      	strne	r1, [r3, #4]
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	bf08      	it	eq
 8005d04:	f8c8 1000 	streq.w	r1, [r8]
 8005d08:	5162      	str	r2, [r4, r5]
 8005d0a:	604b      	str	r3, [r1, #4]
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f000 f82f 	bl	8005d70 <__malloc_unlock>
 8005d12:	f104 000b 	add.w	r0, r4, #11
 8005d16:	1d23      	adds	r3, r4, #4
 8005d18:	f020 0007 	bic.w	r0, r0, #7
 8005d1c:	1ac2      	subs	r2, r0, r3
 8005d1e:	bf1c      	itt	ne
 8005d20:	1a1b      	subne	r3, r3, r0
 8005d22:	50a3      	strne	r3, [r4, r2]
 8005d24:	e7af      	b.n	8005c86 <_malloc_r+0x22>
 8005d26:	6862      	ldr	r2, [r4, #4]
 8005d28:	42a3      	cmp	r3, r4
 8005d2a:	bf0c      	ite	eq
 8005d2c:	f8c8 2000 	streq.w	r2, [r8]
 8005d30:	605a      	strne	r2, [r3, #4]
 8005d32:	e7eb      	b.n	8005d0c <_malloc_r+0xa8>
 8005d34:	4623      	mov	r3, r4
 8005d36:	6864      	ldr	r4, [r4, #4]
 8005d38:	e7ae      	b.n	8005c98 <_malloc_r+0x34>
 8005d3a:	463c      	mov	r4, r7
 8005d3c:	687f      	ldr	r7, [r7, #4]
 8005d3e:	e7b6      	b.n	8005cae <_malloc_r+0x4a>
 8005d40:	461a      	mov	r2, r3
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	d1fb      	bne.n	8005d40 <_malloc_r+0xdc>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6053      	str	r3, [r2, #4]
 8005d4c:	e7de      	b.n	8005d0c <_malloc_r+0xa8>
 8005d4e:	230c      	movs	r3, #12
 8005d50:	4630      	mov	r0, r6
 8005d52:	6033      	str	r3, [r6, #0]
 8005d54:	f000 f80c 	bl	8005d70 <__malloc_unlock>
 8005d58:	e794      	b.n	8005c84 <_malloc_r+0x20>
 8005d5a:	6005      	str	r5, [r0, #0]
 8005d5c:	e7d6      	b.n	8005d0c <_malloc_r+0xa8>
 8005d5e:	bf00      	nop
 8005d60:	2000046c 	.word	0x2000046c

08005d64 <__malloc_lock>:
 8005d64:	4801      	ldr	r0, [pc, #4]	@ (8005d6c <__malloc_lock+0x8>)
 8005d66:	f7ff b89e 	b.w	8004ea6 <__retarget_lock_acquire_recursive>
 8005d6a:	bf00      	nop
 8005d6c:	20000464 	.word	0x20000464

08005d70 <__malloc_unlock>:
 8005d70:	4801      	ldr	r0, [pc, #4]	@ (8005d78 <__malloc_unlock+0x8>)
 8005d72:	f7ff b899 	b.w	8004ea8 <__retarget_lock_release_recursive>
 8005d76:	bf00      	nop
 8005d78:	20000464 	.word	0x20000464

08005d7c <_Balloc>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	69c6      	ldr	r6, [r0, #28]
 8005d80:	4604      	mov	r4, r0
 8005d82:	460d      	mov	r5, r1
 8005d84:	b976      	cbnz	r6, 8005da4 <_Balloc+0x28>
 8005d86:	2010      	movs	r0, #16
 8005d88:	f7ff ff42 	bl	8005c10 <malloc>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	61e0      	str	r0, [r4, #28]
 8005d90:	b920      	cbnz	r0, 8005d9c <_Balloc+0x20>
 8005d92:	216b      	movs	r1, #107	@ 0x6b
 8005d94:	4b17      	ldr	r3, [pc, #92]	@ (8005df4 <_Balloc+0x78>)
 8005d96:	4818      	ldr	r0, [pc, #96]	@ (8005df8 <_Balloc+0x7c>)
 8005d98:	f000 fda2 	bl	80068e0 <__assert_func>
 8005d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005da0:	6006      	str	r6, [r0, #0]
 8005da2:	60c6      	str	r6, [r0, #12]
 8005da4:	69e6      	ldr	r6, [r4, #28]
 8005da6:	68f3      	ldr	r3, [r6, #12]
 8005da8:	b183      	cbz	r3, 8005dcc <_Balloc+0x50>
 8005daa:	69e3      	ldr	r3, [r4, #28]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005db2:	b9b8      	cbnz	r0, 8005de4 <_Balloc+0x68>
 8005db4:	2101      	movs	r1, #1
 8005db6:	fa01 f605 	lsl.w	r6, r1, r5
 8005dba:	1d72      	adds	r2, r6, #5
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	0092      	lsls	r2, r2, #2
 8005dc0:	f000 fdac 	bl	800691c <_calloc_r>
 8005dc4:	b160      	cbz	r0, 8005de0 <_Balloc+0x64>
 8005dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005dca:	e00e      	b.n	8005dea <_Balloc+0x6e>
 8005dcc:	2221      	movs	r2, #33	@ 0x21
 8005dce:	2104      	movs	r1, #4
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f000 fda3 	bl	800691c <_calloc_r>
 8005dd6:	69e3      	ldr	r3, [r4, #28]
 8005dd8:	60f0      	str	r0, [r6, #12]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e4      	bne.n	8005daa <_Balloc+0x2e>
 8005de0:	2000      	movs	r0, #0
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	6802      	ldr	r2, [r0, #0]
 8005de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dea:	2300      	movs	r3, #0
 8005dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005df0:	e7f7      	b.n	8005de2 <_Balloc+0x66>
 8005df2:	bf00      	nop
 8005df4:	0800723c 	.word	0x0800723c
 8005df8:	080072bc 	.word	0x080072bc

08005dfc <_Bfree>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	69c6      	ldr	r6, [r0, #28]
 8005e00:	4605      	mov	r5, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	b976      	cbnz	r6, 8005e24 <_Bfree+0x28>
 8005e06:	2010      	movs	r0, #16
 8005e08:	f7ff ff02 	bl	8005c10 <malloc>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	61e8      	str	r0, [r5, #28]
 8005e10:	b920      	cbnz	r0, 8005e1c <_Bfree+0x20>
 8005e12:	218f      	movs	r1, #143	@ 0x8f
 8005e14:	4b08      	ldr	r3, [pc, #32]	@ (8005e38 <_Bfree+0x3c>)
 8005e16:	4809      	ldr	r0, [pc, #36]	@ (8005e3c <_Bfree+0x40>)
 8005e18:	f000 fd62 	bl	80068e0 <__assert_func>
 8005e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e20:	6006      	str	r6, [r0, #0]
 8005e22:	60c6      	str	r6, [r0, #12]
 8005e24:	b13c      	cbz	r4, 8005e36 <_Bfree+0x3a>
 8005e26:	69eb      	ldr	r3, [r5, #28]
 8005e28:	6862      	ldr	r2, [r4, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e30:	6021      	str	r1, [r4, #0]
 8005e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
 8005e38:	0800723c 	.word	0x0800723c
 8005e3c:	080072bc 	.word	0x080072bc

08005e40 <__multadd>:
 8005e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e44:	4607      	mov	r7, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	461e      	mov	r6, r3
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	690d      	ldr	r5, [r1, #16]
 8005e4e:	f101 0c14 	add.w	ip, r1, #20
 8005e52:	f8dc 3000 	ldr.w	r3, [ip]
 8005e56:	3001      	adds	r0, #1
 8005e58:	b299      	uxth	r1, r3
 8005e5a:	fb02 6101 	mla	r1, r2, r1, r6
 8005e5e:	0c1e      	lsrs	r6, r3, #16
 8005e60:	0c0b      	lsrs	r3, r1, #16
 8005e62:	fb02 3306 	mla	r3, r2, r6, r3
 8005e66:	b289      	uxth	r1, r1
 8005e68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e6c:	4285      	cmp	r5, r0
 8005e6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e72:	f84c 1b04 	str.w	r1, [ip], #4
 8005e76:	dcec      	bgt.n	8005e52 <__multadd+0x12>
 8005e78:	b30e      	cbz	r6, 8005ebe <__multadd+0x7e>
 8005e7a:	68a3      	ldr	r3, [r4, #8]
 8005e7c:	42ab      	cmp	r3, r5
 8005e7e:	dc19      	bgt.n	8005eb4 <__multadd+0x74>
 8005e80:	6861      	ldr	r1, [r4, #4]
 8005e82:	4638      	mov	r0, r7
 8005e84:	3101      	adds	r1, #1
 8005e86:	f7ff ff79 	bl	8005d7c <_Balloc>
 8005e8a:	4680      	mov	r8, r0
 8005e8c:	b928      	cbnz	r0, 8005e9a <__multadd+0x5a>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	21ba      	movs	r1, #186	@ 0xba
 8005e92:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <__multadd+0x84>)
 8005e94:	480c      	ldr	r0, [pc, #48]	@ (8005ec8 <__multadd+0x88>)
 8005e96:	f000 fd23 	bl	80068e0 <__assert_func>
 8005e9a:	6922      	ldr	r2, [r4, #16]
 8005e9c:	f104 010c 	add.w	r1, r4, #12
 8005ea0:	3202      	adds	r2, #2
 8005ea2:	0092      	lsls	r2, r2, #2
 8005ea4:	300c      	adds	r0, #12
 8005ea6:	f000 fd0d 	bl	80068c4 <memcpy>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4638      	mov	r0, r7
 8005eae:	f7ff ffa5 	bl	8005dfc <_Bfree>
 8005eb2:	4644      	mov	r4, r8
 8005eb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005eb8:	3501      	adds	r5, #1
 8005eba:	615e      	str	r6, [r3, #20]
 8005ebc:	6125      	str	r5, [r4, #16]
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec4:	080072ab 	.word	0x080072ab
 8005ec8:	080072bc 	.word	0x080072bc

08005ecc <__hi0bits>:
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ed2:	bf3a      	itte	cc
 8005ed4:	0403      	lslcc	r3, r0, #16
 8005ed6:	2010      	movcc	r0, #16
 8005ed8:	2000      	movcs	r0, #0
 8005eda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ede:	bf3c      	itt	cc
 8005ee0:	021b      	lslcc	r3, r3, #8
 8005ee2:	3008      	addcc	r0, #8
 8005ee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ee8:	bf3c      	itt	cc
 8005eea:	011b      	lslcc	r3, r3, #4
 8005eec:	3004      	addcc	r0, #4
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef2:	bf3c      	itt	cc
 8005ef4:	009b      	lslcc	r3, r3, #2
 8005ef6:	3002      	addcc	r0, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	db05      	blt.n	8005f08 <__hi0bits+0x3c>
 8005efc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f00:	f100 0001 	add.w	r0, r0, #1
 8005f04:	bf08      	it	eq
 8005f06:	2020      	moveq	r0, #32
 8005f08:	4770      	bx	lr

08005f0a <__lo0bits>:
 8005f0a:	6803      	ldr	r3, [r0, #0]
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	f013 0007 	ands.w	r0, r3, #7
 8005f12:	d00b      	beq.n	8005f2c <__lo0bits+0x22>
 8005f14:	07d9      	lsls	r1, r3, #31
 8005f16:	d421      	bmi.n	8005f5c <__lo0bits+0x52>
 8005f18:	0798      	lsls	r0, r3, #30
 8005f1a:	bf49      	itett	mi
 8005f1c:	085b      	lsrmi	r3, r3, #1
 8005f1e:	089b      	lsrpl	r3, r3, #2
 8005f20:	2001      	movmi	r0, #1
 8005f22:	6013      	strmi	r3, [r2, #0]
 8005f24:	bf5c      	itt	pl
 8005f26:	2002      	movpl	r0, #2
 8005f28:	6013      	strpl	r3, [r2, #0]
 8005f2a:	4770      	bx	lr
 8005f2c:	b299      	uxth	r1, r3
 8005f2e:	b909      	cbnz	r1, 8005f34 <__lo0bits+0x2a>
 8005f30:	2010      	movs	r0, #16
 8005f32:	0c1b      	lsrs	r3, r3, #16
 8005f34:	b2d9      	uxtb	r1, r3
 8005f36:	b909      	cbnz	r1, 8005f3c <__lo0bits+0x32>
 8005f38:	3008      	adds	r0, #8
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	0719      	lsls	r1, r3, #28
 8005f3e:	bf04      	itt	eq
 8005f40:	091b      	lsreq	r3, r3, #4
 8005f42:	3004      	addeq	r0, #4
 8005f44:	0799      	lsls	r1, r3, #30
 8005f46:	bf04      	itt	eq
 8005f48:	089b      	lsreq	r3, r3, #2
 8005f4a:	3002      	addeq	r0, #2
 8005f4c:	07d9      	lsls	r1, r3, #31
 8005f4e:	d403      	bmi.n	8005f58 <__lo0bits+0x4e>
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	f100 0001 	add.w	r0, r0, #1
 8005f56:	d003      	beq.n	8005f60 <__lo0bits+0x56>
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	4770      	bx	lr
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	4770      	bx	lr
 8005f60:	2020      	movs	r0, #32
 8005f62:	4770      	bx	lr

08005f64 <__i2b>:
 8005f64:	b510      	push	{r4, lr}
 8005f66:	460c      	mov	r4, r1
 8005f68:	2101      	movs	r1, #1
 8005f6a:	f7ff ff07 	bl	8005d7c <_Balloc>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	b928      	cbnz	r0, 8005f7e <__i2b+0x1a>
 8005f72:	f240 1145 	movw	r1, #325	@ 0x145
 8005f76:	4b04      	ldr	r3, [pc, #16]	@ (8005f88 <__i2b+0x24>)
 8005f78:	4804      	ldr	r0, [pc, #16]	@ (8005f8c <__i2b+0x28>)
 8005f7a:	f000 fcb1 	bl	80068e0 <__assert_func>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	6144      	str	r4, [r0, #20]
 8005f82:	6103      	str	r3, [r0, #16]
 8005f84:	bd10      	pop	{r4, pc}
 8005f86:	bf00      	nop
 8005f88:	080072ab 	.word	0x080072ab
 8005f8c:	080072bc 	.word	0x080072bc

08005f90 <__multiply>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	4617      	mov	r7, r2
 8005f96:	690a      	ldr	r2, [r1, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4689      	mov	r9, r1
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	bfa2      	ittt	ge
 8005fa0:	463b      	movge	r3, r7
 8005fa2:	460f      	movge	r7, r1
 8005fa4:	4699      	movge	r9, r3
 8005fa6:	693d      	ldr	r5, [r7, #16]
 8005fa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	eb05 060a 	add.w	r6, r5, sl
 8005fb4:	42b3      	cmp	r3, r6
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	bfb8      	it	lt
 8005fba:	3101      	addlt	r1, #1
 8005fbc:	f7ff fede 	bl	8005d7c <_Balloc>
 8005fc0:	b930      	cbnz	r0, 8005fd0 <__multiply+0x40>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005fc8:	4b40      	ldr	r3, [pc, #256]	@ (80060cc <__multiply+0x13c>)
 8005fca:	4841      	ldr	r0, [pc, #260]	@ (80060d0 <__multiply+0x140>)
 8005fcc:	f000 fc88 	bl	80068e0 <__assert_func>
 8005fd0:	f100 0414 	add.w	r4, r0, #20
 8005fd4:	4623      	mov	r3, r4
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005fdc:	4573      	cmp	r3, lr
 8005fde:	d320      	bcc.n	8006022 <__multiply+0x92>
 8005fe0:	f107 0814 	add.w	r8, r7, #20
 8005fe4:	f109 0114 	add.w	r1, r9, #20
 8005fe8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005fec:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005ff0:	9302      	str	r3, [sp, #8]
 8005ff2:	1beb      	subs	r3, r5, r7
 8005ff4:	3b15      	subs	r3, #21
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	3715      	adds	r7, #21
 8005ffe:	42bd      	cmp	r5, r7
 8006000:	bf38      	it	cc
 8006002:	2304      	movcc	r3, #4
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	9b02      	ldr	r3, [sp, #8]
 8006008:	9103      	str	r1, [sp, #12]
 800600a:	428b      	cmp	r3, r1
 800600c:	d80c      	bhi.n	8006028 <__multiply+0x98>
 800600e:	2e00      	cmp	r6, #0
 8006010:	dd03      	ble.n	800601a <__multiply+0x8a>
 8006012:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006016:	2b00      	cmp	r3, #0
 8006018:	d055      	beq.n	80060c6 <__multiply+0x136>
 800601a:	6106      	str	r6, [r0, #16]
 800601c:	b005      	add	sp, #20
 800601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006022:	f843 2b04 	str.w	r2, [r3], #4
 8006026:	e7d9      	b.n	8005fdc <__multiply+0x4c>
 8006028:	f8b1 a000 	ldrh.w	sl, [r1]
 800602c:	f1ba 0f00 	cmp.w	sl, #0
 8006030:	d01f      	beq.n	8006072 <__multiply+0xe2>
 8006032:	46c4      	mov	ip, r8
 8006034:	46a1      	mov	r9, r4
 8006036:	2700      	movs	r7, #0
 8006038:	f85c 2b04 	ldr.w	r2, [ip], #4
 800603c:	f8d9 3000 	ldr.w	r3, [r9]
 8006040:	fa1f fb82 	uxth.w	fp, r2
 8006044:	b29b      	uxth	r3, r3
 8006046:	fb0a 330b 	mla	r3, sl, fp, r3
 800604a:	443b      	add	r3, r7
 800604c:	f8d9 7000 	ldr.w	r7, [r9]
 8006050:	0c12      	lsrs	r2, r2, #16
 8006052:	0c3f      	lsrs	r7, r7, #16
 8006054:	fb0a 7202 	mla	r2, sl, r2, r7
 8006058:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800605c:	b29b      	uxth	r3, r3
 800605e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006062:	4565      	cmp	r5, ip
 8006064:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006068:	f849 3b04 	str.w	r3, [r9], #4
 800606c:	d8e4      	bhi.n	8006038 <__multiply+0xa8>
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	50e7      	str	r7, [r4, r3]
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	3104      	adds	r1, #4
 8006076:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800607a:	f1b9 0f00 	cmp.w	r9, #0
 800607e:	d020      	beq.n	80060c2 <__multiply+0x132>
 8006080:	4647      	mov	r7, r8
 8006082:	46a4      	mov	ip, r4
 8006084:	f04f 0a00 	mov.w	sl, #0
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	f8b7 b000 	ldrh.w	fp, [r7]
 800608e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006092:	b29b      	uxth	r3, r3
 8006094:	fb09 220b 	mla	r2, r9, fp, r2
 8006098:	4452      	add	r2, sl
 800609a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800609e:	f84c 3b04 	str.w	r3, [ip], #4
 80060a2:	f857 3b04 	ldr.w	r3, [r7], #4
 80060a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060aa:	f8bc 3000 	ldrh.w	r3, [ip]
 80060ae:	42bd      	cmp	r5, r7
 80060b0:	fb09 330a 	mla	r3, r9, sl, r3
 80060b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80060b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060bc:	d8e5      	bhi.n	800608a <__multiply+0xfa>
 80060be:	9a01      	ldr	r2, [sp, #4]
 80060c0:	50a3      	str	r3, [r4, r2]
 80060c2:	3404      	adds	r4, #4
 80060c4:	e79f      	b.n	8006006 <__multiply+0x76>
 80060c6:	3e01      	subs	r6, #1
 80060c8:	e7a1      	b.n	800600e <__multiply+0x7e>
 80060ca:	bf00      	nop
 80060cc:	080072ab 	.word	0x080072ab
 80060d0:	080072bc 	.word	0x080072bc

080060d4 <__pow5mult>:
 80060d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d8:	4615      	mov	r5, r2
 80060da:	f012 0203 	ands.w	r2, r2, #3
 80060de:	4607      	mov	r7, r0
 80060e0:	460e      	mov	r6, r1
 80060e2:	d007      	beq.n	80060f4 <__pow5mult+0x20>
 80060e4:	4c25      	ldr	r4, [pc, #148]	@ (800617c <__pow5mult+0xa8>)
 80060e6:	3a01      	subs	r2, #1
 80060e8:	2300      	movs	r3, #0
 80060ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060ee:	f7ff fea7 	bl	8005e40 <__multadd>
 80060f2:	4606      	mov	r6, r0
 80060f4:	10ad      	asrs	r5, r5, #2
 80060f6:	d03d      	beq.n	8006174 <__pow5mult+0xa0>
 80060f8:	69fc      	ldr	r4, [r7, #28]
 80060fa:	b97c      	cbnz	r4, 800611c <__pow5mult+0x48>
 80060fc:	2010      	movs	r0, #16
 80060fe:	f7ff fd87 	bl	8005c10 <malloc>
 8006102:	4602      	mov	r2, r0
 8006104:	61f8      	str	r0, [r7, #28]
 8006106:	b928      	cbnz	r0, 8006114 <__pow5mult+0x40>
 8006108:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800610c:	4b1c      	ldr	r3, [pc, #112]	@ (8006180 <__pow5mult+0xac>)
 800610e:	481d      	ldr	r0, [pc, #116]	@ (8006184 <__pow5mult+0xb0>)
 8006110:	f000 fbe6 	bl	80068e0 <__assert_func>
 8006114:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006118:	6004      	str	r4, [r0, #0]
 800611a:	60c4      	str	r4, [r0, #12]
 800611c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006120:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006124:	b94c      	cbnz	r4, 800613a <__pow5mult+0x66>
 8006126:	f240 2171 	movw	r1, #625	@ 0x271
 800612a:	4638      	mov	r0, r7
 800612c:	f7ff ff1a 	bl	8005f64 <__i2b>
 8006130:	2300      	movs	r3, #0
 8006132:	4604      	mov	r4, r0
 8006134:	f8c8 0008 	str.w	r0, [r8, #8]
 8006138:	6003      	str	r3, [r0, #0]
 800613a:	f04f 0900 	mov.w	r9, #0
 800613e:	07eb      	lsls	r3, r5, #31
 8006140:	d50a      	bpl.n	8006158 <__pow5mult+0x84>
 8006142:	4631      	mov	r1, r6
 8006144:	4622      	mov	r2, r4
 8006146:	4638      	mov	r0, r7
 8006148:	f7ff ff22 	bl	8005f90 <__multiply>
 800614c:	4680      	mov	r8, r0
 800614e:	4631      	mov	r1, r6
 8006150:	4638      	mov	r0, r7
 8006152:	f7ff fe53 	bl	8005dfc <_Bfree>
 8006156:	4646      	mov	r6, r8
 8006158:	106d      	asrs	r5, r5, #1
 800615a:	d00b      	beq.n	8006174 <__pow5mult+0xa0>
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	b938      	cbnz	r0, 8006170 <__pow5mult+0x9c>
 8006160:	4622      	mov	r2, r4
 8006162:	4621      	mov	r1, r4
 8006164:	4638      	mov	r0, r7
 8006166:	f7ff ff13 	bl	8005f90 <__multiply>
 800616a:	6020      	str	r0, [r4, #0]
 800616c:	f8c0 9000 	str.w	r9, [r0]
 8006170:	4604      	mov	r4, r0
 8006172:	e7e4      	b.n	800613e <__pow5mult+0x6a>
 8006174:	4630      	mov	r0, r6
 8006176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800617a:	bf00      	nop
 800617c:	0800736c 	.word	0x0800736c
 8006180:	0800723c 	.word	0x0800723c
 8006184:	080072bc 	.word	0x080072bc

08006188 <__lshift>:
 8006188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	460c      	mov	r4, r1
 800618e:	4607      	mov	r7, r0
 8006190:	4691      	mov	r9, r2
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	6849      	ldr	r1, [r1, #4]
 8006196:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800619a:	68a3      	ldr	r3, [r4, #8]
 800619c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061a0:	f108 0601 	add.w	r6, r8, #1
 80061a4:	42b3      	cmp	r3, r6
 80061a6:	db0b      	blt.n	80061c0 <__lshift+0x38>
 80061a8:	4638      	mov	r0, r7
 80061aa:	f7ff fde7 	bl	8005d7c <_Balloc>
 80061ae:	4605      	mov	r5, r0
 80061b0:	b948      	cbnz	r0, 80061c6 <__lshift+0x3e>
 80061b2:	4602      	mov	r2, r0
 80061b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80061b8:	4b27      	ldr	r3, [pc, #156]	@ (8006258 <__lshift+0xd0>)
 80061ba:	4828      	ldr	r0, [pc, #160]	@ (800625c <__lshift+0xd4>)
 80061bc:	f000 fb90 	bl	80068e0 <__assert_func>
 80061c0:	3101      	adds	r1, #1
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	e7ee      	b.n	80061a4 <__lshift+0x1c>
 80061c6:	2300      	movs	r3, #0
 80061c8:	f100 0114 	add.w	r1, r0, #20
 80061cc:	f100 0210 	add.w	r2, r0, #16
 80061d0:	4618      	mov	r0, r3
 80061d2:	4553      	cmp	r3, sl
 80061d4:	db33      	blt.n	800623e <__lshift+0xb6>
 80061d6:	6920      	ldr	r0, [r4, #16]
 80061d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061dc:	f104 0314 	add.w	r3, r4, #20
 80061e0:	f019 091f 	ands.w	r9, r9, #31
 80061e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061ec:	d02b      	beq.n	8006246 <__lshift+0xbe>
 80061ee:	468a      	mov	sl, r1
 80061f0:	2200      	movs	r2, #0
 80061f2:	f1c9 0e20 	rsb	lr, r9, #32
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	fa00 f009 	lsl.w	r0, r0, r9
 80061fc:	4310      	orrs	r0, r2
 80061fe:	f84a 0b04 	str.w	r0, [sl], #4
 8006202:	f853 2b04 	ldr.w	r2, [r3], #4
 8006206:	459c      	cmp	ip, r3
 8006208:	fa22 f20e 	lsr.w	r2, r2, lr
 800620c:	d8f3      	bhi.n	80061f6 <__lshift+0x6e>
 800620e:	ebac 0304 	sub.w	r3, ip, r4
 8006212:	3b15      	subs	r3, #21
 8006214:	f023 0303 	bic.w	r3, r3, #3
 8006218:	3304      	adds	r3, #4
 800621a:	f104 0015 	add.w	r0, r4, #21
 800621e:	4560      	cmp	r0, ip
 8006220:	bf88      	it	hi
 8006222:	2304      	movhi	r3, #4
 8006224:	50ca      	str	r2, [r1, r3]
 8006226:	b10a      	cbz	r2, 800622c <__lshift+0xa4>
 8006228:	f108 0602 	add.w	r6, r8, #2
 800622c:	3e01      	subs	r6, #1
 800622e:	4638      	mov	r0, r7
 8006230:	4621      	mov	r1, r4
 8006232:	612e      	str	r6, [r5, #16]
 8006234:	f7ff fde2 	bl	8005dfc <_Bfree>
 8006238:	4628      	mov	r0, r5
 800623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006242:	3301      	adds	r3, #1
 8006244:	e7c5      	b.n	80061d2 <__lshift+0x4a>
 8006246:	3904      	subs	r1, #4
 8006248:	f853 2b04 	ldr.w	r2, [r3], #4
 800624c:	459c      	cmp	ip, r3
 800624e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006252:	d8f9      	bhi.n	8006248 <__lshift+0xc0>
 8006254:	e7ea      	b.n	800622c <__lshift+0xa4>
 8006256:	bf00      	nop
 8006258:	080072ab 	.word	0x080072ab
 800625c:	080072bc 	.word	0x080072bc

08006260 <__mcmp>:
 8006260:	4603      	mov	r3, r0
 8006262:	690a      	ldr	r2, [r1, #16]
 8006264:	6900      	ldr	r0, [r0, #16]
 8006266:	b530      	push	{r4, r5, lr}
 8006268:	1a80      	subs	r0, r0, r2
 800626a:	d10e      	bne.n	800628a <__mcmp+0x2a>
 800626c:	3314      	adds	r3, #20
 800626e:	3114      	adds	r1, #20
 8006270:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006274:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006278:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800627c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006280:	4295      	cmp	r5, r2
 8006282:	d003      	beq.n	800628c <__mcmp+0x2c>
 8006284:	d205      	bcs.n	8006292 <__mcmp+0x32>
 8006286:	f04f 30ff 	mov.w	r0, #4294967295
 800628a:	bd30      	pop	{r4, r5, pc}
 800628c:	42a3      	cmp	r3, r4
 800628e:	d3f3      	bcc.n	8006278 <__mcmp+0x18>
 8006290:	e7fb      	b.n	800628a <__mcmp+0x2a>
 8006292:	2001      	movs	r0, #1
 8006294:	e7f9      	b.n	800628a <__mcmp+0x2a>
	...

08006298 <__mdiff>:
 8006298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	4689      	mov	r9, r1
 800629e:	4606      	mov	r6, r0
 80062a0:	4611      	mov	r1, r2
 80062a2:	4648      	mov	r0, r9
 80062a4:	4614      	mov	r4, r2
 80062a6:	f7ff ffdb 	bl	8006260 <__mcmp>
 80062aa:	1e05      	subs	r5, r0, #0
 80062ac:	d112      	bne.n	80062d4 <__mdiff+0x3c>
 80062ae:	4629      	mov	r1, r5
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7ff fd63 	bl	8005d7c <_Balloc>
 80062b6:	4602      	mov	r2, r0
 80062b8:	b928      	cbnz	r0, 80062c6 <__mdiff+0x2e>
 80062ba:	f240 2137 	movw	r1, #567	@ 0x237
 80062be:	4b3e      	ldr	r3, [pc, #248]	@ (80063b8 <__mdiff+0x120>)
 80062c0:	483e      	ldr	r0, [pc, #248]	@ (80063bc <__mdiff+0x124>)
 80062c2:	f000 fb0d 	bl	80068e0 <__assert_func>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062cc:	4610      	mov	r0, r2
 80062ce:	b003      	add	sp, #12
 80062d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d4:	bfbc      	itt	lt
 80062d6:	464b      	movlt	r3, r9
 80062d8:	46a1      	movlt	r9, r4
 80062da:	4630      	mov	r0, r6
 80062dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80062e0:	bfba      	itte	lt
 80062e2:	461c      	movlt	r4, r3
 80062e4:	2501      	movlt	r5, #1
 80062e6:	2500      	movge	r5, #0
 80062e8:	f7ff fd48 	bl	8005d7c <_Balloc>
 80062ec:	4602      	mov	r2, r0
 80062ee:	b918      	cbnz	r0, 80062f8 <__mdiff+0x60>
 80062f0:	f240 2145 	movw	r1, #581	@ 0x245
 80062f4:	4b30      	ldr	r3, [pc, #192]	@ (80063b8 <__mdiff+0x120>)
 80062f6:	e7e3      	b.n	80062c0 <__mdiff+0x28>
 80062f8:	f100 0b14 	add.w	fp, r0, #20
 80062fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006300:	f109 0310 	add.w	r3, r9, #16
 8006304:	60c5      	str	r5, [r0, #12]
 8006306:	f04f 0c00 	mov.w	ip, #0
 800630a:	f109 0514 	add.w	r5, r9, #20
 800630e:	46d9      	mov	r9, fp
 8006310:	6926      	ldr	r6, [r4, #16]
 8006312:	f104 0e14 	add.w	lr, r4, #20
 8006316:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800631a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	9b01      	ldr	r3, [sp, #4]
 8006322:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006326:	f853 af04 	ldr.w	sl, [r3, #4]!
 800632a:	b281      	uxth	r1, r0
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	fa1f f38a 	uxth.w	r3, sl
 8006332:	1a5b      	subs	r3, r3, r1
 8006334:	0c00      	lsrs	r0, r0, #16
 8006336:	4463      	add	r3, ip
 8006338:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800633c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006340:	b29b      	uxth	r3, r3
 8006342:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006346:	4576      	cmp	r6, lr
 8006348:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800634c:	f849 3b04 	str.w	r3, [r9], #4
 8006350:	d8e6      	bhi.n	8006320 <__mdiff+0x88>
 8006352:	1b33      	subs	r3, r6, r4
 8006354:	3b15      	subs	r3, #21
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	3415      	adds	r4, #21
 800635c:	3304      	adds	r3, #4
 800635e:	42a6      	cmp	r6, r4
 8006360:	bf38      	it	cc
 8006362:	2304      	movcc	r3, #4
 8006364:	441d      	add	r5, r3
 8006366:	445b      	add	r3, fp
 8006368:	461e      	mov	r6, r3
 800636a:	462c      	mov	r4, r5
 800636c:	4544      	cmp	r4, r8
 800636e:	d30e      	bcc.n	800638e <__mdiff+0xf6>
 8006370:	f108 0103 	add.w	r1, r8, #3
 8006374:	1b49      	subs	r1, r1, r5
 8006376:	f021 0103 	bic.w	r1, r1, #3
 800637a:	3d03      	subs	r5, #3
 800637c:	45a8      	cmp	r8, r5
 800637e:	bf38      	it	cc
 8006380:	2100      	movcc	r1, #0
 8006382:	440b      	add	r3, r1
 8006384:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006388:	b199      	cbz	r1, 80063b2 <__mdiff+0x11a>
 800638a:	6117      	str	r7, [r2, #16]
 800638c:	e79e      	b.n	80062cc <__mdiff+0x34>
 800638e:	46e6      	mov	lr, ip
 8006390:	f854 1b04 	ldr.w	r1, [r4], #4
 8006394:	fa1f fc81 	uxth.w	ip, r1
 8006398:	44f4      	add	ip, lr
 800639a:	0c08      	lsrs	r0, r1, #16
 800639c:	4471      	add	r1, lr
 800639e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80063a2:	b289      	uxth	r1, r1
 80063a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80063a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063ac:	f846 1b04 	str.w	r1, [r6], #4
 80063b0:	e7dc      	b.n	800636c <__mdiff+0xd4>
 80063b2:	3f01      	subs	r7, #1
 80063b4:	e7e6      	b.n	8006384 <__mdiff+0xec>
 80063b6:	bf00      	nop
 80063b8:	080072ab 	.word	0x080072ab
 80063bc:	080072bc 	.word	0x080072bc

080063c0 <__d2b>:
 80063c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80063c4:	2101      	movs	r1, #1
 80063c6:	4690      	mov	r8, r2
 80063c8:	4699      	mov	r9, r3
 80063ca:	9e08      	ldr	r6, [sp, #32]
 80063cc:	f7ff fcd6 	bl	8005d7c <_Balloc>
 80063d0:	4604      	mov	r4, r0
 80063d2:	b930      	cbnz	r0, 80063e2 <__d2b+0x22>
 80063d4:	4602      	mov	r2, r0
 80063d6:	f240 310f 	movw	r1, #783	@ 0x30f
 80063da:	4b23      	ldr	r3, [pc, #140]	@ (8006468 <__d2b+0xa8>)
 80063dc:	4823      	ldr	r0, [pc, #140]	@ (800646c <__d2b+0xac>)
 80063de:	f000 fa7f 	bl	80068e0 <__assert_func>
 80063e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063ea:	b10d      	cbz	r5, 80063f0 <__d2b+0x30>
 80063ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	f1b8 0300 	subs.w	r3, r8, #0
 80063f6:	d024      	beq.n	8006442 <__d2b+0x82>
 80063f8:	4668      	mov	r0, sp
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	f7ff fd85 	bl	8005f0a <__lo0bits>
 8006400:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006404:	b1d8      	cbz	r0, 800643e <__d2b+0x7e>
 8006406:	f1c0 0320 	rsb	r3, r0, #32
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	430b      	orrs	r3, r1
 8006410:	40c2      	lsrs	r2, r0
 8006412:	6163      	str	r3, [r4, #20]
 8006414:	9201      	str	r2, [sp, #4]
 8006416:	9b01      	ldr	r3, [sp, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	bf0c      	ite	eq
 800641c:	2201      	moveq	r2, #1
 800641e:	2202      	movne	r2, #2
 8006420:	61a3      	str	r3, [r4, #24]
 8006422:	6122      	str	r2, [r4, #16]
 8006424:	b1ad      	cbz	r5, 8006452 <__d2b+0x92>
 8006426:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800642a:	4405      	add	r5, r0
 800642c:	6035      	str	r5, [r6, #0]
 800642e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006434:	6018      	str	r0, [r3, #0]
 8006436:	4620      	mov	r0, r4
 8006438:	b002      	add	sp, #8
 800643a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800643e:	6161      	str	r1, [r4, #20]
 8006440:	e7e9      	b.n	8006416 <__d2b+0x56>
 8006442:	a801      	add	r0, sp, #4
 8006444:	f7ff fd61 	bl	8005f0a <__lo0bits>
 8006448:	9b01      	ldr	r3, [sp, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	6163      	str	r3, [r4, #20]
 800644e:	3020      	adds	r0, #32
 8006450:	e7e7      	b.n	8006422 <__d2b+0x62>
 8006452:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006456:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800645a:	6030      	str	r0, [r6, #0]
 800645c:	6918      	ldr	r0, [r3, #16]
 800645e:	f7ff fd35 	bl	8005ecc <__hi0bits>
 8006462:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006466:	e7e4      	b.n	8006432 <__d2b+0x72>
 8006468:	080072ab 	.word	0x080072ab
 800646c:	080072bc 	.word	0x080072bc

08006470 <__ssputs_r>:
 8006470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	461f      	mov	r7, r3
 8006476:	688e      	ldr	r6, [r1, #8]
 8006478:	4682      	mov	sl, r0
 800647a:	42be      	cmp	r6, r7
 800647c:	460c      	mov	r4, r1
 800647e:	4690      	mov	r8, r2
 8006480:	680b      	ldr	r3, [r1, #0]
 8006482:	d82d      	bhi.n	80064e0 <__ssputs_r+0x70>
 8006484:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006488:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800648c:	d026      	beq.n	80064dc <__ssputs_r+0x6c>
 800648e:	6965      	ldr	r5, [r4, #20]
 8006490:	6909      	ldr	r1, [r1, #16]
 8006492:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006496:	eba3 0901 	sub.w	r9, r3, r1
 800649a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800649e:	1c7b      	adds	r3, r7, #1
 80064a0:	444b      	add	r3, r9
 80064a2:	106d      	asrs	r5, r5, #1
 80064a4:	429d      	cmp	r5, r3
 80064a6:	bf38      	it	cc
 80064a8:	461d      	movcc	r5, r3
 80064aa:	0553      	lsls	r3, r2, #21
 80064ac:	d527      	bpl.n	80064fe <__ssputs_r+0x8e>
 80064ae:	4629      	mov	r1, r5
 80064b0:	f7ff fbd8 	bl	8005c64 <_malloc_r>
 80064b4:	4606      	mov	r6, r0
 80064b6:	b360      	cbz	r0, 8006512 <__ssputs_r+0xa2>
 80064b8:	464a      	mov	r2, r9
 80064ba:	6921      	ldr	r1, [r4, #16]
 80064bc:	f000 fa02 	bl	80068c4 <memcpy>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	6126      	str	r6, [r4, #16]
 80064ce:	444e      	add	r6, r9
 80064d0:	6026      	str	r6, [r4, #0]
 80064d2:	463e      	mov	r6, r7
 80064d4:	6165      	str	r5, [r4, #20]
 80064d6:	eba5 0509 	sub.w	r5, r5, r9
 80064da:	60a5      	str	r5, [r4, #8]
 80064dc:	42be      	cmp	r6, r7
 80064de:	d900      	bls.n	80064e2 <__ssputs_r+0x72>
 80064e0:	463e      	mov	r6, r7
 80064e2:	4632      	mov	r2, r6
 80064e4:	4641      	mov	r1, r8
 80064e6:	6820      	ldr	r0, [r4, #0]
 80064e8:	f000 f9c2 	bl	8006870 <memmove>
 80064ec:	2000      	movs	r0, #0
 80064ee:	68a3      	ldr	r3, [r4, #8]
 80064f0:	1b9b      	subs	r3, r3, r6
 80064f2:	60a3      	str	r3, [r4, #8]
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	4433      	add	r3, r6
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fe:	462a      	mov	r2, r5
 8006500:	f000 fa32 	bl	8006968 <_realloc_r>
 8006504:	4606      	mov	r6, r0
 8006506:	2800      	cmp	r0, #0
 8006508:	d1e0      	bne.n	80064cc <__ssputs_r+0x5c>
 800650a:	4650      	mov	r0, sl
 800650c:	6921      	ldr	r1, [r4, #16]
 800650e:	f7ff fb37 	bl	8005b80 <_free_r>
 8006512:	230c      	movs	r3, #12
 8006514:	f8ca 3000 	str.w	r3, [sl]
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	f04f 30ff 	mov.w	r0, #4294967295
 800651e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006522:	81a3      	strh	r3, [r4, #12]
 8006524:	e7e9      	b.n	80064fa <__ssputs_r+0x8a>
	...

08006528 <_svfiprintf_r>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	4698      	mov	r8, r3
 800652e:	898b      	ldrh	r3, [r1, #12]
 8006530:	4607      	mov	r7, r0
 8006532:	061b      	lsls	r3, r3, #24
 8006534:	460d      	mov	r5, r1
 8006536:	4614      	mov	r4, r2
 8006538:	b09d      	sub	sp, #116	@ 0x74
 800653a:	d510      	bpl.n	800655e <_svfiprintf_r+0x36>
 800653c:	690b      	ldr	r3, [r1, #16]
 800653e:	b973      	cbnz	r3, 800655e <_svfiprintf_r+0x36>
 8006540:	2140      	movs	r1, #64	@ 0x40
 8006542:	f7ff fb8f 	bl	8005c64 <_malloc_r>
 8006546:	6028      	str	r0, [r5, #0]
 8006548:	6128      	str	r0, [r5, #16]
 800654a:	b930      	cbnz	r0, 800655a <_svfiprintf_r+0x32>
 800654c:	230c      	movs	r3, #12
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	b01d      	add	sp, #116	@ 0x74
 8006556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655a:	2340      	movs	r3, #64	@ 0x40
 800655c:	616b      	str	r3, [r5, #20]
 800655e:	2300      	movs	r3, #0
 8006560:	9309      	str	r3, [sp, #36]	@ 0x24
 8006562:	2320      	movs	r3, #32
 8006564:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006568:	2330      	movs	r3, #48	@ 0x30
 800656a:	f04f 0901 	mov.w	r9, #1
 800656e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006572:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800670c <_svfiprintf_r+0x1e4>
 8006576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800657a:	4623      	mov	r3, r4
 800657c:	469a      	mov	sl, r3
 800657e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006582:	b10a      	cbz	r2, 8006588 <_svfiprintf_r+0x60>
 8006584:	2a25      	cmp	r2, #37	@ 0x25
 8006586:	d1f9      	bne.n	800657c <_svfiprintf_r+0x54>
 8006588:	ebba 0b04 	subs.w	fp, sl, r4
 800658c:	d00b      	beq.n	80065a6 <_svfiprintf_r+0x7e>
 800658e:	465b      	mov	r3, fp
 8006590:	4622      	mov	r2, r4
 8006592:	4629      	mov	r1, r5
 8006594:	4638      	mov	r0, r7
 8006596:	f7ff ff6b 	bl	8006470 <__ssputs_r>
 800659a:	3001      	adds	r0, #1
 800659c:	f000 80a7 	beq.w	80066ee <_svfiprintf_r+0x1c6>
 80065a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065a2:	445a      	add	r2, fp
 80065a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80065a6:	f89a 3000 	ldrb.w	r3, [sl]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 809f 	beq.w	80066ee <_svfiprintf_r+0x1c6>
 80065b0:	2300      	movs	r3, #0
 80065b2:	f04f 32ff 	mov.w	r2, #4294967295
 80065b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ba:	f10a 0a01 	add.w	sl, sl, #1
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	9307      	str	r3, [sp, #28]
 80065c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80065c8:	4654      	mov	r4, sl
 80065ca:	2205      	movs	r2, #5
 80065cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d0:	484e      	ldr	r0, [pc, #312]	@ (800670c <_svfiprintf_r+0x1e4>)
 80065d2:	f7fe fc6a 	bl	8004eaa <memchr>
 80065d6:	9a04      	ldr	r2, [sp, #16]
 80065d8:	b9d8      	cbnz	r0, 8006612 <_svfiprintf_r+0xea>
 80065da:	06d0      	lsls	r0, r2, #27
 80065dc:	bf44      	itt	mi
 80065de:	2320      	movmi	r3, #32
 80065e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065e4:	0711      	lsls	r1, r2, #28
 80065e6:	bf44      	itt	mi
 80065e8:	232b      	movmi	r3, #43	@ 0x2b
 80065ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065ee:	f89a 3000 	ldrb.w	r3, [sl]
 80065f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f4:	d015      	beq.n	8006622 <_svfiprintf_r+0xfa>
 80065f6:	4654      	mov	r4, sl
 80065f8:	2000      	movs	r0, #0
 80065fa:	f04f 0c0a 	mov.w	ip, #10
 80065fe:	9a07      	ldr	r2, [sp, #28]
 8006600:	4621      	mov	r1, r4
 8006602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006606:	3b30      	subs	r3, #48	@ 0x30
 8006608:	2b09      	cmp	r3, #9
 800660a:	d94b      	bls.n	80066a4 <_svfiprintf_r+0x17c>
 800660c:	b1b0      	cbz	r0, 800663c <_svfiprintf_r+0x114>
 800660e:	9207      	str	r2, [sp, #28]
 8006610:	e014      	b.n	800663c <_svfiprintf_r+0x114>
 8006612:	eba0 0308 	sub.w	r3, r0, r8
 8006616:	fa09 f303 	lsl.w	r3, r9, r3
 800661a:	4313      	orrs	r3, r2
 800661c:	46a2      	mov	sl, r4
 800661e:	9304      	str	r3, [sp, #16]
 8006620:	e7d2      	b.n	80065c8 <_svfiprintf_r+0xa0>
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	1d19      	adds	r1, r3, #4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	9103      	str	r1, [sp, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	bfbb      	ittet	lt
 800662e:	425b      	neglt	r3, r3
 8006630:	f042 0202 	orrlt.w	r2, r2, #2
 8006634:	9307      	strge	r3, [sp, #28]
 8006636:	9307      	strlt	r3, [sp, #28]
 8006638:	bfb8      	it	lt
 800663a:	9204      	strlt	r2, [sp, #16]
 800663c:	7823      	ldrb	r3, [r4, #0]
 800663e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006640:	d10a      	bne.n	8006658 <_svfiprintf_r+0x130>
 8006642:	7863      	ldrb	r3, [r4, #1]
 8006644:	2b2a      	cmp	r3, #42	@ 0x2a
 8006646:	d132      	bne.n	80066ae <_svfiprintf_r+0x186>
 8006648:	9b03      	ldr	r3, [sp, #12]
 800664a:	3402      	adds	r4, #2
 800664c:	1d1a      	adds	r2, r3, #4
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	9203      	str	r2, [sp, #12]
 8006652:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006656:	9305      	str	r3, [sp, #20]
 8006658:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006710 <_svfiprintf_r+0x1e8>
 800665c:	2203      	movs	r2, #3
 800665e:	4650      	mov	r0, sl
 8006660:	7821      	ldrb	r1, [r4, #0]
 8006662:	f7fe fc22 	bl	8004eaa <memchr>
 8006666:	b138      	cbz	r0, 8006678 <_svfiprintf_r+0x150>
 8006668:	2240      	movs	r2, #64	@ 0x40
 800666a:	9b04      	ldr	r3, [sp, #16]
 800666c:	eba0 000a 	sub.w	r0, r0, sl
 8006670:	4082      	lsls	r2, r0
 8006672:	4313      	orrs	r3, r2
 8006674:	3401      	adds	r4, #1
 8006676:	9304      	str	r3, [sp, #16]
 8006678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667c:	2206      	movs	r2, #6
 800667e:	4825      	ldr	r0, [pc, #148]	@ (8006714 <_svfiprintf_r+0x1ec>)
 8006680:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006684:	f7fe fc11 	bl	8004eaa <memchr>
 8006688:	2800      	cmp	r0, #0
 800668a:	d036      	beq.n	80066fa <_svfiprintf_r+0x1d2>
 800668c:	4b22      	ldr	r3, [pc, #136]	@ (8006718 <_svfiprintf_r+0x1f0>)
 800668e:	bb1b      	cbnz	r3, 80066d8 <_svfiprintf_r+0x1b0>
 8006690:	9b03      	ldr	r3, [sp, #12]
 8006692:	3307      	adds	r3, #7
 8006694:	f023 0307 	bic.w	r3, r3, #7
 8006698:	3308      	adds	r3, #8
 800669a:	9303      	str	r3, [sp, #12]
 800669c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669e:	4433      	add	r3, r6
 80066a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a2:	e76a      	b.n	800657a <_svfiprintf_r+0x52>
 80066a4:	460c      	mov	r4, r1
 80066a6:	2001      	movs	r0, #1
 80066a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80066ac:	e7a8      	b.n	8006600 <_svfiprintf_r+0xd8>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f04f 0c0a 	mov.w	ip, #10
 80066b4:	4619      	mov	r1, r3
 80066b6:	3401      	adds	r4, #1
 80066b8:	9305      	str	r3, [sp, #20]
 80066ba:	4620      	mov	r0, r4
 80066bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066c0:	3a30      	subs	r2, #48	@ 0x30
 80066c2:	2a09      	cmp	r2, #9
 80066c4:	d903      	bls.n	80066ce <_svfiprintf_r+0x1a6>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0c6      	beq.n	8006658 <_svfiprintf_r+0x130>
 80066ca:	9105      	str	r1, [sp, #20]
 80066cc:	e7c4      	b.n	8006658 <_svfiprintf_r+0x130>
 80066ce:	4604      	mov	r4, r0
 80066d0:	2301      	movs	r3, #1
 80066d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80066d6:	e7f0      	b.n	80066ba <_svfiprintf_r+0x192>
 80066d8:	ab03      	add	r3, sp, #12
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	462a      	mov	r2, r5
 80066de:	4638      	mov	r0, r7
 80066e0:	4b0e      	ldr	r3, [pc, #56]	@ (800671c <_svfiprintf_r+0x1f4>)
 80066e2:	a904      	add	r1, sp, #16
 80066e4:	f7fd fe58 	bl	8004398 <_printf_float>
 80066e8:	1c42      	adds	r2, r0, #1
 80066ea:	4606      	mov	r6, r0
 80066ec:	d1d6      	bne.n	800669c <_svfiprintf_r+0x174>
 80066ee:	89ab      	ldrh	r3, [r5, #12]
 80066f0:	065b      	lsls	r3, r3, #25
 80066f2:	f53f af2d 	bmi.w	8006550 <_svfiprintf_r+0x28>
 80066f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066f8:	e72c      	b.n	8006554 <_svfiprintf_r+0x2c>
 80066fa:	ab03      	add	r3, sp, #12
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	462a      	mov	r2, r5
 8006700:	4638      	mov	r0, r7
 8006702:	4b06      	ldr	r3, [pc, #24]	@ (800671c <_svfiprintf_r+0x1f4>)
 8006704:	a904      	add	r1, sp, #16
 8006706:	f7fe f8e5 	bl	80048d4 <_printf_i>
 800670a:	e7ed      	b.n	80066e8 <_svfiprintf_r+0x1c0>
 800670c:	08007315 	.word	0x08007315
 8006710:	0800731b 	.word	0x0800731b
 8006714:	0800731f 	.word	0x0800731f
 8006718:	08004399 	.word	0x08004399
 800671c:	08006471 	.word	0x08006471

08006720 <__sflush_r>:
 8006720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	0716      	lsls	r6, r2, #28
 8006728:	4605      	mov	r5, r0
 800672a:	460c      	mov	r4, r1
 800672c:	d454      	bmi.n	80067d8 <__sflush_r+0xb8>
 800672e:	684b      	ldr	r3, [r1, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dc02      	bgt.n	800673a <__sflush_r+0x1a>
 8006734:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	dd48      	ble.n	80067cc <__sflush_r+0xac>
 800673a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800673c:	2e00      	cmp	r6, #0
 800673e:	d045      	beq.n	80067cc <__sflush_r+0xac>
 8006740:	2300      	movs	r3, #0
 8006742:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006746:	682f      	ldr	r7, [r5, #0]
 8006748:	6a21      	ldr	r1, [r4, #32]
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	d030      	beq.n	80067b0 <__sflush_r+0x90>
 800674e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	0759      	lsls	r1, r3, #29
 8006754:	d505      	bpl.n	8006762 <__sflush_r+0x42>
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	1ad2      	subs	r2, r2, r3
 800675a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800675c:	b10b      	cbz	r3, 8006762 <__sflush_r+0x42>
 800675e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006760:	1ad2      	subs	r2, r2, r3
 8006762:	2300      	movs	r3, #0
 8006764:	4628      	mov	r0, r5
 8006766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006768:	6a21      	ldr	r1, [r4, #32]
 800676a:	47b0      	blx	r6
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	d106      	bne.n	8006780 <__sflush_r+0x60>
 8006772:	6829      	ldr	r1, [r5, #0]
 8006774:	291d      	cmp	r1, #29
 8006776:	d82b      	bhi.n	80067d0 <__sflush_r+0xb0>
 8006778:	4a28      	ldr	r2, [pc, #160]	@ (800681c <__sflush_r+0xfc>)
 800677a:	40ca      	lsrs	r2, r1
 800677c:	07d6      	lsls	r6, r2, #31
 800677e:	d527      	bpl.n	80067d0 <__sflush_r+0xb0>
 8006780:	2200      	movs	r2, #0
 8006782:	6062      	str	r2, [r4, #4]
 8006784:	6922      	ldr	r2, [r4, #16]
 8006786:	04d9      	lsls	r1, r3, #19
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	d504      	bpl.n	8006796 <__sflush_r+0x76>
 800678c:	1c42      	adds	r2, r0, #1
 800678e:	d101      	bne.n	8006794 <__sflush_r+0x74>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b903      	cbnz	r3, 8006796 <__sflush_r+0x76>
 8006794:	6560      	str	r0, [r4, #84]	@ 0x54
 8006796:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006798:	602f      	str	r7, [r5, #0]
 800679a:	b1b9      	cbz	r1, 80067cc <__sflush_r+0xac>
 800679c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067a0:	4299      	cmp	r1, r3
 80067a2:	d002      	beq.n	80067aa <__sflush_r+0x8a>
 80067a4:	4628      	mov	r0, r5
 80067a6:	f7ff f9eb 	bl	8005b80 <_free_r>
 80067aa:	2300      	movs	r3, #0
 80067ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80067ae:	e00d      	b.n	80067cc <__sflush_r+0xac>
 80067b0:	2301      	movs	r3, #1
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b0      	blx	r6
 80067b6:	4602      	mov	r2, r0
 80067b8:	1c50      	adds	r0, r2, #1
 80067ba:	d1c9      	bne.n	8006750 <__sflush_r+0x30>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0c6      	beq.n	8006750 <__sflush_r+0x30>
 80067c2:	2b1d      	cmp	r3, #29
 80067c4:	d001      	beq.n	80067ca <__sflush_r+0xaa>
 80067c6:	2b16      	cmp	r3, #22
 80067c8:	d11d      	bne.n	8006806 <__sflush_r+0xe6>
 80067ca:	602f      	str	r7, [r5, #0]
 80067cc:	2000      	movs	r0, #0
 80067ce:	e021      	b.n	8006814 <__sflush_r+0xf4>
 80067d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067d4:	b21b      	sxth	r3, r3
 80067d6:	e01a      	b.n	800680e <__sflush_r+0xee>
 80067d8:	690f      	ldr	r7, [r1, #16]
 80067da:	2f00      	cmp	r7, #0
 80067dc:	d0f6      	beq.n	80067cc <__sflush_r+0xac>
 80067de:	0793      	lsls	r3, r2, #30
 80067e0:	bf18      	it	ne
 80067e2:	2300      	movne	r3, #0
 80067e4:	680e      	ldr	r6, [r1, #0]
 80067e6:	bf08      	it	eq
 80067e8:	694b      	ldreq	r3, [r1, #20]
 80067ea:	1bf6      	subs	r6, r6, r7
 80067ec:	600f      	str	r7, [r1, #0]
 80067ee:	608b      	str	r3, [r1, #8]
 80067f0:	2e00      	cmp	r6, #0
 80067f2:	ddeb      	ble.n	80067cc <__sflush_r+0xac>
 80067f4:	4633      	mov	r3, r6
 80067f6:	463a      	mov	r2, r7
 80067f8:	4628      	mov	r0, r5
 80067fa:	6a21      	ldr	r1, [r4, #32]
 80067fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006800:	47e0      	blx	ip
 8006802:	2800      	cmp	r0, #0
 8006804:	dc07      	bgt.n	8006816 <__sflush_r+0xf6>
 8006806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800680e:	f04f 30ff 	mov.w	r0, #4294967295
 8006812:	81a3      	strh	r3, [r4, #12]
 8006814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006816:	4407      	add	r7, r0
 8006818:	1a36      	subs	r6, r6, r0
 800681a:	e7e9      	b.n	80067f0 <__sflush_r+0xd0>
 800681c:	20400001 	.word	0x20400001

08006820 <_fflush_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	690b      	ldr	r3, [r1, #16]
 8006824:	4605      	mov	r5, r0
 8006826:	460c      	mov	r4, r1
 8006828:	b913      	cbnz	r3, 8006830 <_fflush_r+0x10>
 800682a:	2500      	movs	r5, #0
 800682c:	4628      	mov	r0, r5
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	b118      	cbz	r0, 800683a <_fflush_r+0x1a>
 8006832:	6a03      	ldr	r3, [r0, #32]
 8006834:	b90b      	cbnz	r3, 800683a <_fflush_r+0x1a>
 8006836:	f7fe f9f7 	bl	8004c28 <__sinit>
 800683a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0f3      	beq.n	800682a <_fflush_r+0xa>
 8006842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006844:	07d0      	lsls	r0, r2, #31
 8006846:	d404      	bmi.n	8006852 <_fflush_r+0x32>
 8006848:	0599      	lsls	r1, r3, #22
 800684a:	d402      	bmi.n	8006852 <_fflush_r+0x32>
 800684c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800684e:	f7fe fb2a 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 8006852:	4628      	mov	r0, r5
 8006854:	4621      	mov	r1, r4
 8006856:	f7ff ff63 	bl	8006720 <__sflush_r>
 800685a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800685c:	4605      	mov	r5, r0
 800685e:	07da      	lsls	r2, r3, #31
 8006860:	d4e4      	bmi.n	800682c <_fflush_r+0xc>
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	059b      	lsls	r3, r3, #22
 8006866:	d4e1      	bmi.n	800682c <_fflush_r+0xc>
 8006868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800686a:	f7fe fb1d 	bl	8004ea8 <__retarget_lock_release_recursive>
 800686e:	e7dd      	b.n	800682c <_fflush_r+0xc>

08006870 <memmove>:
 8006870:	4288      	cmp	r0, r1
 8006872:	b510      	push	{r4, lr}
 8006874:	eb01 0402 	add.w	r4, r1, r2
 8006878:	d902      	bls.n	8006880 <memmove+0x10>
 800687a:	4284      	cmp	r4, r0
 800687c:	4623      	mov	r3, r4
 800687e:	d807      	bhi.n	8006890 <memmove+0x20>
 8006880:	1e43      	subs	r3, r0, #1
 8006882:	42a1      	cmp	r1, r4
 8006884:	d008      	beq.n	8006898 <memmove+0x28>
 8006886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800688a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800688e:	e7f8      	b.n	8006882 <memmove+0x12>
 8006890:	4601      	mov	r1, r0
 8006892:	4402      	add	r2, r0
 8006894:	428a      	cmp	r2, r1
 8006896:	d100      	bne.n	800689a <memmove+0x2a>
 8006898:	bd10      	pop	{r4, pc}
 800689a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800689e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068a2:	e7f7      	b.n	8006894 <memmove+0x24>

080068a4 <_sbrk_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	2300      	movs	r3, #0
 80068a8:	4d05      	ldr	r5, [pc, #20]	@ (80068c0 <_sbrk_r+0x1c>)
 80068aa:	4604      	mov	r4, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	f7fa ff82 	bl	80017b8 <_sbrk>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d102      	bne.n	80068be <_sbrk_r+0x1a>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	b103      	cbz	r3, 80068be <_sbrk_r+0x1a>
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	20000460 	.word	0x20000460

080068c4 <memcpy>:
 80068c4:	440a      	add	r2, r1
 80068c6:	4291      	cmp	r1, r2
 80068c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068cc:	d100      	bne.n	80068d0 <memcpy+0xc>
 80068ce:	4770      	bx	lr
 80068d0:	b510      	push	{r4, lr}
 80068d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068d6:	4291      	cmp	r1, r2
 80068d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068dc:	d1f9      	bne.n	80068d2 <memcpy+0xe>
 80068de:	bd10      	pop	{r4, pc}

080068e0 <__assert_func>:
 80068e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068e2:	4614      	mov	r4, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4b09      	ldr	r3, [pc, #36]	@ (800690c <__assert_func+0x2c>)
 80068e8:	4605      	mov	r5, r0
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68d8      	ldr	r0, [r3, #12]
 80068ee:	b14c      	cbz	r4, 8006904 <__assert_func+0x24>
 80068f0:	4b07      	ldr	r3, [pc, #28]	@ (8006910 <__assert_func+0x30>)
 80068f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068f6:	9100      	str	r1, [sp, #0]
 80068f8:	462b      	mov	r3, r5
 80068fa:	4906      	ldr	r1, [pc, #24]	@ (8006914 <__assert_func+0x34>)
 80068fc:	f000 f870 	bl	80069e0 <fiprintf>
 8006900:	f000 f880 	bl	8006a04 <abort>
 8006904:	4b04      	ldr	r3, [pc, #16]	@ (8006918 <__assert_func+0x38>)
 8006906:	461c      	mov	r4, r3
 8006908:	e7f3      	b.n	80068f2 <__assert_func+0x12>
 800690a:	bf00      	nop
 800690c:	2000001c 	.word	0x2000001c
 8006910:	08007330 	.word	0x08007330
 8006914:	0800733d 	.word	0x0800733d
 8006918:	0800736b 	.word	0x0800736b

0800691c <_calloc_r>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	fba1 5402 	umull	r5, r4, r1, r2
 8006922:	b934      	cbnz	r4, 8006932 <_calloc_r+0x16>
 8006924:	4629      	mov	r1, r5
 8006926:	f7ff f99d 	bl	8005c64 <_malloc_r>
 800692a:	4606      	mov	r6, r0
 800692c:	b928      	cbnz	r0, 800693a <_calloc_r+0x1e>
 800692e:	4630      	mov	r0, r6
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	220c      	movs	r2, #12
 8006934:	2600      	movs	r6, #0
 8006936:	6002      	str	r2, [r0, #0]
 8006938:	e7f9      	b.n	800692e <_calloc_r+0x12>
 800693a:	462a      	mov	r2, r5
 800693c:	4621      	mov	r1, r4
 800693e:	f7fe fa22 	bl	8004d86 <memset>
 8006942:	e7f4      	b.n	800692e <_calloc_r+0x12>

08006944 <__ascii_mbtowc>:
 8006944:	b082      	sub	sp, #8
 8006946:	b901      	cbnz	r1, 800694a <__ascii_mbtowc+0x6>
 8006948:	a901      	add	r1, sp, #4
 800694a:	b142      	cbz	r2, 800695e <__ascii_mbtowc+0x1a>
 800694c:	b14b      	cbz	r3, 8006962 <__ascii_mbtowc+0x1e>
 800694e:	7813      	ldrb	r3, [r2, #0]
 8006950:	600b      	str	r3, [r1, #0]
 8006952:	7812      	ldrb	r2, [r2, #0]
 8006954:	1e10      	subs	r0, r2, #0
 8006956:	bf18      	it	ne
 8006958:	2001      	movne	r0, #1
 800695a:	b002      	add	sp, #8
 800695c:	4770      	bx	lr
 800695e:	4610      	mov	r0, r2
 8006960:	e7fb      	b.n	800695a <__ascii_mbtowc+0x16>
 8006962:	f06f 0001 	mvn.w	r0, #1
 8006966:	e7f8      	b.n	800695a <__ascii_mbtowc+0x16>

08006968 <_realloc_r>:
 8006968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800696c:	4607      	mov	r7, r0
 800696e:	4614      	mov	r4, r2
 8006970:	460d      	mov	r5, r1
 8006972:	b921      	cbnz	r1, 800697e <_realloc_r+0x16>
 8006974:	4611      	mov	r1, r2
 8006976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800697a:	f7ff b973 	b.w	8005c64 <_malloc_r>
 800697e:	b92a      	cbnz	r2, 800698c <_realloc_r+0x24>
 8006980:	f7ff f8fe 	bl	8005b80 <_free_r>
 8006984:	4625      	mov	r5, r4
 8006986:	4628      	mov	r0, r5
 8006988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800698c:	f000 f841 	bl	8006a12 <_malloc_usable_size_r>
 8006990:	4284      	cmp	r4, r0
 8006992:	4606      	mov	r6, r0
 8006994:	d802      	bhi.n	800699c <_realloc_r+0x34>
 8006996:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800699a:	d8f4      	bhi.n	8006986 <_realloc_r+0x1e>
 800699c:	4621      	mov	r1, r4
 800699e:	4638      	mov	r0, r7
 80069a0:	f7ff f960 	bl	8005c64 <_malloc_r>
 80069a4:	4680      	mov	r8, r0
 80069a6:	b908      	cbnz	r0, 80069ac <_realloc_r+0x44>
 80069a8:	4645      	mov	r5, r8
 80069aa:	e7ec      	b.n	8006986 <_realloc_r+0x1e>
 80069ac:	42b4      	cmp	r4, r6
 80069ae:	4622      	mov	r2, r4
 80069b0:	4629      	mov	r1, r5
 80069b2:	bf28      	it	cs
 80069b4:	4632      	movcs	r2, r6
 80069b6:	f7ff ff85 	bl	80068c4 <memcpy>
 80069ba:	4629      	mov	r1, r5
 80069bc:	4638      	mov	r0, r7
 80069be:	f7ff f8df 	bl	8005b80 <_free_r>
 80069c2:	e7f1      	b.n	80069a8 <_realloc_r+0x40>

080069c4 <__ascii_wctomb>:
 80069c4:	4603      	mov	r3, r0
 80069c6:	4608      	mov	r0, r1
 80069c8:	b141      	cbz	r1, 80069dc <__ascii_wctomb+0x18>
 80069ca:	2aff      	cmp	r2, #255	@ 0xff
 80069cc:	d904      	bls.n	80069d8 <__ascii_wctomb+0x14>
 80069ce:	228a      	movs	r2, #138	@ 0x8a
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	4770      	bx	lr
 80069d8:	2001      	movs	r0, #1
 80069da:	700a      	strb	r2, [r1, #0]
 80069dc:	4770      	bx	lr
	...

080069e0 <fiprintf>:
 80069e0:	b40e      	push	{r1, r2, r3}
 80069e2:	b503      	push	{r0, r1, lr}
 80069e4:	4601      	mov	r1, r0
 80069e6:	ab03      	add	r3, sp, #12
 80069e8:	4805      	ldr	r0, [pc, #20]	@ (8006a00 <fiprintf+0x20>)
 80069ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ee:	6800      	ldr	r0, [r0, #0]
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	f000 f83d 	bl	8006a70 <_vfiprintf_r>
 80069f6:	b002      	add	sp, #8
 80069f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069fc:	b003      	add	sp, #12
 80069fe:	4770      	bx	lr
 8006a00:	2000001c 	.word	0x2000001c

08006a04 <abort>:
 8006a04:	2006      	movs	r0, #6
 8006a06:	b508      	push	{r3, lr}
 8006a08:	f000 fa06 	bl	8006e18 <raise>
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f7fa fe5e 	bl	80016ce <_exit>

08006a12 <_malloc_usable_size_r>:
 8006a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a16:	1f18      	subs	r0, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bfbc      	itt	lt
 8006a1c:	580b      	ldrlt	r3, [r1, r0]
 8006a1e:	18c0      	addlt	r0, r0, r3
 8006a20:	4770      	bx	lr

08006a22 <__sfputc_r>:
 8006a22:	6893      	ldr	r3, [r2, #8]
 8006a24:	b410      	push	{r4}
 8006a26:	3b01      	subs	r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	6093      	str	r3, [r2, #8]
 8006a2c:	da07      	bge.n	8006a3e <__sfputc_r+0x1c>
 8006a2e:	6994      	ldr	r4, [r2, #24]
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	db01      	blt.n	8006a38 <__sfputc_r+0x16>
 8006a34:	290a      	cmp	r1, #10
 8006a36:	d102      	bne.n	8006a3e <__sfputc_r+0x1c>
 8006a38:	bc10      	pop	{r4}
 8006a3a:	f000 b931 	b.w	8006ca0 <__swbuf_r>
 8006a3e:	6813      	ldr	r3, [r2, #0]
 8006a40:	1c58      	adds	r0, r3, #1
 8006a42:	6010      	str	r0, [r2, #0]
 8006a44:	7019      	strb	r1, [r3, #0]
 8006a46:	4608      	mov	r0, r1
 8006a48:	bc10      	pop	{r4}
 8006a4a:	4770      	bx	lr

08006a4c <__sfputs_r>:
 8006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460f      	mov	r7, r1
 8006a52:	4614      	mov	r4, r2
 8006a54:	18d5      	adds	r5, r2, r3
 8006a56:	42ac      	cmp	r4, r5
 8006a58:	d101      	bne.n	8006a5e <__sfputs_r+0x12>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e007      	b.n	8006a6e <__sfputs_r+0x22>
 8006a5e:	463a      	mov	r2, r7
 8006a60:	4630      	mov	r0, r6
 8006a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a66:	f7ff ffdc 	bl	8006a22 <__sfputc_r>
 8006a6a:	1c43      	adds	r3, r0, #1
 8006a6c:	d1f3      	bne.n	8006a56 <__sfputs_r+0xa>
 8006a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a70 <_vfiprintf_r>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	460d      	mov	r5, r1
 8006a76:	4614      	mov	r4, r2
 8006a78:	4698      	mov	r8, r3
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	b09d      	sub	sp, #116	@ 0x74
 8006a7e:	b118      	cbz	r0, 8006a88 <_vfiprintf_r+0x18>
 8006a80:	6a03      	ldr	r3, [r0, #32]
 8006a82:	b90b      	cbnz	r3, 8006a88 <_vfiprintf_r+0x18>
 8006a84:	f7fe f8d0 	bl	8004c28 <__sinit>
 8006a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a8a:	07d9      	lsls	r1, r3, #31
 8006a8c:	d405      	bmi.n	8006a9a <_vfiprintf_r+0x2a>
 8006a8e:	89ab      	ldrh	r3, [r5, #12]
 8006a90:	059a      	lsls	r2, r3, #22
 8006a92:	d402      	bmi.n	8006a9a <_vfiprintf_r+0x2a>
 8006a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a96:	f7fe fa06 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 8006a9a:	89ab      	ldrh	r3, [r5, #12]
 8006a9c:	071b      	lsls	r3, r3, #28
 8006a9e:	d501      	bpl.n	8006aa4 <_vfiprintf_r+0x34>
 8006aa0:	692b      	ldr	r3, [r5, #16]
 8006aa2:	b99b      	cbnz	r3, 8006acc <_vfiprintf_r+0x5c>
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f000 f938 	bl	8006d1c <__swsetup_r>
 8006aac:	b170      	cbz	r0, 8006acc <_vfiprintf_r+0x5c>
 8006aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ab0:	07dc      	lsls	r4, r3, #31
 8006ab2:	d504      	bpl.n	8006abe <_vfiprintf_r+0x4e>
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	b01d      	add	sp, #116	@ 0x74
 8006aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	0598      	lsls	r0, r3, #22
 8006ac2:	d4f7      	bmi.n	8006ab4 <_vfiprintf_r+0x44>
 8006ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ac6:	f7fe f9ef 	bl	8004ea8 <__retarget_lock_release_recursive>
 8006aca:	e7f3      	b.n	8006ab4 <_vfiprintf_r+0x44>
 8006acc:	2300      	movs	r3, #0
 8006ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ad6:	2330      	movs	r3, #48	@ 0x30
 8006ad8:	f04f 0901 	mov.w	r9, #1
 8006adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006c8c <_vfiprintf_r+0x21c>
 8006ae4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ae8:	4623      	mov	r3, r4
 8006aea:	469a      	mov	sl, r3
 8006aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af0:	b10a      	cbz	r2, 8006af6 <_vfiprintf_r+0x86>
 8006af2:	2a25      	cmp	r2, #37	@ 0x25
 8006af4:	d1f9      	bne.n	8006aea <_vfiprintf_r+0x7a>
 8006af6:	ebba 0b04 	subs.w	fp, sl, r4
 8006afa:	d00b      	beq.n	8006b14 <_vfiprintf_r+0xa4>
 8006afc:	465b      	mov	r3, fp
 8006afe:	4622      	mov	r2, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	4630      	mov	r0, r6
 8006b04:	f7ff ffa2 	bl	8006a4c <__sfputs_r>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f000 80a7 	beq.w	8006c5c <_vfiprintf_r+0x1ec>
 8006b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b10:	445a      	add	r2, fp
 8006b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b14:	f89a 3000 	ldrb.w	r3, [sl]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 809f 	beq.w	8006c5c <_vfiprintf_r+0x1ec>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b28:	f10a 0a01 	add.w	sl, sl, #1
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	9307      	str	r3, [sp, #28]
 8006b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b36:	4654      	mov	r4, sl
 8006b38:	2205      	movs	r2, #5
 8006b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b3e:	4853      	ldr	r0, [pc, #332]	@ (8006c8c <_vfiprintf_r+0x21c>)
 8006b40:	f7fe f9b3 	bl	8004eaa <memchr>
 8006b44:	9a04      	ldr	r2, [sp, #16]
 8006b46:	b9d8      	cbnz	r0, 8006b80 <_vfiprintf_r+0x110>
 8006b48:	06d1      	lsls	r1, r2, #27
 8006b4a:	bf44      	itt	mi
 8006b4c:	2320      	movmi	r3, #32
 8006b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b52:	0713      	lsls	r3, r2, #28
 8006b54:	bf44      	itt	mi
 8006b56:	232b      	movmi	r3, #43	@ 0x2b
 8006b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b62:	d015      	beq.n	8006b90 <_vfiprintf_r+0x120>
 8006b64:	4654      	mov	r4, sl
 8006b66:	2000      	movs	r0, #0
 8006b68:	f04f 0c0a 	mov.w	ip, #10
 8006b6c:	9a07      	ldr	r2, [sp, #28]
 8006b6e:	4621      	mov	r1, r4
 8006b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b74:	3b30      	subs	r3, #48	@ 0x30
 8006b76:	2b09      	cmp	r3, #9
 8006b78:	d94b      	bls.n	8006c12 <_vfiprintf_r+0x1a2>
 8006b7a:	b1b0      	cbz	r0, 8006baa <_vfiprintf_r+0x13a>
 8006b7c:	9207      	str	r2, [sp, #28]
 8006b7e:	e014      	b.n	8006baa <_vfiprintf_r+0x13a>
 8006b80:	eba0 0308 	sub.w	r3, r0, r8
 8006b84:	fa09 f303 	lsl.w	r3, r9, r3
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	46a2      	mov	sl, r4
 8006b8c:	9304      	str	r3, [sp, #16]
 8006b8e:	e7d2      	b.n	8006b36 <_vfiprintf_r+0xc6>
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	1d19      	adds	r1, r3, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	9103      	str	r1, [sp, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bfbb      	ittet	lt
 8006b9c:	425b      	neglt	r3, r3
 8006b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8006ba2:	9307      	strge	r3, [sp, #28]
 8006ba4:	9307      	strlt	r3, [sp, #28]
 8006ba6:	bfb8      	it	lt
 8006ba8:	9204      	strlt	r2, [sp, #16]
 8006baa:	7823      	ldrb	r3, [r4, #0]
 8006bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bae:	d10a      	bne.n	8006bc6 <_vfiprintf_r+0x156>
 8006bb0:	7863      	ldrb	r3, [r4, #1]
 8006bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bb4:	d132      	bne.n	8006c1c <_vfiprintf_r+0x1ac>
 8006bb6:	9b03      	ldr	r3, [sp, #12]
 8006bb8:	3402      	adds	r4, #2
 8006bba:	1d1a      	adds	r2, r3, #4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	9203      	str	r2, [sp, #12]
 8006bc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bc4:	9305      	str	r3, [sp, #20]
 8006bc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006c90 <_vfiprintf_r+0x220>
 8006bca:	2203      	movs	r2, #3
 8006bcc:	4650      	mov	r0, sl
 8006bce:	7821      	ldrb	r1, [r4, #0]
 8006bd0:	f7fe f96b 	bl	8004eaa <memchr>
 8006bd4:	b138      	cbz	r0, 8006be6 <_vfiprintf_r+0x176>
 8006bd6:	2240      	movs	r2, #64	@ 0x40
 8006bd8:	9b04      	ldr	r3, [sp, #16]
 8006bda:	eba0 000a 	sub.w	r0, r0, sl
 8006bde:	4082      	lsls	r2, r0
 8006be0:	4313      	orrs	r3, r2
 8006be2:	3401      	adds	r4, #1
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bea:	2206      	movs	r2, #6
 8006bec:	4829      	ldr	r0, [pc, #164]	@ (8006c94 <_vfiprintf_r+0x224>)
 8006bee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bf2:	f7fe f95a 	bl	8004eaa <memchr>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d03f      	beq.n	8006c7a <_vfiprintf_r+0x20a>
 8006bfa:	4b27      	ldr	r3, [pc, #156]	@ (8006c98 <_vfiprintf_r+0x228>)
 8006bfc:	bb1b      	cbnz	r3, 8006c46 <_vfiprintf_r+0x1d6>
 8006bfe:	9b03      	ldr	r3, [sp, #12]
 8006c00:	3307      	adds	r3, #7
 8006c02:	f023 0307 	bic.w	r3, r3, #7
 8006c06:	3308      	adds	r3, #8
 8006c08:	9303      	str	r3, [sp, #12]
 8006c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0c:	443b      	add	r3, r7
 8006c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c10:	e76a      	b.n	8006ae8 <_vfiprintf_r+0x78>
 8006c12:	460c      	mov	r4, r1
 8006c14:	2001      	movs	r0, #1
 8006c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c1a:	e7a8      	b.n	8006b6e <_vfiprintf_r+0xfe>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f04f 0c0a 	mov.w	ip, #10
 8006c22:	4619      	mov	r1, r3
 8006c24:	3401      	adds	r4, #1
 8006c26:	9305      	str	r3, [sp, #20]
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c2e:	3a30      	subs	r2, #48	@ 0x30
 8006c30:	2a09      	cmp	r2, #9
 8006c32:	d903      	bls.n	8006c3c <_vfiprintf_r+0x1cc>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0c6      	beq.n	8006bc6 <_vfiprintf_r+0x156>
 8006c38:	9105      	str	r1, [sp, #20]
 8006c3a:	e7c4      	b.n	8006bc6 <_vfiprintf_r+0x156>
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	2301      	movs	r3, #1
 8006c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c44:	e7f0      	b.n	8006c28 <_vfiprintf_r+0x1b8>
 8006c46:	ab03      	add	r3, sp, #12
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	4b13      	ldr	r3, [pc, #76]	@ (8006c9c <_vfiprintf_r+0x22c>)
 8006c50:	a904      	add	r1, sp, #16
 8006c52:	f7fd fba1 	bl	8004398 <_printf_float>
 8006c56:	4607      	mov	r7, r0
 8006c58:	1c78      	adds	r0, r7, #1
 8006c5a:	d1d6      	bne.n	8006c0a <_vfiprintf_r+0x19a>
 8006c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c5e:	07d9      	lsls	r1, r3, #31
 8006c60:	d405      	bmi.n	8006c6e <_vfiprintf_r+0x1fe>
 8006c62:	89ab      	ldrh	r3, [r5, #12]
 8006c64:	059a      	lsls	r2, r3, #22
 8006c66:	d402      	bmi.n	8006c6e <_vfiprintf_r+0x1fe>
 8006c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c6a:	f7fe f91d 	bl	8004ea8 <__retarget_lock_release_recursive>
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	065b      	lsls	r3, r3, #25
 8006c72:	f53f af1f 	bmi.w	8006ab4 <_vfiprintf_r+0x44>
 8006c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c78:	e71e      	b.n	8006ab8 <_vfiprintf_r+0x48>
 8006c7a:	ab03      	add	r3, sp, #12
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	462a      	mov	r2, r5
 8006c80:	4630      	mov	r0, r6
 8006c82:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <_vfiprintf_r+0x22c>)
 8006c84:	a904      	add	r1, sp, #16
 8006c86:	f7fd fe25 	bl	80048d4 <_printf_i>
 8006c8a:	e7e4      	b.n	8006c56 <_vfiprintf_r+0x1e6>
 8006c8c:	08007315 	.word	0x08007315
 8006c90:	0800731b 	.word	0x0800731b
 8006c94:	0800731f 	.word	0x0800731f
 8006c98:	08004399 	.word	0x08004399
 8006c9c:	08006a4d 	.word	0x08006a4d

08006ca0 <__swbuf_r>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	460e      	mov	r6, r1
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	b118      	cbz	r0, 8006cb2 <__swbuf_r+0x12>
 8006caa:	6a03      	ldr	r3, [r0, #32]
 8006cac:	b90b      	cbnz	r3, 8006cb2 <__swbuf_r+0x12>
 8006cae:	f7fd ffbb 	bl	8004c28 <__sinit>
 8006cb2:	69a3      	ldr	r3, [r4, #24]
 8006cb4:	60a3      	str	r3, [r4, #8]
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	071a      	lsls	r2, r3, #28
 8006cba:	d501      	bpl.n	8006cc0 <__swbuf_r+0x20>
 8006cbc:	6923      	ldr	r3, [r4, #16]
 8006cbe:	b943      	cbnz	r3, 8006cd2 <__swbuf_r+0x32>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f82a 	bl	8006d1c <__swsetup_r>
 8006cc8:	b118      	cbz	r0, 8006cd2 <__swbuf_r+0x32>
 8006cca:	f04f 37ff 	mov.w	r7, #4294967295
 8006cce:	4638      	mov	r0, r7
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	6922      	ldr	r2, [r4, #16]
 8006cd6:	b2f6      	uxtb	r6, r6
 8006cd8:	1a98      	subs	r0, r3, r2
 8006cda:	6963      	ldr	r3, [r4, #20]
 8006cdc:	4637      	mov	r7, r6
 8006cde:	4283      	cmp	r3, r0
 8006ce0:	dc05      	bgt.n	8006cee <__swbuf_r+0x4e>
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f7ff fd9b 	bl	8006820 <_fflush_r>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d1ed      	bne.n	8006cca <__swbuf_r+0x2a>
 8006cee:	68a3      	ldr	r3, [r4, #8]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	60a3      	str	r3, [r4, #8]
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	6022      	str	r2, [r4, #0]
 8006cfa:	701e      	strb	r6, [r3, #0]
 8006cfc:	6962      	ldr	r2, [r4, #20]
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d004      	beq.n	8006d0e <__swbuf_r+0x6e>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	07db      	lsls	r3, r3, #31
 8006d08:	d5e1      	bpl.n	8006cce <__swbuf_r+0x2e>
 8006d0a:	2e0a      	cmp	r6, #10
 8006d0c:	d1df      	bne.n	8006cce <__swbuf_r+0x2e>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f7ff fd85 	bl	8006820 <_fflush_r>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d0d9      	beq.n	8006cce <__swbuf_r+0x2e>
 8006d1a:	e7d6      	b.n	8006cca <__swbuf_r+0x2a>

08006d1c <__swsetup_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4b29      	ldr	r3, [pc, #164]	@ (8006dc4 <__swsetup_r+0xa8>)
 8006d20:	4605      	mov	r5, r0
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	460c      	mov	r4, r1
 8006d26:	b118      	cbz	r0, 8006d30 <__swsetup_r+0x14>
 8006d28:	6a03      	ldr	r3, [r0, #32]
 8006d2a:	b90b      	cbnz	r3, 8006d30 <__swsetup_r+0x14>
 8006d2c:	f7fd ff7c 	bl	8004c28 <__sinit>
 8006d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d34:	0719      	lsls	r1, r3, #28
 8006d36:	d422      	bmi.n	8006d7e <__swsetup_r+0x62>
 8006d38:	06da      	lsls	r2, r3, #27
 8006d3a:	d407      	bmi.n	8006d4c <__swsetup_r+0x30>
 8006d3c:	2209      	movs	r2, #9
 8006d3e:	602a      	str	r2, [r5, #0]
 8006d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	e033      	b.n	8006db4 <__swsetup_r+0x98>
 8006d4c:	0758      	lsls	r0, r3, #29
 8006d4e:	d512      	bpl.n	8006d76 <__swsetup_r+0x5a>
 8006d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d52:	b141      	cbz	r1, 8006d66 <__swsetup_r+0x4a>
 8006d54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	d002      	beq.n	8006d62 <__swsetup_r+0x46>
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f7fe ff0f 	bl	8005b80 <_free_r>
 8006d62:	2300      	movs	r3, #0
 8006d64:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6063      	str	r3, [r4, #4]
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f043 0308 	orr.w	r3, r3, #8
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	b94b      	cbnz	r3, 8006d96 <__swsetup_r+0x7a>
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d8c:	d003      	beq.n	8006d96 <__swsetup_r+0x7a>
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 f882 	bl	8006e9a <__smakebuf_r>
 8006d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9a:	f013 0201 	ands.w	r2, r3, #1
 8006d9e:	d00a      	beq.n	8006db6 <__swsetup_r+0x9a>
 8006da0:	2200      	movs	r2, #0
 8006da2:	60a2      	str	r2, [r4, #8]
 8006da4:	6962      	ldr	r2, [r4, #20]
 8006da6:	4252      	negs	r2, r2
 8006da8:	61a2      	str	r2, [r4, #24]
 8006daa:	6922      	ldr	r2, [r4, #16]
 8006dac:	b942      	cbnz	r2, 8006dc0 <__swsetup_r+0xa4>
 8006dae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006db2:	d1c5      	bne.n	8006d40 <__swsetup_r+0x24>
 8006db4:	bd38      	pop	{r3, r4, r5, pc}
 8006db6:	0799      	lsls	r1, r3, #30
 8006db8:	bf58      	it	pl
 8006dba:	6962      	ldrpl	r2, [r4, #20]
 8006dbc:	60a2      	str	r2, [r4, #8]
 8006dbe:	e7f4      	b.n	8006daa <__swsetup_r+0x8e>
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	e7f7      	b.n	8006db4 <__swsetup_r+0x98>
 8006dc4:	2000001c 	.word	0x2000001c

08006dc8 <_raise_r>:
 8006dc8:	291f      	cmp	r1, #31
 8006dca:	b538      	push	{r3, r4, r5, lr}
 8006dcc:	4605      	mov	r5, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	d904      	bls.n	8006ddc <_raise_r+0x14>
 8006dd2:	2316      	movs	r3, #22
 8006dd4:	6003      	str	r3, [r0, #0]
 8006dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006dde:	b112      	cbz	r2, 8006de6 <_raise_r+0x1e>
 8006de0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006de4:	b94b      	cbnz	r3, 8006dfa <_raise_r+0x32>
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 f830 	bl	8006e4c <_getpid_r>
 8006dec:	4622      	mov	r2, r4
 8006dee:	4601      	mov	r1, r0
 8006df0:	4628      	mov	r0, r5
 8006df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006df6:	f000 b817 	b.w	8006e28 <_kill_r>
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d00a      	beq.n	8006e14 <_raise_r+0x4c>
 8006dfe:	1c59      	adds	r1, r3, #1
 8006e00:	d103      	bne.n	8006e0a <_raise_r+0x42>
 8006e02:	2316      	movs	r3, #22
 8006e04:	6003      	str	r3, [r0, #0]
 8006e06:	2001      	movs	r0, #1
 8006e08:	e7e7      	b.n	8006dda <_raise_r+0x12>
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e12:	4798      	blx	r3
 8006e14:	2000      	movs	r0, #0
 8006e16:	e7e0      	b.n	8006dda <_raise_r+0x12>

08006e18 <raise>:
 8006e18:	4b02      	ldr	r3, [pc, #8]	@ (8006e24 <raise+0xc>)
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	f7ff bfd3 	b.w	8006dc8 <_raise_r>
 8006e22:	bf00      	nop
 8006e24:	2000001c 	.word	0x2000001c

08006e28 <_kill_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4d06      	ldr	r5, [pc, #24]	@ (8006e48 <_kill_r+0x20>)
 8006e2e:	4604      	mov	r4, r0
 8006e30:	4608      	mov	r0, r1
 8006e32:	4611      	mov	r1, r2
 8006e34:	602b      	str	r3, [r5, #0]
 8006e36:	f7fa fc3a 	bl	80016ae <_kill>
 8006e3a:	1c43      	adds	r3, r0, #1
 8006e3c:	d102      	bne.n	8006e44 <_kill_r+0x1c>
 8006e3e:	682b      	ldr	r3, [r5, #0]
 8006e40:	b103      	cbz	r3, 8006e44 <_kill_r+0x1c>
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	bd38      	pop	{r3, r4, r5, pc}
 8006e46:	bf00      	nop
 8006e48:	20000460 	.word	0x20000460

08006e4c <_getpid_r>:
 8006e4c:	f7fa bc28 	b.w	80016a0 <_getpid>

08006e50 <__swhatbuf_r>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	460c      	mov	r4, r1
 8006e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e58:	4615      	mov	r5, r2
 8006e5a:	2900      	cmp	r1, #0
 8006e5c:	461e      	mov	r6, r3
 8006e5e:	b096      	sub	sp, #88	@ 0x58
 8006e60:	da0c      	bge.n	8006e7c <__swhatbuf_r+0x2c>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	2100      	movs	r1, #0
 8006e66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e6a:	bf14      	ite	ne
 8006e6c:	2340      	movne	r3, #64	@ 0x40
 8006e6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e72:	2000      	movs	r0, #0
 8006e74:	6031      	str	r1, [r6, #0]
 8006e76:	602b      	str	r3, [r5, #0]
 8006e78:	b016      	add	sp, #88	@ 0x58
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	466a      	mov	r2, sp
 8006e7e:	f000 f849 	bl	8006f14 <_fstat_r>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	dbed      	blt.n	8006e62 <__swhatbuf_r+0x12>
 8006e86:	9901      	ldr	r1, [sp, #4]
 8006e88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e90:	4259      	negs	r1, r3
 8006e92:	4159      	adcs	r1, r3
 8006e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e98:	e7eb      	b.n	8006e72 <__swhatbuf_r+0x22>

08006e9a <__smakebuf_r>:
 8006e9a:	898b      	ldrh	r3, [r1, #12]
 8006e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e9e:	079d      	lsls	r5, r3, #30
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	d507      	bpl.n	8006eb6 <__smakebuf_r+0x1c>
 8006ea6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	6123      	str	r3, [r4, #16]
 8006eae:	2301      	movs	r3, #1
 8006eb0:	6163      	str	r3, [r4, #20]
 8006eb2:	b003      	add	sp, #12
 8006eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb6:	466a      	mov	r2, sp
 8006eb8:	ab01      	add	r3, sp, #4
 8006eba:	f7ff ffc9 	bl	8006e50 <__swhatbuf_r>
 8006ebe:	9f00      	ldr	r7, [sp, #0]
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7fe fecd 	bl	8005c64 <_malloc_r>
 8006eca:	b948      	cbnz	r0, 8006ee0 <__smakebuf_r+0x46>
 8006ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ed0:	059a      	lsls	r2, r3, #22
 8006ed2:	d4ee      	bmi.n	8006eb2 <__smakebuf_r+0x18>
 8006ed4:	f023 0303 	bic.w	r3, r3, #3
 8006ed8:	f043 0302 	orr.w	r3, r3, #2
 8006edc:	81a3      	strh	r3, [r4, #12]
 8006ede:	e7e2      	b.n	8006ea6 <__smakebuf_r+0xc>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eea:	81a3      	strh	r3, [r4, #12]
 8006eec:	9b01      	ldr	r3, [sp, #4]
 8006eee:	6020      	str	r0, [r4, #0]
 8006ef0:	b15b      	cbz	r3, 8006f0a <__smakebuf_r+0x70>
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ef8:	f000 f81e 	bl	8006f38 <_isatty_r>
 8006efc:	b128      	cbz	r0, 8006f0a <__smakebuf_r+0x70>
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	f023 0303 	bic.w	r3, r3, #3
 8006f04:	f043 0301 	orr.w	r3, r3, #1
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	431d      	orrs	r5, r3
 8006f0e:	81a5      	strh	r5, [r4, #12]
 8006f10:	e7cf      	b.n	8006eb2 <__smakebuf_r+0x18>
	...

08006f14 <_fstat_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	2300      	movs	r3, #0
 8006f18:	4d06      	ldr	r5, [pc, #24]	@ (8006f34 <_fstat_r+0x20>)
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	f7fa fc23 	bl	800176c <_fstat>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d102      	bne.n	8006f30 <_fstat_r+0x1c>
 8006f2a:	682b      	ldr	r3, [r5, #0]
 8006f2c:	b103      	cbz	r3, 8006f30 <_fstat_r+0x1c>
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	20000460 	.word	0x20000460

08006f38 <_isatty_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	4d05      	ldr	r5, [pc, #20]	@ (8006f54 <_isatty_r+0x1c>)
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	602b      	str	r3, [r5, #0]
 8006f44:	f7fa fc21 	bl	800178a <_isatty>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_isatty_r+0x1a>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_isatty_r+0x1a>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	20000460 	.word	0x20000460

08006f58 <_init>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	bf00      	nop
 8006f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5e:	bc08      	pop	{r3}
 8006f60:	469e      	mov	lr, r3
 8006f62:	4770      	bx	lr

08006f64 <_fini>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	bf00      	nop
 8006f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6a:	bc08      	pop	{r3}
 8006f6c:	469e      	mov	lr, r3
 8006f6e:	4770      	bx	lr
